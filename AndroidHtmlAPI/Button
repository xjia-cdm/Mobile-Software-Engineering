Button  |  Android Developers Android Developers Platform Android Studio Google Play Android Jetpack Docs Blog Documentation Overview Guides Reference Samples Design & Quality Platform Android Studio Google Play Android Jetpack Docs Overview Guides Reference Samples Design & Quality Blog Save the date! Android Dev Summit is coming to Mountain View, CA on November 7-8, 2018. Overview Android Platform Android Support Library AndroidX Architecture Components Android Automotive Library Databinding Library Constraint Layout Library Material Components Test Support Library Wearable Library Play Billing Library Play Core Library Play Install Referrer Library Android Things Kotlin API Reference (Preview) Android Platform AndroidX Android Developers Docs Reference added in API level 1 Summary: Inherited XML Attrs | Inherited Constants | Inherited Fields | Ctors | Methods | Inherited Methods Button public class Button extends TextView java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.Button Known direct subclasses CompoundButton CompoundButton A button with two states, checked and unchecked. Known indirect subclasses CheckBox, RadioButton, Switch, ToggleButton CheckBox A checkbox is a specific type of two-states button that can be either checked or unchecked. RadioButton A radio button is a two-states button that can be either checked or unchecked. Switch A Switch is a two-state toggle switch widget that can select between two options. ToggleButton Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". A user interface element the user can tap or click to perform an action. To display a button in an activity, add a button to the activity's layout XML file:  <Button
     android:id="@+id/button_id"
     android:layout_height="wrap_content"
     android:layout_width="wrap_content"
     android:text="@string/self_destruct" /> To specify an action when the button is pressed, set a click listener on the button object in the corresponding activity code:  public class MyActivity extends Activity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         setContentView(R.layout.content_layout_id);

         final Button button = findViewById(R.id.button_id);
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 // Code here executes on main thread after user presses button
             }
         });
     }
 } The above snippet creates an instance of View.OnClickListener and wires the listener to the button using setOnClickListener(View.OnClickListener). As a result, the system executes the code you write in onClick(View) after the user presses the button. The system executes the code in onClick on the main thread. This means your onClick code must execute quickly to avoid delaying your app's response to further user actions. See Keeping Your App Responsive for more details. Every button is styled using the system's default button background, which is often different from one version of the platform to another. If you are not satisfied with the default button style, you can customize it. For more details and code samples, see the Styling Your Button guide. For all XML style attributes available on Button see Button Attributes, TextView Attributes, View Attributes. See the Styles and Themes guide to learn how to implement and organize overrides to style-related attributes. Summary Inherited XML attributes From class android.widget.TextView android:autoLink Controls whether links such as urls and email addresses are automatically found and converted to clickable links. android:autoSizeMaxTextSize The maximum text size constraint to be used when auto-sizing text. android:autoSizeMinTextSize The minimum text size constraint to be used when auto-sizing text. android:autoSizePresetSizes Resource array of dimensions to be used in conjunction with autoSizeTextType set to uniform. android:autoSizeStepGranularity Specify the auto-size step size if autoSizeTextType is set to uniform. android:autoSizeTextType Specify the type of auto-size. android:autoText If set, specifies that this TextView has a textual input method and automatically corrects some common spelling errors. android:breakStrategy Break strategy (control over paragraph layout). android:bufferType Determines the minimum type that getText() will return. android:capitalize If set, specifies that this TextView has a textual input method and should automatically capitalize what the user types. android:cursorVisible Makes the cursor visible (the default) or invisible. android:digits If set, specifies that this TextView has a numeric input method and that these specific characters are the ones that it will accept. android:drawableBottom The drawable to be drawn below the text. android:drawableEnd The drawable to be drawn to the end of the text. android:drawableLeft The drawable to be drawn to the left of the text. android:drawablePadding The padding between the drawables and the text. android:drawableRight The drawable to be drawn to the right of the text. android:drawableStart The drawable to be drawn to the start of the text. android:drawableTint Tint to apply to the compound (left, top, etc.) drawables. android:drawableTintMode Blending mode used to apply the compound (left, top, etc.) drawables tint. android:drawableTop The drawable to be drawn above the text. android:editable If set, specifies that this TextView has an input method. android:editorExtras Reference to an <input-extras> XML resource containing additional data to supply to an input method, which is private to the implementation of the input method. android:elegantTextHeight Elegant text height, especially for less compacted complex script text. android:ellipsize If set, causes words that are longer than the view is wide to be ellipsized instead of broken in the middle. android:ems Makes the TextView be exactly this many ems wide. android:fallbackLineSpacing Whether to respect the ascent and descent of the fallback fonts that are used in displaying the text. android:firstBaselineToTopHeight Distance from the top of the TextView to the first text baseline. android:fontFamily Font family (named by string or as a font resource reference) for the text. android:fontFeatureSettings Font feature settings. android:freezesText If set, the text view will include its current complete text inside of its frozen icicle in addition to meta-data such as the current cursor position. android:gravity Specifies how to align the text by the view's x- and/or y-axis when the text is smaller than the view. android:height Makes the TextView be exactly this tall. android:hint Hint text to display when the text is empty. android:hyphenationFrequency Frequency of automatic hyphenation. android:imeActionId Supply a value for EditorInfo.actionId used when an input method is connected to the text view. android:imeActionLabel Supply a value for EditorInfo.actionLabel used when an input method is connected to the text view. android:imeOptions Additional features you can enable in an IME associated with an editor to improve the integration with your application. android:includeFontPadding Leave enough room for ascenders and descenders instead of using the font ascent and descent strictly. android:inputMethod If set, specifies that this TextView should use the specified input method (specified by fully-qualified class name). android:inputType The type of data being placed in a text field, used to help an input method decide how to let the user enter text. android:justificationMode Mode for justification. android:lastBaselineToBottomHeight Distance from the bottom of the TextView to the last text baseline. android:letterSpacing Text letter-spacing. android:lineHeight Explicit height between lines of text. android:lineSpacingExtra Extra spacing between lines of text. android:lineSpacingMultiplier Extra spacing between lines of text, as a multiplier. android:lines Makes the TextView be exactly this many lines tall. android:linksClickable If set to false, keeps the movement method from being set to the link movement method even if autoLink causes links to be found. android:marqueeRepeatLimit The number of times to repeat the marquee animation. android:maxEms Makes the TextView be at most this many ems wide. android:maxHeight Makes the TextView be at most this many pixels tall. android:maxLength Set an input filter to constrain the text length to the specified number. android:maxLines Makes the TextView be at most this many lines tall. android:maxWidth Makes the TextView be at most this many pixels wide. android:minEms Makes the TextView be at least this many ems wide. android:minHeight Makes the TextView be at least this many pixels tall. android:minLines Makes the TextView be at least this many lines tall. android:minWidth Makes the TextView be at least this many pixels wide. android:numeric If set, specifies that this TextView has a numeric input method. android:password Whether the characters of the field are displayed as password dots instead of themselves. android:phoneNumber If set, specifies that this TextView has a phone number input method. android:privateImeOptions An addition content type description to supply to the input method attached to the text view, which is private to the implementation of the input method. android:scrollHorizontally Whether the text is allowed to be wider than the view (and therefore can be scrolled horizontally). android:selectAllOnFocus If the text is selectable, select it all when the view takes focus. android:shadowColor Place a blurred shadow of text underneath the text, drawn with the specified color. android:shadowDx Horizontal offset of the text shadow. android:shadowDy Vertical offset of the text shadow. android:shadowRadius Blur radius of the text shadow. android:singleLine Constrains the text to a single horizontally scrolling line instead of letting it wrap onto multiple lines, and advances focus instead of inserting a newline when you press the enter key. android:text Text to display. android:textAllCaps Present the text in ALL CAPS. android:textAppearance Base text color, typeface, size, and style. android:textColor Text color. android:textColorHighlight Color of the text selection highlight. android:textColorHint Color of the hint text. android:textColorLink Text color for links. android:textIsSelectable Indicates that the content of a non-editable text can be selected. android:textScaleX Sets the horizontal scaling factor for the text. android:textSize Size of the text. android:textStyle Style (normal, bold, italic, bold|italic) for the text. android:typeface Typeface (normal, sans, serif, monospace) for the text. android:width Makes the TextView be exactly this wide. From class android.view.View android:accessibilityHeading Whether or not this view is a heading for accessibility purposes. android:accessibilityLiveRegion Indicates to accessibility services whether the user should be notified when this view changes. android:accessibilityTraversalAfter Sets the id of a view after which this one is visited in accessibility traversal. android:accessibilityTraversalBefore Sets the id of a view before which this one is visited in accessibility traversal. android:alpha alpha property of the view, as a value between 0 (completely transparent) and 1 (completely opaque). android:autofillHints Describes the content of a view so that a autofill service can fill in the appropriate data. android:autofilledHighlight Drawable to be drawn over the view to mark it as autofilled May be a reference to another resource, in the form "@[+][package:]type/name" or a theme attribute in the form "?[package:]type/name". android:background A drawable to use as the background. android:backgroundTint Tint to apply to the background. android:backgroundTintMode Blending mode used to apply the background tint. android:clickable Defines whether this view reacts to click events. android:contentDescription Defines text that briefly describes content of the view. android:contextClickable Defines whether this view reacts to context click events. android:defaultFocusHighlightEnabled Whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. android:drawingCacheQuality Defines the quality of translucent drawing caches. android:duplicateParentState When this attribute is set to true, the view gets its drawable state (focused, pressed, etc.) from its direct parent rather than from itself. android:elevation base z depth of the view. android:fadeScrollbars Defines whether to fade out scrollbars when they are not in use. android:fadingEdgeLength Defines the length of the fading edges. android:filterTouchesWhenObscured Specifies whether to filter touches when the view's window is obscured by another visible window. android:fitsSystemWindows Boolean internal attribute to adjust view layout based on system windows such as the status bar. android:focusable Controls whether a view can take focus. android:focusableInTouchMode Boolean that controls whether a view can take focus while in touch mode. android:focusedByDefault Whether this view is a default-focus view. android:forceHasOverlappingRendering Whether this view has elements that may overlap when drawn. android:foreground Defines the drawable to draw over the content. android:foregroundGravity Defines the gravity to apply to the foreground drawable. android:foregroundTint Tint to apply to the foreground. android:foregroundTintMode Blending mode used to apply the foreground tint. android:hapticFeedbackEnabled Boolean that controls whether a view should have haptic feedback enabled for events such as long presses. android:id Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById(). android:importantForAccessibility Describes whether or not this view is important for accessibility. android:importantForAutofill Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes. android:isScrollContainer Set this if the view will serve as a scrolling container, meaning that it can be resized to shrink its overall window so that there will be space for an input method. android:keepScreenOn Controls whether the view's window should keep the screen on while visible. android:keyboardNavigationCluster Whether this view is a root of a keyboard navigation cluster. android:layerType Specifies the type of layer backing this view. android:layoutDirection Defines the direction of layout drawing. android:longClickable Defines whether this view reacts to long click events. android:minHeight Defines the minimum height of the view. android:minWidth Defines the minimum width of the view. android:nextClusterForward Defines the next keyboard navigation cluster. android:nextFocusDown Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusForward Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusLeft Defines the next view to give focus to when the next focus is View.FOCUS_LEFT. android:nextFocusRight Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusUp Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:onClick Name of the method in this View's context to invoke when the view is clicked. android:outlineAmbientShadowColor Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. android:outlineSpotShadowColor Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. android:padding Sets the padding, in pixels, of all four edges. android:paddingBottom Sets the padding, in pixels, of the bottom edge; see R.attr.padding. android:paddingEnd Sets the padding, in pixels, of the end edge; see R.attr.padding. android:paddingHorizontal Sets the padding, in pixels, of the left and right edges; see R.attr.padding. android:paddingLeft Sets the padding, in pixels, of the left edge; see R.attr.padding. android:paddingRight Sets the padding, in pixels, of the right edge; see R.attr.padding. android:paddingStart Sets the padding, in pixels, of the start edge; see R.attr.padding. android:paddingTop Sets the padding, in pixels, of the top edge; see R.attr.padding. android:paddingVertical Sets the padding, in pixels, of the top and bottom edges; see R.attr.padding. android:requiresFadingEdge Defines which edges should be faded on scrolling. android:rotation rotation of the view, in degrees. android:rotationX rotation of the view around the x axis, in degrees. android:rotationY rotation of the view around the y axis, in degrees. android:saveEnabled If false, no state will be saved for this view when it is being frozen. android:scaleX scale of the view in the x direction. android:scaleY scale of the view in the y direction. android:scrollIndicators Defines which scroll indicators should be displayed when the view can be scrolled. android:scrollX The initial horizontal scroll offset, in pixels. android:scrollY The initial vertical scroll offset, in pixels. android:scrollbarAlwaysDrawHorizontalTrack Defines whether the horizontal scrollbar track should always be drawn. android:scrollbarAlwaysDrawVerticalTrack Defines whether the vertical scrollbar track should always be drawn. android:scrollbarDefaultDelayBeforeFade Defines the delay in milliseconds that a scrollbar waits before fade out. android:scrollbarFadeDuration Defines the delay in milliseconds that a scrollbar takes to fade out. android:scrollbarSize Sets the width of vertical scrollbars and height of horizontal scrollbars. android:scrollbarStyle Controls the scrollbar style and position. android:scrollbarThumbHorizontal Defines the horizontal scrollbar thumb drawable. android:scrollbarThumbVertical Defines the vertical scrollbar thumb drawable. android:scrollbarTrackHorizontal Defines the horizontal scrollbar track drawable. android:scrollbarTrackVertical Defines the vertical scrollbar track drawable. android:scrollbars Defines which scrollbars should be displayed on scrolling or not. android:soundEffectsEnabled Boolean that controls whether a view should have sound effects enabled for events such as clicking and touching. android:stateListAnimator Sets the state-based animator for the View. android:tag Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag(). android:textAlignment Defines the alignment of the text. android:textDirection Defines the direction of the text. android:theme Specifies a theme override for a view. android:tooltipText Defines text displayed in a small popup window on hover or long press. android:transformPivotX x location of the pivot point around which the view will rotate and scale. android:transformPivotY y location of the pivot point around which the view will rotate and scale. android:transitionName Names a View such that it can be identified for Transitions. android:translationX translation in x of the view. android:translationY translation in y of the view. android:translationZ translation in z of the view. android:visibility Controls the initial visibility of the view. Inherited constants From class android.widget.TextView int AUTO_SIZE_TEXT_TYPE_NONE The TextView does not auto-size text (default). int AUTO_SIZE_TEXT_TYPE_UNIFORM The TextView scales text size both horizontally and vertically to fit within the container. From class android.view.View int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view. int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view. int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view. int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE Hint indicating that this view can be autofilled with a credit card expiration date. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY Hint indicating that this view can be autofilled with a credit card expiration day. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH Hint indicating that this view can be autofilled with a credit card expiration month. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR Hint indicating that this view can be autofilled with a credit card expiration year. String AUTOFILL_HINT_CREDIT_CARD_NUMBER Hint indicating that this view can be autofilled with a credit card number. String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE Hint indicating that this view can be autofilled with a credit card security code. String AUTOFILL_HINT_EMAIL_ADDRESS Hint indicating that this view can be autofilled with an email address. String AUTOFILL_HINT_NAME Hint indicating that this view can be autofilled with a user's real name. String AUTOFILL_HINT_PASSWORD Hint indicating that this view can be autofilled with a password. String AUTOFILL_HINT_PHONE Hint indicating that this view can be autofilled with a phone number. String AUTOFILL_HINT_POSTAL_ADDRESS Hint indicating that this view can be autofilled with a postal address. String AUTOFILL_HINT_POSTAL_CODE Hint indicating that this view can be autofilled with a postal code. String AUTOFILL_HINT_USERNAME Hint indicating that this view can be autofilled with a username. int AUTOFILL_TYPE_DATE Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime(). int AUTOFILL_TYPE_LIST Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0). int AUTOFILL_TYPE_NONE Autofill type for views that cannot be autofilled. int AUTOFILL_TYPE_TEXT Autofill type for a text field, which is filled by a CharSequence. int AUTOFILL_TYPE_TOGGLE Autofill type for a togglable field, which is filled by a boolean. int DRAG_FLAG_GLOBAL Flag indicating that a drag can cross window boundaries. int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}. int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI. int DRAG_FLAG_GLOBAL_URI_READ When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_GLOBAL_URI_WRITE When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_OPAQUE Flag indicating that the drag shadow will be opaque. int DRAWING_CACHE_QUALITY_AUTO This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_HIGH This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_LOW This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description. int FIND_VIEWS_WITH_TEXT Find views that render the specified text. int FOCUSABLE This view wants keystrokes. int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode. int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode. int FOCUSABLE_AUTO This view determines focusability automatically. int FOCUS_BACKWARD Use with focusSearch(int). int FOCUS_DOWN Use with focusSearch(int). int FOCUS_FORWARD Use with focusSearch(int). int FOCUS_LEFT Use with focusSearch(int). int FOCUS_RIGHT Use with focusSearch(int). int FOCUS_UP Use with focusSearch(int). int GONE This view is invisible, and it doesn't take any space for layout purposes. int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses. int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views. int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility. int IMPORTANT_FOR_AUTOFILL_AUTO Automatically determine whether a view is important for autofill. int IMPORTANT_FOR_AUTOFILL_NO The view is not important for autofill, but its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS The view is not important for autofill, and its children (if any) will not be traversed. int IMPORTANT_FOR_AUTOFILL_YES The view is important for autofill, and its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS The view is important for autofill, but its children (if any) will not be traversed. int INVISIBLE This view is invisible, but it still takes up space for layout purposes. int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user. int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer. int LAYER_TYPE_NONE Indicates that the view does not have a layer. int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer. int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent. int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale. int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right. int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left. int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int). int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size. int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits. int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have. int NOT_FOCUSABLE This view does not want keystrokes. int NO_ID Used to mark a View that has no ID. int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll. int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. int OVER_SCROLL_NEVER Never allow a user to over-scroll this view. int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off. int SCREEN_STATE_ON Indicates that the screen has changed state and is now on. int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view. int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding. int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view. int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding. int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system. int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge. int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge. int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis. int SCROLL_AXIS_NONE Indicates no axis of view scrolling. int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis. int SCROLL_INDICATOR_BOTTOM Scroll indicator direction for the bottom edge of the view. int SCROLL_INDICATOR_END Scroll indicator direction for the ending edge of the view. int SCROLL_INDICATOR_LEFT Scroll indicator direction for the left edge of the view. int SCROLL_INDICATOR_RIGHT Scroll indicator direction for the right edge of the view. int SCROLL_INDICATOR_START Scroll indicator direction for the starting edge of the view. int SCROLL_INDICATOR_TOP Scroll indicator direction for the top edge of the view. int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching. int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead. int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead. int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden. int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds. int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode. int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default). int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI. int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g. int TEXT_ALIGNMENT_GRAVITY Default for the root view. int TEXT_ALIGNMENT_INHERIT Default text alignment. int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g. int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g. int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise. int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise. int TEXT_DIRECTION_ANY_RTL Text direction is using "any-RTL" algorithm. int TEXT_DIRECTION_FIRST_STRONG Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_LTR Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_RTL Text direction is using "first strong algorithm". int TEXT_DIRECTION_INHERIT Text direction is inherited through ViewGroup int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale. int TEXT_DIRECTION_LTR Text direction is forced to LTR. int TEXT_DIRECTION_RTL Text direction is forced to RTL. String VIEW_LOG_TAG The logging tag used by this class with android.util.Log. int VISIBLE This view is visible. Inherited fields From class android.view.View public static final Property<View, Float> ALPHA A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods. protected static final int[] EMPTY_STATE_SET Indicates the view has no states set. protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is enabled, focused and selected. protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused, selected and its window has the focus. protected static final int[] ENABLED_FOCUSED_STATE_SET Indicates the view is enabled and has the focus. protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused and its window has the focus. protected static final int[] ENABLED_SELECTED_STATE_SET Indicates the view is enabled and selected. protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, selected and its window has the focus. protected static final int[] ENABLED_STATE_SET Indicates the view is enabled. protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled and that its window has focus. protected static final int[] FOCUSED_SELECTED_STATE_SET Indicates the view is focused and selected. protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is focused, selected and its window has the focus. protected static final int[] FOCUSED_STATE_SET Indicates the view is focused. protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view has the focus and that its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, enabled, focused and selected. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET Indicates the view is pressed, enabled and focused. protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused and its window has the focus. protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET Indicates the view is pressed, enabled and selected. protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_STATE_SET Indicates the view is pressed and enabled. protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled and its window has the focus. protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, focused and selected. protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused, selected and its window has the focus. protected static final int[] PRESSED_FOCUSED_STATE_SET Indicates the view is pressed and focused. protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused and its window has the focus. protected static final int[] PRESSED_SELECTED_STATE_SET Indicates the view is pressed and selected. protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, selected and its window has the focus. protected static final int[] PRESSED_STATE_SET Indicates the view is pressed. protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed and its window has the focus. public static final Property<View, Float> ROTATION A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods. public static final Property<View, Float> ROTATION_X A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods. public static final Property<View, Float> ROTATION_Y A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods. public static final Property<View, Float> SCALE_X A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods. public static final Property<View, Float> SCALE_Y A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods. protected static final int[] SELECTED_STATE_SET Indicates the view is selected. protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is selected and that its window has the focus. public static final Property<View, Float> TRANSLATION_X A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods. public static final Property<View, Float> TRANSLATION_Y A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods. public static final Property<View, Float> TRANSLATION_Z A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods. protected static final int[] WINDOW_FOCUSED_STATE_SET Indicates the view's window has focus. public static final Property<View, Float> X A Property wrapper around the x functionality handled by the setX(float) and getX() methods. public static final Property<View, Float> Y A Property wrapper around the y functionality handled by the setY(float) and getY() methods. public static final Property<View, Float> Z A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods. Public constructors Button(Context context) Simple constructor to use when creating a button from code. Button(Context context, AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. Button(Context context, AttributeSet attrs, int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. Button(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. Public methods CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. Inherited methods From class android.widget.TextView void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addTextChangedListener(TextWatcher watcher) Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. final void append(CharSequence text) Convenience method to append the specified text to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void append(CharSequence text, int start, int end) Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void beginBatchEdit() boolean bringPointIntoView(int offset) Move the point, specified by the offset, into the view if it is needed. void cancelLongPress() Cancels a pending long press. void clearComposingText() Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG. boolean didTouchFocusSelect() Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. void endBatchEdit() boolean extractText(ExtractedTextRequest request, ExtractedText outText) If this TextView contains editable content, extract a portion of it based on the information in request in to outText. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. final int getAutoLinkMask() Gets the autolink mask of the text. int getAutoSizeMaxTextSize() int getAutoSizeMinTextSize() int getAutoSizeStepGranularity() int[] getAutoSizeTextAvailableSizes() int getAutoSizeTextType() Returns the type of auto-size set for this widget. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the TextView's current text for AutoFill. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. int getBreakStrategy() Gets the current strategy for breaking paragraphs into lines. int getCompoundDrawablePadding() Returns the padding between the compound drawables and the text. ColorStateList getCompoundDrawableTintList() PorterDuff.Mode getCompoundDrawableTintMode() Returns the blending mode used to apply the tint to the compound drawables, if specified. Drawable[] getCompoundDrawables() Returns drawables for the left, top, right, and bottom borders. Drawable[] getCompoundDrawablesRelative() Returns drawables for the start, top, end, and bottom borders. int getCompoundPaddingBottom() Returns the bottom padding of the view, plus space for the bottom Drawable if any. int getCompoundPaddingEnd() Returns the end padding of the view, plus space for the end Drawable if any. int getCompoundPaddingLeft() Returns the left padding of the view, plus space for the left Drawable if any. int getCompoundPaddingRight() Returns the right padding of the view, plus space for the right Drawable if any. int getCompoundPaddingStart() Returns the start padding of the view, plus space for the start Drawable if any. int getCompoundPaddingTop() Returns the top padding of the view, plus space for the top Drawable if any. final int getCurrentHintTextColor() Return the current color selected to paint the hint text. final int getCurrentTextColor() Return the current color selected for normal text. ActionMode.Callback getCustomInsertionActionModeCallback() Retrieves the value set in setCustomInsertionActionModeCallback(ActionMode.Callback). ActionMode.Callback getCustomSelectionActionModeCallback() Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback). boolean getDefaultEditable() Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options. MovementMethod getDefaultMovementMethod() Subclasses override this to specify a default movement method. Editable getEditableText() Return the text that TextView is displaying as an Editable object. TextUtils.TruncateAt getEllipsize() Returns where, if anywhere, words that are longer than the view is wide should be ellipsized. CharSequence getError() Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input. int getExtendedPaddingBottom() Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. int getExtendedPaddingTop() Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. InputFilter[] getFilters() Returns the current list of input filters. int getFirstBaselineToTopHeight() Returns the distance between the first text baseline and the top of this TextView. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. String getFontFeatureSettings() Returns the font feature settings. String getFontVariationSettings() Returns the font variation settings. boolean getFreezesText() Return whether this text view is including its entire text contents in frozen icicles. int getGravity() Returns the horizontal and vertical alignment of this TextView. int getHighlightColor() CharSequence getHint() Returns the hint that is displayed when the text of the TextView is empty. final ColorStateList getHintTextColors() int getHyphenationFrequency() Gets the current frequency of automatic hyphenation to be used when determining word breaks. int getImeActionId() Get the IME action ID previous set with setImeActionLabel(CharSequence, int). CharSequence getImeActionLabel() Get the IME action label previous set with setImeActionLabel(CharSequence, int). LocaleList getImeHintLocales() int getImeOptions() Get the type of the Input Method Editor (IME). boolean getIncludeFontPadding() Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. Bundle getInputExtras(boolean create) Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. int getInputType() Get the type of the editable content. int getJustificationMode() final KeyListener getKeyListener() Gets the current KeyListener for the TextView. int getLastBaselineToBottomHeight() Returns the distance between the last text baseline and the bottom of this TextView. final Layout getLayout() Gets the Layout that is currently being used to display the text. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. float getLetterSpacing() Gets the text letter-space value, which determines the spacing between characters. int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. int getLineCount() Return the number of lines of text, or 0 if the internal Layout has not been built. int getLineHeight() Gets the vertical distance between lines of text, in pixels. float getLineSpacingExtra() Gets the line spacing extra space float getLineSpacingMultiplier() Gets the line spacing multiplier final ColorStateList getLinkTextColors() final boolean getLinksClickable() Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). int getMarqueeRepeatLimit() Gets the number of times the marquee animation is repeated. int getMaxEms() Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth(int) or setWidth(int). int getMaxHeight() Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines(int) or setLines(int). int getMaxLines() Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight(int) or setHeight(int). int getMaxWidth() Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms(int) or setEms(int). int getMinEms() Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth(int) or setWidth(int). int getMinHeight() Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines(int) or setLines(int). int getMinLines() Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight(int) or setHeight(int). int getMinWidth() Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms(int) or setEms(int). final MovementMethod getMovementMethod() Gets the MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality. int getOffsetForPosition(float x, float y) Get the character offset closest to the specified absolute position. TextPaint getPaint() Gets the TextPaint used for the text. int getPaintFlags() Gets the flags on the Paint being used to display the text. String getPrivateImeOptions() Get the private type of the content. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. int getSelectionEnd() Convenience for Selection.getSelectionEnd(CharSequence). int getSelectionStart() Convenience for Selection.getSelectionStart(CharSequence). int getShadowColor() Gets the color of the shadow layer. float getShadowDx() float getShadowDy() Gets the vertical offset of the shadow layer. float getShadowRadius() Gets the radius of the shadow layer. final boolean getShowSoftInputOnFocus() Returns whether the soft input method will be made visible when this TextView gets focused. CharSequence getText() Return the text that TextView is displaying. TextClassifier getTextClassifier() Returns the TextClassifier used by this TextView. final ColorStateList getTextColors() Gets the text colors for the different states (normal, selected, focused) of the TextView. Locale getTextLocale() Get the default primary Locale of the text in this TextView. LocaleList getTextLocales() Get the default LocaleList of the text in this TextView. PrecomputedText.Params getTextMetricsParams() Gets the parameters for text layout precomputation, for use with PrecomputedText. float getTextScaleX() Gets the extent by which text should be stretched horizontally. float getTextSize() int getTopPaddingOffset() Amount by which to extend the top fading region. int getTotalPaddingBottom() Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. int getTotalPaddingEnd() Returns the total end padding of the view, including the end Drawable if any. int getTotalPaddingLeft() Returns the total left padding of the view, including the left Drawable if any. int getTotalPaddingRight() Returns the total right padding of the view, including the right Drawable if any. int getTotalPaddingStart() Returns the total start padding of the view, including the start Drawable if any. int getTotalPaddingTop() Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. final TransformationMethod getTransformationMethod() Gets the current TransformationMethod for the TextView. Typeface getTypeface() Gets the current Typeface that is used to style the text. URLSpan[] getUrls() Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasSelection() Return true iff there is a selection inside this text view. void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. boolean isAllCaps() Checks whether the transformation method applied to this TextView is set to ALL CAPS. boolean isCursorVisible() boolean isElegantTextHeight() Get the value of the TextView's elegant height metrics flag. boolean isFallbackLineSpacing() boolean isInputMethodTarget() Returns whether this text view is a current input method target. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isSuggestionsEnabled() Return whether or not suggestions are enabled on this TextView. boolean isTextSelectable() Returns the state of the textIsSelectable flag (See setTextIsSelectable()). void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. int length() Returns the length, in characters, of the text managed by this TextView boolean moveCursorToVisibleOffset() Move the cursor, if needed, so that it is at an offset that is visible to the user. void onAttachedToWindow() This is called when the view is attached to a window. void onBeginBatchEdit() Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit(). boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onCommitCompletion(CompletionInfo text) Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). void onCommitCorrection(CorrectionInfo info) Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling InputConnection.commitCorrection(). void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onEditorAction(int actionCode) Called when an attached input method calls InputConnection.performEditorAction() for this text view. void onEndBatchEdit() Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit(). void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. boolean onPrivateIMECommand(String action, Bundle data) Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand(). void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int horiz, int vert, int oldHoriz, int oldVert) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). void onSelectionChanged(int selStart, int selEnd) This method is called when the selection has changed, in case any subclasses would like to know. void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) This method is called when the text is changed, in case any subclasses would like to know. boolean onTextContextMenuItem(int id) Called when a context menu option for the text view is selected. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void removeTextChangedListener(TextWatcher watcher) Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAllCaps(boolean allCaps) Sets the properties of this field to transform input to ALL CAPS display. final void setAutoLinkMask(int mask) Sets the autolink mask of the text. void setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeWithDefaults(int autoSizeTextType) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration. void setBreakStrategy(int breakStrategy) Sets the break strategy for breaking paragraphs into lines. void setCompoundDrawablePadding(int pad) Sets the size of the padding between the compound drawables and the text. void setCompoundDrawableTintList(ColorStateList tint) Applies a tint to the compound drawables. void setCompoundDrawableTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList(ColorStateList) to the compound drawables. void setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesRelative(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(int start, int top, int end, int bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCursorVisible(boolean visible) Set whether the cursor is visible. void setCustomInsertionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View. void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. final void setEditableFactory(Editable.Factory factory) Sets the Factory used to create new Editables. void setElegantTextHeight(boolean elegant) Set the TextView's elegant height metrics flag. void setEllipsize(TextUtils.TruncateAt where) Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. void setEms(int ems) Sets the width of the TextView to be exactly ems wide. void setEnabled(boolean enabled) Set the enabled state of this view. void setError(CharSequence error) Sets the right-hand compound drawable of the TextView to the "error" icon and sets an error message that will be displayed in a popup when the TextView has focus. void setError(CharSequence error, Drawable icon) Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. void setExtractedText(ExtractedText text) Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText). void setFallbackLineSpacing(boolean enabled) Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). void setFilters(InputFilter[] filters) Sets the list of input filters that will be used if the buffer is Editable. void setFirstBaselineToTopHeight(int firstBaselineToTopHeight) Updates the top padding of the TextView so that firstBaselineToTopHeight is equal to the distance between the firt text baseline and the top of this TextView. void setFontFeatureSettings(String fontFeatureSettings) Sets font feature settings. boolean setFontVariationSettings(String fontVariationSettings) Sets TrueType or OpenType font variation settings. boolean setFrame(int l, int t, int r, int b) Assign a size and position to this view. void setFreezesText(boolean freezesText) Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. void setGravity(int gravity) Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. void setHeight(int pixels) Sets the height of the TextView to be exactly pixels tall. void setHighlightColor(int color) Sets the color used to display the selection highlight. final void setHint(CharSequence hint) Sets the text to be displayed when the text of the TextView is empty. final void setHint(int resid) Sets the text to be displayed when the text of the TextView is empty, from a resource. final void setHintTextColor(ColorStateList colors) Sets the color of the hint text. final void setHintTextColor(int color) Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. void setHorizontallyScrolling(boolean whether) Sets whether the text should be allowed to be wider than the View is. void setHyphenationFrequency(int hyphenationFrequency) Sets the frequency of automatic hyphenation to use when determining word breaks. void setImeActionLabel(CharSequence label, int actionId) Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo.actionLabel and EditorInfo.actionId when it has focus. void setImeHintLocales(LocaleList hintLocales) Change "hint" locales associated with the text view, which will be reported to an IME with EditorInfo.hintLocales when it has focus. void setImeOptions(int imeOptions) Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with EditorInfo.imeOptions when it has focus. void setIncludeFontPadding(boolean includepad) Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. void setInputExtras(int xmlResId) Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection. void setInputType(int type) Set the type of the content with a constant as defined for EditorInfo.inputType. void setJustificationMode(int justificationMode) Set justification mode. void setKeyListener(KeyListener input) Sets the key listener to be used with this TextView. void setLastBaselineToBottomHeight(int lastBaselineToBottomHeight) Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is equal to the distance between the last text baseline and the bottom of this TextView. void setLetterSpacing(float letterSpacing) Sets text letter-spacing in em units. void setLineHeight(int lineHeight) Sets an explicit line height for this TextView. void setLineSpacing(float add, float mult) Sets line spacing for this TextView. void setLines(int lines) Sets the height of the TextView to be exactly lines tall. final void setLinkTextColor(ColorStateList colors) Sets the color of links in the text. final void setLinkTextColor(int color) Sets the color of links in the text. final void setLinksClickable(boolean whether) Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). void setMarqueeRepeatLimit(int marqueeLimit) Sets how many times to repeat the marquee animation. void setMaxEms(int maxEms) Sets the width of the TextView to be at most maxEms wide. void setMaxHeight(int maxPixels) Sets the height of the TextView to be at most maxPixels tall. void setMaxLines(int maxLines) Sets the height of the TextView to be at most maxLines tall. void setMaxWidth(int maxPixels) Sets the width of the TextView to be at most maxPixels wide. void setMinEms(int minEms) Sets the width of the TextView to be at least minEms wide. void setMinHeight(int minPixels) Sets the height of the TextView to be at least minPixels tall. void setMinLines(int minLines) Sets the height of the TextView to be at least minLines tall. void setMinWidth(int minPixels) Sets the width of the TextView to be at least minPixels wide. final void setMovementMethod(MovementMethod movement) Sets the MovementMethod for handling arrow key movement for this TextView. void setOnEditorActionListener(TextView.OnEditorActionListener l) Set a special listener to be called when an action is performed on the text view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPaintFlags(int flags) Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. void setPrivateImeOptions(String type) Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection. void setRawInputType(int type) Directly change the content type integer of the text view, without modifying any other state. void setScroller(Scroller s) Sets the Scroller used for producing a scrolling animation void setSelectAllOnFocus(boolean selectAllOnFocus) Set the TextView so that when it takes focus, all the text is selected. void setSelected(boolean selected) Changes the selection state of this view. void setShadowLayer(float radius, float dx, float dy, int color) Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. final void setShowSoftInputOnFocus(boolean show) Sets whether the soft input method will be made visible when this TextView gets focused. void setSingleLine(boolean singleLine) If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. void setSingleLine() Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. final void setSpannableFactory(Spannable.Factory factory) Sets the Factory used to create new Spannables. final void setText(int resid) Sets the text to be displayed using a string resource identifier. final void setText(CharSequence text) Sets the text to be displayed. void setText(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType. final void setText(int resid, TextView.BufferType type) Sets the text to be displayed using a string resource identifier and the TextView.BufferType. final void setText(char[] text, int start, int len) Sets the TextView to display the specified slice of the specified char array. void setTextAppearance(Context context, int resId) This method was deprecated in API level 23. Use setTextAppearance(int) instead. void setTextAppearance(int resId) Sets the text appearance from the specified style resource. void setTextClassifier(TextClassifier textClassifier) Sets the TextClassifier for this TextView. void setTextColor(int color) Sets the text color for all the states (normal, selected, focused) to be this color. void setTextColor(ColorStateList colors) Sets the text color. void setTextIsSelectable(boolean selectable) Sets whether the content of this view is selectable by the user. final void setTextKeepState(CharSequence text) Sets the text to be displayed but retains the cursor position. final void setTextKeepState(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType but retains the cursor position. void setTextLocale(Locale locale) Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale. void setTextLocales(LocaleList locales) Set the default LocaleList of the text in this TextView to the given value. void setTextMetricsParams(PrecomputedText.Params params) Apply the text layout parameter. void setTextScaleX(float size) Sets the horizontal scale factor for text. void setTextSize(int unit, float size) Set the default text size to a given unit and value. void setTextSize(float size) Set the default text size to the given value, interpreted as "scaled pixel" units. final void setTransformationMethod(TransformationMethod method) Sets the transformation that is applied to the text that this TextView is displaying. void setTypeface(Typeface tf) Sets the typeface and style in which the text should be displayed. void setTypeface(Typeface tf, int style) Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. void setWidth(int pixels) Sets the width of the TextView to be exactly pixels wide. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. From class android.view.View void addChildrenForAccessibility(ArrayList<View> outChildren) Adds the children of this View relevant for accessibility to the given list as output. void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addKeyboardNavigationClusters(Collection<View> views, int direction) Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views. void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes. void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing. void addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Adds a listener which will receive unhandled KeyEvents. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. void announceForAccessibility(CharSequence text) Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void autofill(SparseArray<AutofillValue> values) Automatically fills the content of the virtual children within this view. boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw. boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw. boolean awakenScrollBars() Trigger the scrollbars to draw. void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views. void buildDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer. boolean callOnClick() Directly call any attached OnClickListener. boolean canResolveLayoutDirection() Check if layout direction resolution can be done. boolean canResolveTextAlignment() Check if text alignment resolution can be done. boolean canResolveTextDirection() Check if text direction resolution can be done. boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction. boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction. final void cancelDragAndDrop() Cancels an ongoing drag and drop operation. void cancelLongPress() Cancels a pending long press. final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue. boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. void clearAnimation() Cancels any animations for this view. void clearFocus() Called when this view wants to give up focus. static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState(). int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService. void createContextMenu(ContextMenu menu) Show the context menu for this view. void destroyDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. boolean dispatchCapturedPointerEvent(MotionEvent event) Pass a captured pointer event down to the focused view. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. void dispatchDrawableHotspotChanged(float x, float y) Dispatches drawableHotspotChanged to all of this View's children. void dispatchFinishTemporaryDetach() Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent. boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view. boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments) Report an accessibility action to this view's parents for delegated processing. boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it. boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress. void dispatchPointerCaptureChanged(boolean hasCapture) boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. void dispatchProvideAutofillStructure(ViewStructure structure, int flags) Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. void dispatchProvideStructure(ViewStructure structure) Dispatch creation of ViewStructure down the hierarchy. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchStartTemporaryDetach() Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View. void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. final <T extends View> T findViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy. final <T extends View> T findViewWithTag(Object tag) Look for a child view with the given tag. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets. View focusSearch(int direction) Find the nearest view in the specified direction that can take focus. void forceHasOverlappingRendering(boolean hasOverlappingRendering) Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior). void forceLayout() Forces this view to be laid out during the next layout pass. static int generateViewId() Generate a value suitable for use in setId(int). CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. int getAccessibilityLiveRegion() Gets the live region mode for this View. AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. CharSequence getAccessibilityPaneTitle() Get the title of the pane for purposes of accessibility. int getAccessibilityTraversalAfter() Gets the id of a view after which this one is visited in accessibility traversal. int getAccessibilityTraversalBefore() Gets the id of a view before which this one is visited in accessibility traversal. float getAlpha() The opacity of the view. Animation getAnimation() Get the animation currently associated with this view. IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to. String[] getAutofillHints() Gets the hints that help an AutofillService determine how to autofill the view with the user's data. final AutofillId getAutofillId() Gets the unique, logical identifier of this view in the activity, for autofill purposes. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the View's current autofill value. Drawable getBackground() Gets the background drawable ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified. PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. final int getBottom() Bottom position of this view relative to its parent. float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. float getCameraDistance() Gets the distance along the Z axis from the camera to this view. boolean getClipBounds(Rect outRect) Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null. Rect getClipBounds() Returns a copy of the current clipBounds. final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View. CharSequence getContentDescription() Returns the View's content description. final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc. ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu. final boolean getDefaultFocusHighlightEnabled() /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. static int getDefaultSize(int size, int measureSpec) Utility to return a default size. Display getDisplay() Gets the logical display to which the view's window has been attached. final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view. Bitmap getDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Bitmap getDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheBackgroundColor() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheQuality() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view. long getDrawingTime() Return the time at which the drawing of the view hierarchy started. float getElevation() The base elevation of this view relative to its parent, in pixels. boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window. boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean). int getFocusable() Returns the focusable setting for this view. ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. Drawable getForeground() Returns the drawable used as the foreground of this View. int getForegroundGravity() Describes how the foreground is positioned. ColorStateList getForegroundTintList() Return the tint applied to the foreground drawable, if specified. PorterDuff.Mode getForegroundTintMode() Return the blending mode used to apply the tint to the foreground drawable, if specified. final boolean getGlobalVisibleRect(Rect r) boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. Handler getHandler() final boolean getHasOverlappingRendering() Returns the value for overlapping rendering that is used internally. final int getHeight() Return the height of your view. void getHitRect(Rect outRect) Hit rectangle in parent's coordinates int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar. int getId() Returns this view's identifier. int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility. int getImportantForAutofill() Gets the mode for determining whether this view is important for autofill. boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window. int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes. int getLayerType() Indicates what type of layer is currently associated with this view. int getLayoutDirection() Returns the resolved layout direction for this view. ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view. final int getLeft() Left position of this view relative to its parent. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. final boolean getLocalVisibleRect(Rect r) void getLocationInWindow(int[] outLocation) Computes the coordinates of this view in its window. void getLocationOnScreen(int[] outLocation) Computes the coordinates of this view on the screen. Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int). final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int). int getMinimumHeight() Returns the minimum height of the view. int getMinimumWidth() Returns the minimum width of the view. int getNextClusterForwardId() Gets the id of the root of the next keyboard navigation cluster. int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN. int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD. int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT. int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT. int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP. View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view. int getOutlineAmbientShadowColor() ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. int getOutlineSpotShadowColor() int getOverScrollMode() Returns the over-scroll mode for this view. ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist. int getPaddingBottom() Returns the bottom padding of this view. int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction. int getPaddingLeft() Returns the left padding of this view. int getPaddingRight() Returns the right padding of this view. int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction. int getPaddingTop() Returns the top padding of this view. final ViewParent getParent() Gets the parent of this view. ViewParent getParentForAccessibility() Gets the parent for accessibility purposes. float getPivotX() The x location of the point around which the view is rotated and scaled. float getPivotY() The y location of the point around which the view is rotated and scaled. PointerIcon getPointerIcon() Gets the pointer icon for the current view. Resources getResources() Returns the resources associated with this view. final boolean getRevealOnFocusHint() Returns this view's preference for reveal behavior when it gains focus. final int getRight() Right position of this view relative to its parent. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. View getRootView() Finds the topmost view in the current view hierarchy. WindowInsets getRootWindowInsets() Provide original WindowInsets that are dispatched to the view hierarchy. float getRotation() The degrees that the view is rotated around the pivot point. float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point. float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point. float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade. int getScrollBarFadeDuration() Returns the scrollbar fade duration. int getScrollBarSize() Returns the scrollbar size. int getScrollBarStyle() Returns the current scrollbar style. int getScrollIndicators() Returns a bitmask representing the enabled scroll indicators. final int getScrollX() Return the scrolled left position of this view. final int getScrollY() Return the scrolled top position of this view. int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists. int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use. int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use. int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested. Object getTag() Returns this view's tag. Object getTag(int key) Returns the tag associated with this view and the specified key. int getTextAlignment() Return the resolved text alignment. int getTextDirection() Return the resolved text direction. CharSequence getTooltipText() Returns the view's tooltip text. final int getTop() Top position of this view relative to its parent. float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge. int getTopPaddingOffset() Amount by which to extend the top fading region. TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View. ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. String getTransitionName() Returns the name of the View to be used to identify Views in Transitions. float getTranslationX() The horizontal location of this view relative to its left position. float getTranslationY() The vertical location of this view relative to its top position. float getTranslationZ() The depth location of this view relative to its elevation. int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible. int getVerticalScrollbarPosition() int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar. ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy. int getVisibility() Returns the visibility status for this view. final int getWidth() Return the width of your view. int getWindowAttachCount() WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to. int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window. IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to. int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in. float getX() The visual x position of this view, in pixels. float getY() The visual y position of this view, in pixels. float getZ() The visual z position of this view, in pixels. boolean hasExplicitFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true. boolean hasFocus() Returns true if this view has focus itself, or is the ancestor of the view that has focus. boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent. boolean hasOnClickListeners() Return whether this view has an attached OnClickListener. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasPointerCapture() Checks pointer capture status. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus. static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource. void invalidate() Invalidate the whole view. void invalidate(Rect dirty) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidate(int l, int t, int r, int b) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. void invalidateOutline() Called to rebuild this View's Outline from its outline provider boolean isAccessibilityFocused() Returns whether this View is accessibility focused. boolean isAccessibilityHeading() Gets whether this view is a heading for accessibility purposes. boolean isActivated() Indicates the activation state of this view. boolean isAttachedToWindow() Returns true if this view is currently attached to a window. boolean isClickable() Indicates whether this view reacts to click events or not. boolean isContextClickable() Indicates whether this view reacts to context clicks or not. boolean isDirty() True if this view has changed since the last time being drawn. boolean isDrawingCacheEnabled() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent. boolean isEnabled() Returns the enabled status for this view. final boolean isFocusable() Returns whether this View is currently able to take focus. final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode. boolean isFocused() Returns true if this view has focus final boolean isFocusedByDefault() Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view. boolean isHapticFeedbackEnabled() boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not. boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally. boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not. boolean isHovered() Returns true if the view is currently hovered. boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility. final boolean isImportantForAutofill() Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes. boolean isInEditMode() Indicates whether this View is currently in edit mode. boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass. boolean isInTouchMode() Returns whether the device is currently in touch mode. final boolean isKeyboardNavigationCluster() Returns whether this View is a root of a keyboard navigation cluster. boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window. boolean isLayoutDirectionResolved() boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. boolean isLongClickable() Indicates whether this view reacts to long click events or not. boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view. boolean isOpaque() Indicates whether this View is opaque. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isPaddingRelative() Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through boolean isPivotSet() Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float). boolean isPressed() Indicates whether the view is currently in pressed state. boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. boolean isScreenReaderFocusable() Returns whether the view should be treated as a focusable unit by screen reader accessibility tools. boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window. boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling boolean isSelected() Indicates the selection state of this view. boolean isShown() Returns the visibility of this view and all of its ancestors boolean isSoundEffectsEnabled() final boolean isTemporarilyDetached() Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach(). boolean isTextAlignmentResolved() boolean isTextDirectionResolved() boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally. boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not. boolean isVisibleToUserForAutofill(int virtualId) Computes whether this virtual autofill view is visible to the user. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. View keyboardNavigationClusterSearch(View currentCluster, int direction) Find the nearest keyboard navigation cluster in the specified direction. void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be. static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int). void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels. void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy. void onAttachedToWindow() This is called when the view is attached to a window. void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. boolean onCapturedPointerEvent(MotionEvent event) Implement this method to handle captured pointer events boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. void onDetachedFromWindow() This is called when the view is detached from a window. void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onDrawForeground(Canvas canvas) Draw any foreground content for this view. final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar. boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies. void onFinishInflate() Finalize inflating a view from XML. void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view. void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. void onHoverChanged(boolean hovered) Implement this method to handle hover state changes. boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events. void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source. void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation. void onPointerCaptureChange(boolean hasCapture) Called when the window has just acquired or lost pointer capture. void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) Populates a ViewStructure containing virtual children to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. void onProvideVirtualStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityAggregated(boolean isVisible) Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE). boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries. boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view. boolean performClick() Call this view's OnClickListener, if it is defined. boolean performContextClick(float x, float y) Call this view's OnContextClickListener, if it is defined. boolean performContextClick() Call this view's OnContextClickListener, if it is defined. boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view. boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options. boolean performLongClick(float x, float y) Calls this view's OnLongClickListener, if it is defined. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void playSoundEffect(int soundConstant) Play a sound effect for this view. boolean post(Runnable action) Causes the Runnable to be added to the message queue. boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame. void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step. void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. void refreshDrawableState() Call this to force a view to update its drawable state. void releasePointerCapture() Releases the pointer capture. boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue. void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes. void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes. void removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Removes a listener which will receive unhandled KeyEvents. void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants. boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants. void requestLayout() Call this when something has changed which has invalidated the layout of this view. void requestPointerCapture() Requests pointer capture mode. boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View. final <T extends View> T requireViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy. void resetPivot() Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float). static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. boolean restoreDefaultFocus() Gives focus to the default-focus view in the view hierarchy that has this view as a root. void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container. void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container. void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition (as opposed to inheritance). void setAccessibilityHeading(boolean isHeading) Set if view is a heading for a section of content for accessibility purposes. void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view. void setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle) Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes. void setAccessibilityTraversalAfter(int afterId) Sets the id of a view after which this one is visited in accessibility traversal. void setAccessibilityTraversalBefore(int beforeId) Sets the id of a view before which this one is visited in accessibility traversal. void setActivated(boolean activated) Changes the activated state of this view. void setAlpha(float alpha) Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. void setAnimation(Animation animation) Sets the next animation to play for this view. void setAutofillHints(String... autofillHints) Sets the hints that help an AutofillService determine how to autofill the view with the user's data. void setAutofillId(AutofillId id) Sets the unique, logical identifier of this view in the activity, for autofill purposes. void setBackground(Drawable background) Set the background to a given Drawable, or remove the background. void setBackgroundColor(int color) Sets the background color for this view. void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead void setBackgroundResource(int resid) Set the background to a given resource. void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable. void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. final void setBottom(int bottom) Sets the bottom position of this view relative to its parent. void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. void setClickable(boolean clickable) Enables or disables click events for this view. void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View. void setContentDescription(CharSequence contentDescription) Sets the View's content description. void setContextClickable(boolean contextClickable) Enables or disables context clicking for this view. void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled) Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. void setDrawingCacheBackgroundColor(int color) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheEnabled(boolean enabled) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheQuality(int quality) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view. void setElevation(float elevation) Sets the base elevation of this view, in pixels. void setEnabled(boolean enabled) Set the enabled state of this view. void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available. void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window. void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. void setFocusable(boolean focusable) Set whether this view can receive the focus. void setFocusable(int focusable) Sets whether this view can receive focus. void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode. void setFocusedByDefault(boolean isFocusedByDefault) Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view. void setForeground(Drawable foreground) Supply a Drawable that is to be rendered on top of all of the content in the view. void setForegroundGravity(int gravity) Describes how the foreground is positioned. void setForegroundTintList(ColorStateList tint) Applies a tint to the foreground drawable. void setForegroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable. void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses. void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally. void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not. void setHovered(boolean hovered) Sets whether the view is currently hovered. void setId(int id) Sets the identifier for this view. void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. void setImportantForAutofill(int mode) Sets the mode for determining whether this view is considered important for autofill. void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. void setKeyboardNavigationCluster(boolean isCluster) Set whether this view is a root of a keyboard navigation cluster. void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes. void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view. void setLayoutDirection(int layoutDirection) Set the layout direction for this view. void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view. final void setLeft(int left) Sets the left position of this view relative to its parent. void setLongClickable(boolean longClickable) Enables or disables long click events for this view. final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height. void setMinimumHeight(int minHeight) Sets the minimum height of the view. void setMinimumWidth(int minWidth) Sets the minimum width of the view. void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view. void setNextClusterForwardId(int nextClusterForwardId) Sets the id of the view to use as the root of the next keyboard navigation cluster. void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN. void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD. void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT. void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT. void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP. void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. void setOnCapturedPointerListener(View.OnCapturedPointerListener l) Set a listener to receive callbacks when the pointer capture state of a view changes. void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked. void setOnContextClickListener(View.OnContextClickListener l) Register a callback to be invoked when this view is context clicked. void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built. void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View. void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed. void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view. void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view. void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view. void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held. void setOnScrollChangeListener(View.OnScrollChangeListener l) Register a callback to be invoked when the scroll X or Y positions of this view change. void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes. void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view. void setOutlineAmbientShadowColor(int color) Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. void setOutlineSpotShadowColor(int color) Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled. void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled. void setPointerIcon(PointerIcon pointerIcon) Set the pointer icon for the current view. void setPressed(boolean pressed) Sets the pressed state for this view. final void setRevealOnFocusHint(boolean revealOnFocus) Sets this view's preference for reveal behavior when it gains focus. final void setRight(int right) Sets the right position of this view relative to its parent. void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point. void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point. void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point. void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. void setScreenReaderFocusable(boolean screenReaderFocusable) When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit. void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade. void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration. void setScrollBarSize(int scrollBarSize) Define the scrollbar size. void setScrollBarStyle(int style) Specify the style of the scrollbars. void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window. void setScrollIndicators(int indicators, int mask) Sets the state of the scroll indicators specified by the mask. void setScrollIndicators(int indicators) Sets the state of all scroll indicators. void setScrollX(int value) Set the horizontal scrolled position of your view. void setScrollY(int value) Set the vertical scrolled position of your view. void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling. void setSelected(boolean selected) Changes the selection state of this view. void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching. void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View. void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed. void setTag(int key, Object tag) Sets a tag associated with this view and a key. void setTag(Object tag) Sets the tag associated with this view. void setTextAlignment(int textAlignment) Set the text alignment. void setTextDirection(int textDirection) Set the text direction. void setTooltipText(CharSequence tooltipText) Sets the tooltip text which will be displayed in a small popup next to the view. final void setTop(int top) Sets the top position of this view relative to its parent. void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View. final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions. void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position. void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position. void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation. void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically. void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not. void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar. void setVisibility(int visibility) Set the visibility state of this view. void setWillNotCacheDrawing(boolean willNotCacheDrawing) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations. void setX(float x) Sets the visual x position of this view, in pixels. void setY(float y) Sets the visual y position of this view, in pixels. void setZ(float z) Sets the visual z position of this view, in pixels. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. ActionMode startActionMode(ActionMode.Callback callback, int type) Start an action mode with the given type. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode with the default type ActionMode.TYPE_PRIMARY. void startAnimation(Animation animation) Start the specified animation now. final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions. final boolean startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation. boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes. void stopNestedScroll() Stop a nested scroll in progress. String toString() Returns a string representation of the object. void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable. void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable. final void updateDragShadow(View.DragShadowBuilder shadowBuilder) Updates the drag shadow for the ongoing drag and drop operation. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. boolean willNotCacheDrawing() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean willNotDraw() Returns whether or not this View draws on its own. From class java.lang.Object Object clone() Creates and returns a copy of this object. boolean equals(Object obj) Indicates whether some other object is "equal to" this one. void finalize() Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. final Class<?> getClass() Returns the runtime class of this Object. int hashCode() Returns a hash code value for the object. final void notify() Wakes up a single thread that is waiting on this object's monitor. final void notifyAll() Wakes up all threads that are waiting on this object's monitor. String toString() Returns a string representation of the object. final void wait(long millis, int nanos) Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed. final void wait(long millis) Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed. final void wait() Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. From interface android.view.ViewTreeObserver.OnPreDrawListener abstract boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. From interface android.graphics.drawable.Drawable.Callback abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn. abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation. abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred. From interface android.view.accessibility.AccessibilityEventSource abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type. abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent. Public constructors Button added in API level 1 public Button (Context context) Simple constructor to use when creating a button from code. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. See also: Button(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. The attributes defined by the current theme's android:buttonStyle override base view attributes. You typically do not call this constructor to create your own button instance in code. However, you must override this constructor when creating custom views. Parameters context Context: The Context the view is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag being used to inflate the view. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. The attributes defined by the current theme's defStyleAttr override base view attributes. For Button's base view attributes see Button Attributes, TextView Attributes, View Attributes. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int, int) View.View(Context, AttributeSet, int) Button added in API level 21 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. To see how the final value of a particular attribute is resolved based on your inputs to this constructor, see View.View(Context, AttributeSet, int, int). Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. defStyleRes int: The identifier of a style resource that supplies default values for the button, used only if defStyleAttr is 0 or cannot be found in the theme. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet, int, int) Public methods getAccessibilityClassName added in API level 23 public CharSequence getAccessibilityClassName () Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in AccessibilityNodeInfo.setClassName. Returns CharSequence onResolvePointerIcon added in API level 24 public PointerIcon onResolvePointerIcon (MotionEvent event, 
                int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews). Parameters event MotionEvent: The MotionEvent from a mouse pointerIndex int: The index of the pointer for which to retrieve the PointerIcon. This will be between 0 and MotionEvent.getPointerCount(). Returns PointerIcon Annotations RemoteViews.RemoteView Interfaces AbsListView.MultiChoiceModeListener AbsListView.OnScrollListener AbsListView.RecyclerListener AbsListView.SelectionBoundsAdjuster ActionMenuView.OnMenuItemClickListener Adapter AdapterView.OnItemClickListener AdapterView.OnItemLongClickListener AdapterView.OnItemSelectedListener Advanceable AutoCompleteTextView.OnDismissListener AutoCompleteTextView.Validator CalendarView.OnDateChangeListener Checkable Chronometer.OnChronometerTickListener CompoundButton.OnCheckedChangeListener DatePicker.OnDateChangedListener ExpandableListAdapter ExpandableListView.OnChildClickListener ExpandableListView.OnGroupClickListener ExpandableListView.OnGroupCollapseListener ExpandableListView.OnGroupExpandListener Filter.FilterListener Filterable FilterQueryProvider HeterogeneousExpandableList ListAdapter MediaController.MediaPlayerControl MultiAutoCompleteTextView.Tokenizer NumberPicker.Formatter NumberPicker.OnScrollListener NumberPicker.OnValueChangeListener PopupMenu.OnDismissListener PopupMenu.OnMenuItemClickListener PopupWindow.OnDismissListener RadioGroup.OnCheckedChangeListener RatingBar.OnRatingBarChangeListener RemoteViewsService.RemoteViewsFactory SearchView.OnCloseListener SearchView.OnQueryTextListener SearchView.OnSuggestionListener SectionIndexer SeekBar.OnSeekBarChangeListener ShareActionProvider.OnShareTargetSelectedListener SimpleAdapter.ViewBinder SimpleCursorAdapter.CursorToStringConverter SimpleCursorAdapter.ViewBinder SimpleCursorTreeAdapter.ViewBinder SlidingDrawer.OnDrawerCloseListener SlidingDrawer.OnDrawerOpenListener SlidingDrawer.OnDrawerScrollListener SpinnerAdapter TabHost.OnTabChangeListener TabHost.TabContentFactory TextView.OnEditorActionListener ThemedSpinnerAdapter TimePicker.OnTimeChangedListener Toolbar.OnMenuItemClickListener ViewSwitcher.ViewFactory WrapperListAdapter ZoomButtonsController.OnZoomListener Classes AbsListView AbsListView.LayoutParams AbsoluteLayout AbsoluteLayout.LayoutParams AbsSeekBar AbsSpinner ActionMenuView ActionMenuView.LayoutParams AdapterView AdapterView.AdapterContextMenuInfo AdapterViewAnimator AdapterViewFlipper AlphabetIndexer AnalogClock ArrayAdapter AutoCompleteTextView BaseAdapter BaseExpandableListAdapter Button CalendarView CheckBox CheckedTextView Chronometer CompoundButton CursorAdapter CursorTreeAdapter DatePicker DialerFilter DigitalClock EdgeEffect EditText ExpandableListView ExpandableListView.ExpandableListContextMenuInfo Filter Filter.FilterResults FrameLayout FrameLayout.LayoutParams Gallery Gallery.LayoutParams GridLayout GridLayout.Alignment GridLayout.LayoutParams GridLayout.Spec GridView HeaderViewListAdapter HorizontalScrollView ImageButton ImageSwitcher ImageView LinearLayout LinearLayout.LayoutParams ListPopupWindow ListView ListView.FixedViewInfo Magnifier MediaController MultiAutoCompleteTextView MultiAutoCompleteTextView.CommaTokenizer NumberPicker OverScroller PopupMenu PopupWindow ProgressBar QuickContactBadge RadioButton RadioGroup RadioGroup.LayoutParams RatingBar RelativeLayout RelativeLayout.LayoutParams RemoteViews RemoteViewsService ResourceCursorAdapter ResourceCursorTreeAdapter Scroller ScrollView SearchView SeekBar ShareActionProvider SimpleAdapter SimpleCursorAdapter SimpleCursorTreeAdapter SimpleExpandableListAdapter SlidingDrawer Space Spinner StackView Switch TabHost TabHost.TabSpec TableLayout TableLayout.LayoutParams TableRow TableRow.LayoutParams TabWidget TextClock TextSwitcher TextView TextView.SavedState TimePicker Toast ToggleButton Toolbar Toolbar.LayoutParams TwoLineListItem VideoView ViewAnimator ViewFlipper ViewSwitcher ZoomButton ZoomButtonsController ZoomControls Enums ImageView.ScaleType TextView.BufferType Exceptions RemoteViews.ActionException Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates. Last updated June 6, 2018. Twitter Follow @AndroidDev on Twitter Google+ Follow Android Developers on Google+ YouTube Check out Android Developers on YouTube More Android Android Enterprise Security Source Support Report platform bug Report documentation bug Google Play support Join user studies Documentation Developer guides Design guides API reference Samples Android Studio Android Chrome Firebase Google Cloud Platform All Products Bahasa Indonesia Deutsch English español Español (América Latina) français Português Brasileiro Tiếng Việt Türkçe Русский ภาษาไทย 日本語 简体中文 繁體中文 한국어 Privacy License Brand Guidelines Get Android and Google Play news by email SubscribeButton  |  Android Developers Android Developers Platform Android Studio Google Play Android Jetpack Docs Blog Documentation Overview Guides Reference Samples Design & Quality Platform Android Studio Google Play Android Jetpack Docs Overview Guides Reference Samples Design & Quality Blog Save the date! Android Dev Summit is coming to Mountain View, CA on November 7-8, 2018. Overview Android Platform Android Support Library AndroidX Architecture Components Android Automotive Library Databinding Library Constraint Layout Library Material Components Test Support Library Wearable Library Play Billing Library Play Core Library Play Install Referrer Library Android Things Kotlin API Reference (Preview) Android Platform AndroidX Android Developers Docs Reference added in API level 1 Summary: Inherited XML Attrs | Inherited Constants | Inherited Fields | Ctors | Methods | Inherited Methods Button public class Button extends TextView java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.Button Known direct subclasses CompoundButton CompoundButton A button with two states, checked and unchecked. Known indirect subclasses CheckBox, RadioButton, Switch, ToggleButton CheckBox A checkbox is a specific type of two-states button that can be either checked or unchecked. RadioButton A radio button is a two-states button that can be either checked or unchecked. Switch A Switch is a two-state toggle switch widget that can select between two options. ToggleButton Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". A user interface element the user can tap or click to perform an action. To display a button in an activity, add a button to the activity's layout XML file:  <Button
     android:id="@+id/button_id"
     android:layout_height="wrap_content"
     android:layout_width="wrap_content"
     android:text="@string/self_destruct" /> To specify an action when the button is pressed, set a click listener on the button object in the corresponding activity code:  public class MyActivity extends Activity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         setContentView(R.layout.content_layout_id);

         final Button button = findViewById(R.id.button_id);
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 // Code here executes on main thread after user presses button
             }
         });
     }
 } The above snippet creates an instance of View.OnClickListener and wires the listener to the button using setOnClickListener(View.OnClickListener). As a result, the system executes the code you write in onClick(View) after the user presses the button. The system executes the code in onClick on the main thread. This means your onClick code must execute quickly to avoid delaying your app's response to further user actions. See Keeping Your App Responsive for more details. Every button is styled using the system's default button background, which is often different from one version of the platform to another. If you are not satisfied with the default button style, you can customize it. For more details and code samples, see the Styling Your Button guide. For all XML style attributes available on Button see Button Attributes, TextView Attributes, View Attributes. See the Styles and Themes guide to learn how to implement and organize overrides to style-related attributes. Summary Inherited XML attributes From class android.widget.TextView android:autoLink Controls whether links such as urls and email addresses are automatically found and converted to clickable links. android:autoSizeMaxTextSize The maximum text size constraint to be used when auto-sizing text. android:autoSizeMinTextSize The minimum text size constraint to be used when auto-sizing text. android:autoSizePresetSizes Resource array of dimensions to be used in conjunction with autoSizeTextType set to uniform. android:autoSizeStepGranularity Specify the auto-size step size if autoSizeTextType is set to uniform. android:autoSizeTextType Specify the type of auto-size. android:autoText If set, specifies that this TextView has a textual input method and automatically corrects some common spelling errors. android:breakStrategy Break strategy (control over paragraph layout). android:bufferType Determines the minimum type that getText() will return. android:capitalize If set, specifies that this TextView has a textual input method and should automatically capitalize what the user types. android:cursorVisible Makes the cursor visible (the default) or invisible. android:digits If set, specifies that this TextView has a numeric input method and that these specific characters are the ones that it will accept. android:drawableBottom The drawable to be drawn below the text. android:drawableEnd The drawable to be drawn to the end of the text. android:drawableLeft The drawable to be drawn to the left of the text. android:drawablePadding The padding between the drawables and the text. android:drawableRight The drawable to be drawn to the right of the text. android:drawableStart The drawable to be drawn to the start of the text. android:drawableTint Tint to apply to the compound (left, top, etc.) drawables. android:drawableTintMode Blending mode used to apply the compound (left, top, etc.) drawables tint. android:drawableTop The drawable to be drawn above the text. android:editable If set, specifies that this TextView has an input method. android:editorExtras Reference to an <input-extras> XML resource containing additional data to supply to an input method, which is private to the implementation of the input method. android:elegantTextHeight Elegant text height, especially for less compacted complex script text. android:ellipsize If set, causes words that are longer than the view is wide to be ellipsized instead of broken in the middle. android:ems Makes the TextView be exactly this many ems wide. android:fallbackLineSpacing Whether to respect the ascent and descent of the fallback fonts that are used in displaying the text. android:firstBaselineToTopHeight Distance from the top of the TextView to the first text baseline. android:fontFamily Font family (named by string or as a font resource reference) for the text. android:fontFeatureSettings Font feature settings. android:freezesText If set, the text view will include its current complete text inside of its frozen icicle in addition to meta-data such as the current cursor position. android:gravity Specifies how to align the text by the view's x- and/or y-axis when the text is smaller than the view. android:height Makes the TextView be exactly this tall. android:hint Hint text to display when the text is empty. android:hyphenationFrequency Frequency of automatic hyphenation. android:imeActionId Supply a value for EditorInfo.actionId used when an input method is connected to the text view. android:imeActionLabel Supply a value for EditorInfo.actionLabel used when an input method is connected to the text view. android:imeOptions Additional features you can enable in an IME associated with an editor to improve the integration with your application. android:includeFontPadding Leave enough room for ascenders and descenders instead of using the font ascent and descent strictly. android:inputMethod If set, specifies that this TextView should use the specified input method (specified by fully-qualified class name). android:inputType The type of data being placed in a text field, used to help an input method decide how to let the user enter text. android:justificationMode Mode for justification. android:lastBaselineToBottomHeight Distance from the bottom of the TextView to the last text baseline. android:letterSpacing Text letter-spacing. android:lineHeight Explicit height between lines of text. android:lineSpacingExtra Extra spacing between lines of text. android:lineSpacingMultiplier Extra spacing between lines of text, as a multiplier. android:lines Makes the TextView be exactly this many lines tall. android:linksClickable If set to false, keeps the movement method from being set to the link movement method even if autoLink causes links to be found. android:marqueeRepeatLimit The number of times to repeat the marquee animation. android:maxEms Makes the TextView be at most this many ems wide. android:maxHeight Makes the TextView be at most this many pixels tall. android:maxLength Set an input filter to constrain the text length to the specified number. android:maxLines Makes the TextView be at most this many lines tall. android:maxWidth Makes the TextView be at most this many pixels wide. android:minEms Makes the TextView be at least this many ems wide. android:minHeight Makes the TextView be at least this many pixels tall. android:minLines Makes the TextView be at least this many lines tall. android:minWidth Makes the TextView be at least this many pixels wide. android:numeric If set, specifies that this TextView has a numeric input method. android:password Whether the characters of the field are displayed as password dots instead of themselves. android:phoneNumber If set, specifies that this TextView has a phone number input method. android:privateImeOptions An addition content type description to supply to the input method attached to the text view, which is private to the implementation of the input method. android:scrollHorizontally Whether the text is allowed to be wider than the view (and therefore can be scrolled horizontally). android:selectAllOnFocus If the text is selectable, select it all when the view takes focus. android:shadowColor Place a blurred shadow of text underneath the text, drawn with the specified color. android:shadowDx Horizontal offset of the text shadow. android:shadowDy Vertical offset of the text shadow. android:shadowRadius Blur radius of the text shadow. android:singleLine Constrains the text to a single horizontally scrolling line instead of letting it wrap onto multiple lines, and advances focus instead of inserting a newline when you press the enter key. android:text Text to display. android:textAllCaps Present the text in ALL CAPS. android:textAppearance Base text color, typeface, size, and style. android:textColor Text color. android:textColorHighlight Color of the text selection highlight. android:textColorHint Color of the hint text. android:textColorLink Text color for links. android:textIsSelectable Indicates that the content of a non-editable text can be selected. android:textScaleX Sets the horizontal scaling factor for the text. android:textSize Size of the text. android:textStyle Style (normal, bold, italic, bold|italic) for the text. android:typeface Typeface (normal, sans, serif, monospace) for the text. android:width Makes the TextView be exactly this wide. From class android.view.View android:accessibilityHeading Whether or not this view is a heading for accessibility purposes. android:accessibilityLiveRegion Indicates to accessibility services whether the user should be notified when this view changes. android:accessibilityTraversalAfter Sets the id of a view after which this one is visited in accessibility traversal. android:accessibilityTraversalBefore Sets the id of a view before which this one is visited in accessibility traversal. android:alpha alpha property of the view, as a value between 0 (completely transparent) and 1 (completely opaque). android:autofillHints Describes the content of a view so that a autofill service can fill in the appropriate data. android:autofilledHighlight Drawable to be drawn over the view to mark it as autofilled May be a reference to another resource, in the form "@[+][package:]type/name" or a theme attribute in the form "?[package:]type/name". android:background A drawable to use as the background. android:backgroundTint Tint to apply to the background. android:backgroundTintMode Blending mode used to apply the background tint. android:clickable Defines whether this view reacts to click events. android:contentDescription Defines text that briefly describes content of the view. android:contextClickable Defines whether this view reacts to context click events. android:defaultFocusHighlightEnabled Whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. android:drawingCacheQuality Defines the quality of translucent drawing caches. android:duplicateParentState When this attribute is set to true, the view gets its drawable state (focused, pressed, etc.) from its direct parent rather than from itself. android:elevation base z depth of the view. android:fadeScrollbars Defines whether to fade out scrollbars when they are not in use. android:fadingEdgeLength Defines the length of the fading edges. android:filterTouchesWhenObscured Specifies whether to filter touches when the view's window is obscured by another visible window. android:fitsSystemWindows Boolean internal attribute to adjust view layout based on system windows such as the status bar. android:focusable Controls whether a view can take focus. android:focusableInTouchMode Boolean that controls whether a view can take focus while in touch mode. android:focusedByDefault Whether this view is a default-focus view. android:forceHasOverlappingRendering Whether this view has elements that may overlap when drawn. android:foreground Defines the drawable to draw over the content. android:foregroundGravity Defines the gravity to apply to the foreground drawable. android:foregroundTint Tint to apply to the foreground. android:foregroundTintMode Blending mode used to apply the foreground tint. android:hapticFeedbackEnabled Boolean that controls whether a view should have haptic feedback enabled for events such as long presses. android:id Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById(). android:importantForAccessibility Describes whether or not this view is important for accessibility. android:importantForAutofill Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes. android:isScrollContainer Set this if the view will serve as a scrolling container, meaning that it can be resized to shrink its overall window so that there will be space for an input method. android:keepScreenOn Controls whether the view's window should keep the screen on while visible. android:keyboardNavigationCluster Whether this view is a root of a keyboard navigation cluster. android:layerType Specifies the type of layer backing this view. android:layoutDirection Defines the direction of layout drawing. android:longClickable Defines whether this view reacts to long click events. android:minHeight Defines the minimum height of the view. android:minWidth Defines the minimum width of the view. android:nextClusterForward Defines the next keyboard navigation cluster. android:nextFocusDown Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusForward Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusLeft Defines the next view to give focus to when the next focus is View.FOCUS_LEFT. android:nextFocusRight Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusUp Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:onClick Name of the method in this View's context to invoke when the view is clicked. android:outlineAmbientShadowColor Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. android:outlineSpotShadowColor Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. android:padding Sets the padding, in pixels, of all four edges. android:paddingBottom Sets the padding, in pixels, of the bottom edge; see R.attr.padding. android:paddingEnd Sets the padding, in pixels, of the end edge; see R.attr.padding. android:paddingHorizontal Sets the padding, in pixels, of the left and right edges; see R.attr.padding. android:paddingLeft Sets the padding, in pixels, of the left edge; see R.attr.padding. android:paddingRight Sets the padding, in pixels, of the right edge; see R.attr.padding. android:paddingStart Sets the padding, in pixels, of the start edge; see R.attr.padding. android:paddingTop Sets the padding, in pixels, of the top edge; see R.attr.padding. android:paddingVertical Sets the padding, in pixels, of the top and bottom edges; see R.attr.padding. android:requiresFadingEdge Defines which edges should be faded on scrolling. android:rotation rotation of the view, in degrees. android:rotationX rotation of the view around the x axis, in degrees. android:rotationY rotation of the view around the y axis, in degrees. android:saveEnabled If false, no state will be saved for this view when it is being frozen. android:scaleX scale of the view in the x direction. android:scaleY scale of the view in the y direction. android:scrollIndicators Defines which scroll indicators should be displayed when the view can be scrolled. android:scrollX The initial horizontal scroll offset, in pixels. android:scrollY The initial vertical scroll offset, in pixels. android:scrollbarAlwaysDrawHorizontalTrack Defines whether the horizontal scrollbar track should always be drawn. android:scrollbarAlwaysDrawVerticalTrack Defines whether the vertical scrollbar track should always be drawn. android:scrollbarDefaultDelayBeforeFade Defines the delay in milliseconds that a scrollbar waits before fade out. android:scrollbarFadeDuration Defines the delay in milliseconds that a scrollbar takes to fade out. android:scrollbarSize Sets the width of vertical scrollbars and height of horizontal scrollbars. android:scrollbarStyle Controls the scrollbar style and position. android:scrollbarThumbHorizontal Defines the horizontal scrollbar thumb drawable. android:scrollbarThumbVertical Defines the vertical scrollbar thumb drawable. android:scrollbarTrackHorizontal Defines the horizontal scrollbar track drawable. android:scrollbarTrackVertical Defines the vertical scrollbar track drawable. android:scrollbars Defines which scrollbars should be displayed on scrolling or not. android:soundEffectsEnabled Boolean that controls whether a view should have sound effects enabled for events such as clicking and touching. android:stateListAnimator Sets the state-based animator for the View. android:tag Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag(). android:textAlignment Defines the alignment of the text. android:textDirection Defines the direction of the text. android:theme Specifies a theme override for a view. android:tooltipText Defines text displayed in a small popup window on hover or long press. android:transformPivotX x location of the pivot point around which the view will rotate and scale. android:transformPivotY y location of the pivot point around which the view will rotate and scale. android:transitionName Names a View such that it can be identified for Transitions. android:translationX translation in x of the view. android:translationY translation in y of the view. android:translationZ translation in z of the view. android:visibility Controls the initial visibility of the view. Inherited constants From class android.widget.TextView int AUTO_SIZE_TEXT_TYPE_NONE The TextView does not auto-size text (default). int AUTO_SIZE_TEXT_TYPE_UNIFORM The TextView scales text size both horizontally and vertically to fit within the container. From class android.view.View int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view. int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view. int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view. int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE Hint indicating that this view can be autofilled with a credit card expiration date. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY Hint indicating that this view can be autofilled with a credit card expiration day. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH Hint indicating that this view can be autofilled with a credit card expiration month. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR Hint indicating that this view can be autofilled with a credit card expiration year. String AUTOFILL_HINT_CREDIT_CARD_NUMBER Hint indicating that this view can be autofilled with a credit card number. String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE Hint indicating that this view can be autofilled with a credit card security code. String AUTOFILL_HINT_EMAIL_ADDRESS Hint indicating that this view can be autofilled with an email address. String AUTOFILL_HINT_NAME Hint indicating that this view can be autofilled with a user's real name. String AUTOFILL_HINT_PASSWORD Hint indicating that this view can be autofilled with a password. String AUTOFILL_HINT_PHONE Hint indicating that this view can be autofilled with a phone number. String AUTOFILL_HINT_POSTAL_ADDRESS Hint indicating that this view can be autofilled with a postal address. String AUTOFILL_HINT_POSTAL_CODE Hint indicating that this view can be autofilled with a postal code. String AUTOFILL_HINT_USERNAME Hint indicating that this view can be autofilled with a username. int AUTOFILL_TYPE_DATE Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime(). int AUTOFILL_TYPE_LIST Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0). int AUTOFILL_TYPE_NONE Autofill type for views that cannot be autofilled. int AUTOFILL_TYPE_TEXT Autofill type for a text field, which is filled by a CharSequence. int AUTOFILL_TYPE_TOGGLE Autofill type for a togglable field, which is filled by a boolean. int DRAG_FLAG_GLOBAL Flag indicating that a drag can cross window boundaries. int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}. int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI. int DRAG_FLAG_GLOBAL_URI_READ When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_GLOBAL_URI_WRITE When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_OPAQUE Flag indicating that the drag shadow will be opaque. int DRAWING_CACHE_QUALITY_AUTO This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_HIGH This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_LOW This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description. int FIND_VIEWS_WITH_TEXT Find views that render the specified text. int FOCUSABLE This view wants keystrokes. int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode. int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode. int FOCUSABLE_AUTO This view determines focusability automatically. int FOCUS_BACKWARD Use with focusSearch(int). int FOCUS_DOWN Use with focusSearch(int). int FOCUS_FORWARD Use with focusSearch(int). int FOCUS_LEFT Use with focusSearch(int). int FOCUS_RIGHT Use with focusSearch(int). int FOCUS_UP Use with focusSearch(int). int GONE This view is invisible, and it doesn't take any space for layout purposes. int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses. int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views. int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility. int IMPORTANT_FOR_AUTOFILL_AUTO Automatically determine whether a view is important for autofill. int IMPORTANT_FOR_AUTOFILL_NO The view is not important for autofill, but its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS The view is not important for autofill, and its children (if any) will not be traversed. int IMPORTANT_FOR_AUTOFILL_YES The view is important for autofill, and its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS The view is important for autofill, but its children (if any) will not be traversed. int INVISIBLE This view is invisible, but it still takes up space for layout purposes. int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user. int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer. int LAYER_TYPE_NONE Indicates that the view does not have a layer. int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer. int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent. int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale. int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right. int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left. int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int). int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size. int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits. int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have. int NOT_FOCUSABLE This view does not want keystrokes. int NO_ID Used to mark a View that has no ID. int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll. int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. int OVER_SCROLL_NEVER Never allow a user to over-scroll this view. int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off. int SCREEN_STATE_ON Indicates that the screen has changed state and is now on. int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view. int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding. int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view. int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding. int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system. int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge. int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge. int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis. int SCROLL_AXIS_NONE Indicates no axis of view scrolling. int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis. int SCROLL_INDICATOR_BOTTOM Scroll indicator direction for the bottom edge of the view. int SCROLL_INDICATOR_END Scroll indicator direction for the ending edge of the view. int SCROLL_INDICATOR_LEFT Scroll indicator direction for the left edge of the view. int SCROLL_INDICATOR_RIGHT Scroll indicator direction for the right edge of the view. int SCROLL_INDICATOR_START Scroll indicator direction for the starting edge of the view. int SCROLL_INDICATOR_TOP Scroll indicator direction for the top edge of the view. int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching. int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead. int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead. int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden. int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds. int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode. int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default). int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI. int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g. int TEXT_ALIGNMENT_GRAVITY Default for the root view. int TEXT_ALIGNMENT_INHERIT Default text alignment. int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g. int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g. int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise. int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise. int TEXT_DIRECTION_ANY_RTL Text direction is using "any-RTL" algorithm. int TEXT_DIRECTION_FIRST_STRONG Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_LTR Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_RTL Text direction is using "first strong algorithm". int TEXT_DIRECTION_INHERIT Text direction is inherited through ViewGroup int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale. int TEXT_DIRECTION_LTR Text direction is forced to LTR. int TEXT_DIRECTION_RTL Text direction is forced to RTL. String VIEW_LOG_TAG The logging tag used by this class with android.util.Log. int VISIBLE This view is visible. Inherited fields From class android.view.View public static final Property<View, Float> ALPHA A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods. protected static final int[] EMPTY_STATE_SET Indicates the view has no states set. protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is enabled, focused and selected. protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused, selected and its window has the focus. protected static final int[] ENABLED_FOCUSED_STATE_SET Indicates the view is enabled and has the focus. protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused and its window has the focus. protected static final int[] ENABLED_SELECTED_STATE_SET Indicates the view is enabled and selected. protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, selected and its window has the focus. protected static final int[] ENABLED_STATE_SET Indicates the view is enabled. protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled and that its window has focus. protected static final int[] FOCUSED_SELECTED_STATE_SET Indicates the view is focused and selected. protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is focused, selected and its window has the focus. protected static final int[] FOCUSED_STATE_SET Indicates the view is focused. protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view has the focus and that its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, enabled, focused and selected. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET Indicates the view is pressed, enabled and focused. protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused and its window has the focus. protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET Indicates the view is pressed, enabled and selected. protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_STATE_SET Indicates the view is pressed and enabled. protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled and its window has the focus. protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, focused and selected. protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused, selected and its window has the focus. protected static final int[] PRESSED_FOCUSED_STATE_SET Indicates the view is pressed and focused. protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused and its window has the focus. protected static final int[] PRESSED_SELECTED_STATE_SET Indicates the view is pressed and selected. protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, selected and its window has the focus. protected static final int[] PRESSED_STATE_SET Indicates the view is pressed. protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed and its window has the focus. public static final Property<View, Float> ROTATION A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods. public static final Property<View, Float> ROTATION_X A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods. public static final Property<View, Float> ROTATION_Y A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods. public static final Property<View, Float> SCALE_X A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods. public static final Property<View, Float> SCALE_Y A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods. protected static final int[] SELECTED_STATE_SET Indicates the view is selected. protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is selected and that its window has the focus. public static final Property<View, Float> TRANSLATION_X A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods. public static final Property<View, Float> TRANSLATION_Y A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods. public static final Property<View, Float> TRANSLATION_Z A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods. protected static final int[] WINDOW_FOCUSED_STATE_SET Indicates the view's window has focus. public static final Property<View, Float> X A Property wrapper around the x functionality handled by the setX(float) and getX() methods. public static final Property<View, Float> Y A Property wrapper around the y functionality handled by the setY(float) and getY() methods. public static final Property<View, Float> Z A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods. Public constructors Button(Context context) Simple constructor to use when creating a button from code. Button(Context context, AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. Button(Context context, AttributeSet attrs, int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. Button(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. Public methods CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. Inherited methods From class android.widget.TextView void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addTextChangedListener(TextWatcher watcher) Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. final void append(CharSequence text) Convenience method to append the specified text to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void append(CharSequence text, int start, int end) Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void beginBatchEdit() boolean bringPointIntoView(int offset) Move the point, specified by the offset, into the view if it is needed. void cancelLongPress() Cancels a pending long press. void clearComposingText() Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG. boolean didTouchFocusSelect() Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. void endBatchEdit() boolean extractText(ExtractedTextRequest request, ExtractedText outText) If this TextView contains editable content, extract a portion of it based on the information in request in to outText. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. final int getAutoLinkMask() Gets the autolink mask of the text. int getAutoSizeMaxTextSize() int getAutoSizeMinTextSize() int getAutoSizeStepGranularity() int[] getAutoSizeTextAvailableSizes() int getAutoSizeTextType() Returns the type of auto-size set for this widget. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the TextView's current text for AutoFill. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. int getBreakStrategy() Gets the current strategy for breaking paragraphs into lines. int getCompoundDrawablePadding() Returns the padding between the compound drawables and the text. ColorStateList getCompoundDrawableTintList() PorterDuff.Mode getCompoundDrawableTintMode() Returns the blending mode used to apply the tint to the compound drawables, if specified. Drawable[] getCompoundDrawables() Returns drawables for the left, top, right, and bottom borders. Drawable[] getCompoundDrawablesRelative() Returns drawables for the start, top, end, and bottom borders. int getCompoundPaddingBottom() Returns the bottom padding of the view, plus space for the bottom Drawable if any. int getCompoundPaddingEnd() Returns the end padding of the view, plus space for the end Drawable if any. int getCompoundPaddingLeft() Returns the left padding of the view, plus space for the left Drawable if any. int getCompoundPaddingRight() Returns the right padding of the view, plus space for the right Drawable if any. int getCompoundPaddingStart() Returns the start padding of the view, plus space for the start Drawable if any. int getCompoundPaddingTop() Returns the top padding of the view, plus space for the top Drawable if any. final int getCurrentHintTextColor() Return the current color selected to paint the hint text. final int getCurrentTextColor() Return the current color selected for normal text. ActionMode.Callback getCustomInsertionActionModeCallback() Retrieves the value set in setCustomInsertionActionModeCallback(ActionMode.Callback). ActionMode.Callback getCustomSelectionActionModeCallback() Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback). boolean getDefaultEditable() Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options. MovementMethod getDefaultMovementMethod() Subclasses override this to specify a default movement method. Editable getEditableText() Return the text that TextView is displaying as an Editable object. TextUtils.TruncateAt getEllipsize() Returns where, if anywhere, words that are longer than the view is wide should be ellipsized. CharSequence getError() Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input. int getExtendedPaddingBottom() Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. int getExtendedPaddingTop() Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. InputFilter[] getFilters() Returns the current list of input filters. int getFirstBaselineToTopHeight() Returns the distance between the first text baseline and the top of this TextView. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. String getFontFeatureSettings() Returns the font feature settings. String getFontVariationSettings() Returns the font variation settings. boolean getFreezesText() Return whether this text view is including its entire text contents in frozen icicles. int getGravity() Returns the horizontal and vertical alignment of this TextView. int getHighlightColor() CharSequence getHint() Returns the hint that is displayed when the text of the TextView is empty. final ColorStateList getHintTextColors() int getHyphenationFrequency() Gets the current frequency of automatic hyphenation to be used when determining word breaks. int getImeActionId() Get the IME action ID previous set with setImeActionLabel(CharSequence, int). CharSequence getImeActionLabel() Get the IME action label previous set with setImeActionLabel(CharSequence, int). LocaleList getImeHintLocales() int getImeOptions() Get the type of the Input Method Editor (IME). boolean getIncludeFontPadding() Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. Bundle getInputExtras(boolean create) Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. int getInputType() Get the type of the editable content. int getJustificationMode() final KeyListener getKeyListener() Gets the current KeyListener for the TextView. int getLastBaselineToBottomHeight() Returns the distance between the last text baseline and the bottom of this TextView. final Layout getLayout() Gets the Layout that is currently being used to display the text. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. float getLetterSpacing() Gets the text letter-space value, which determines the spacing between characters. int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. int getLineCount() Return the number of lines of text, or 0 if the internal Layout has not been built. int getLineHeight() Gets the vertical distance between lines of text, in pixels. float getLineSpacingExtra() Gets the line spacing extra space float getLineSpacingMultiplier() Gets the line spacing multiplier final ColorStateList getLinkTextColors() final boolean getLinksClickable() Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). int getMarqueeRepeatLimit() Gets the number of times the marquee animation is repeated. int getMaxEms() Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth(int) or setWidth(int). int getMaxHeight() Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines(int) or setLines(int). int getMaxLines() Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight(int) or setHeight(int). int getMaxWidth() Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms(int) or setEms(int). int getMinEms() Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth(int) or setWidth(int). int getMinHeight() Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines(int) or setLines(int). int getMinLines() Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight(int) or setHeight(int). int getMinWidth() Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms(int) or setEms(int). final MovementMethod getMovementMethod() Gets the MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality. int getOffsetForPosition(float x, float y) Get the character offset closest to the specified absolute position. TextPaint getPaint() Gets the TextPaint used for the text. int getPaintFlags() Gets the flags on the Paint being used to display the text. String getPrivateImeOptions() Get the private type of the content. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. int getSelectionEnd() Convenience for Selection.getSelectionEnd(CharSequence). int getSelectionStart() Convenience for Selection.getSelectionStart(CharSequence). int getShadowColor() Gets the color of the shadow layer. float getShadowDx() float getShadowDy() Gets the vertical offset of the shadow layer. float getShadowRadius() Gets the radius of the shadow layer. final boolean getShowSoftInputOnFocus() Returns whether the soft input method will be made visible when this TextView gets focused. CharSequence getText() Return the text that TextView is displaying. TextClassifier getTextClassifier() Returns the TextClassifier used by this TextView. final ColorStateList getTextColors() Gets the text colors for the different states (normal, selected, focused) of the TextView. Locale getTextLocale() Get the default primary Locale of the text in this TextView. LocaleList getTextLocales() Get the default LocaleList of the text in this TextView. PrecomputedText.Params getTextMetricsParams() Gets the parameters for text layout precomputation, for use with PrecomputedText. float getTextScaleX() Gets the extent by which text should be stretched horizontally. float getTextSize() int getTopPaddingOffset() Amount by which to extend the top fading region. int getTotalPaddingBottom() Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. int getTotalPaddingEnd() Returns the total end padding of the view, including the end Drawable if any. int getTotalPaddingLeft() Returns the total left padding of the view, including the left Drawable if any. int getTotalPaddingRight() Returns the total right padding of the view, including the right Drawable if any. int getTotalPaddingStart() Returns the total start padding of the view, including the start Drawable if any. int getTotalPaddingTop() Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. final TransformationMethod getTransformationMethod() Gets the current TransformationMethod for the TextView. Typeface getTypeface() Gets the current Typeface that is used to style the text. URLSpan[] getUrls() Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasSelection() Return true iff there is a selection inside this text view. void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. boolean isAllCaps() Checks whether the transformation method applied to this TextView is set to ALL CAPS. boolean isCursorVisible() boolean isElegantTextHeight() Get the value of the TextView's elegant height metrics flag. boolean isFallbackLineSpacing() boolean isInputMethodTarget() Returns whether this text view is a current input method target. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isSuggestionsEnabled() Return whether or not suggestions are enabled on this TextView. boolean isTextSelectable() Returns the state of the textIsSelectable flag (See setTextIsSelectable()). void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. int length() Returns the length, in characters, of the text managed by this TextView boolean moveCursorToVisibleOffset() Move the cursor, if needed, so that it is at an offset that is visible to the user. void onAttachedToWindow() This is called when the view is attached to a window. void onBeginBatchEdit() Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit(). boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onCommitCompletion(CompletionInfo text) Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). void onCommitCorrection(CorrectionInfo info) Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling InputConnection.commitCorrection(). void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onEditorAction(int actionCode) Called when an attached input method calls InputConnection.performEditorAction() for this text view. void onEndBatchEdit() Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit(). void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. boolean onPrivateIMECommand(String action, Bundle data) Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand(). void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int horiz, int vert, int oldHoriz, int oldVert) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). void onSelectionChanged(int selStart, int selEnd) This method is called when the selection has changed, in case any subclasses would like to know. void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) This method is called when the text is changed, in case any subclasses would like to know. boolean onTextContextMenuItem(int id) Called when a context menu option for the text view is selected. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void removeTextChangedListener(TextWatcher watcher) Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAllCaps(boolean allCaps) Sets the properties of this field to transform input to ALL CAPS display. final void setAutoLinkMask(int mask) Sets the autolink mask of the text. void setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeWithDefaults(int autoSizeTextType) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration. void setBreakStrategy(int breakStrategy) Sets the break strategy for breaking paragraphs into lines. void setCompoundDrawablePadding(int pad) Sets the size of the padding between the compound drawables and the text. void setCompoundDrawableTintList(ColorStateList tint) Applies a tint to the compound drawables. void setCompoundDrawableTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList(ColorStateList) to the compound drawables. void setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesRelative(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(int start, int top, int end, int bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCursorVisible(boolean visible) Set whether the cursor is visible. void setCustomInsertionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View. void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. final void setEditableFactory(Editable.Factory factory) Sets the Factory used to create new Editables. void setElegantTextHeight(boolean elegant) Set the TextView's elegant height metrics flag. void setEllipsize(TextUtils.TruncateAt where) Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. void setEms(int ems) Sets the width of the TextView to be exactly ems wide. void setEnabled(boolean enabled) Set the enabled state of this view. void setError(CharSequence error) Sets the right-hand compound drawable of the TextView to the "error" icon and sets an error message that will be displayed in a popup when the TextView has focus. void setError(CharSequence error, Drawable icon) Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. void setExtractedText(ExtractedText text) Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText). void setFallbackLineSpacing(boolean enabled) Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). void setFilters(InputFilter[] filters) Sets the list of input filters that will be used if the buffer is Editable. void setFirstBaselineToTopHeight(int firstBaselineToTopHeight) Updates the top padding of the TextView so that firstBaselineToTopHeight is equal to the distance between the firt text baseline and the top of this TextView. void setFontFeatureSettings(String fontFeatureSettings) Sets font feature settings. boolean setFontVariationSettings(String fontVariationSettings) Sets TrueType or OpenType font variation settings. boolean setFrame(int l, int t, int r, int b) Assign a size and position to this view. void setFreezesText(boolean freezesText) Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. void setGravity(int gravity) Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. void setHeight(int pixels) Sets the height of the TextView to be exactly pixels tall. void setHighlightColor(int color) Sets the color used to display the selection highlight. final void setHint(CharSequence hint) Sets the text to be displayed when the text of the TextView is empty. final void setHint(int resid) Sets the text to be displayed when the text of the TextView is empty, from a resource. final void setHintTextColor(ColorStateList colors) Sets the color of the hint text. final void setHintTextColor(int color) Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. void setHorizontallyScrolling(boolean whether) Sets whether the text should be allowed to be wider than the View is. void setHyphenationFrequency(int hyphenationFrequency) Sets the frequency of automatic hyphenation to use when determining word breaks. void setImeActionLabel(CharSequence label, int actionId) Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo.actionLabel and EditorInfo.actionId when it has focus. void setImeHintLocales(LocaleList hintLocales) Change "hint" locales associated with the text view, which will be reported to an IME with EditorInfo.hintLocales when it has focus. void setImeOptions(int imeOptions) Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with EditorInfo.imeOptions when it has focus. void setIncludeFontPadding(boolean includepad) Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. void setInputExtras(int xmlResId) Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection. void setInputType(int type) Set the type of the content with a constant as defined for EditorInfo.inputType. void setJustificationMode(int justificationMode) Set justification mode. void setKeyListener(KeyListener input) Sets the key listener to be used with this TextView. void setLastBaselineToBottomHeight(int lastBaselineToBottomHeight) Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is equal to the distance between the last text baseline and the bottom of this TextView. void setLetterSpacing(float letterSpacing) Sets text letter-spacing in em units. void setLineHeight(int lineHeight) Sets an explicit line height for this TextView. void setLineSpacing(float add, float mult) Sets line spacing for this TextView. void setLines(int lines) Sets the height of the TextView to be exactly lines tall. final void setLinkTextColor(ColorStateList colors) Sets the color of links in the text. final void setLinkTextColor(int color) Sets the color of links in the text. final void setLinksClickable(boolean whether) Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). void setMarqueeRepeatLimit(int marqueeLimit) Sets how many times to repeat the marquee animation. void setMaxEms(int maxEms) Sets the width of the TextView to be at most maxEms wide. void setMaxHeight(int maxPixels) Sets the height of the TextView to be at most maxPixels tall. void setMaxLines(int maxLines) Sets the height of the TextView to be at most maxLines tall. void setMaxWidth(int maxPixels) Sets the width of the TextView to be at most maxPixels wide. void setMinEms(int minEms) Sets the width of the TextView to be at least minEms wide. void setMinHeight(int minPixels) Sets the height of the TextView to be at least minPixels tall. void setMinLines(int minLines) Sets the height of the TextView to be at least minLines tall. void setMinWidth(int minPixels) Sets the width of the TextView to be at least minPixels wide. final void setMovementMethod(MovementMethod movement) Sets the MovementMethod for handling arrow key movement for this TextView. void setOnEditorActionListener(TextView.OnEditorActionListener l) Set a special listener to be called when an action is performed on the text view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPaintFlags(int flags) Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. void setPrivateImeOptions(String type) Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection. void setRawInputType(int type) Directly change the content type integer of the text view, without modifying any other state. void setScroller(Scroller s) Sets the Scroller used for producing a scrolling animation void setSelectAllOnFocus(boolean selectAllOnFocus) Set the TextView so that when it takes focus, all the text is selected. void setSelected(boolean selected) Changes the selection state of this view. void setShadowLayer(float radius, float dx, float dy, int color) Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. final void setShowSoftInputOnFocus(boolean show) Sets whether the soft input method will be made visible when this TextView gets focused. void setSingleLine(boolean singleLine) If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. void setSingleLine() Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. final void setSpannableFactory(Spannable.Factory factory) Sets the Factory used to create new Spannables. final void setText(int resid) Sets the text to be displayed using a string resource identifier. final void setText(CharSequence text) Sets the text to be displayed. void setText(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType. final void setText(int resid, TextView.BufferType type) Sets the text to be displayed using a string resource identifier and the TextView.BufferType. final void setText(char[] text, int start, int len) Sets the TextView to display the specified slice of the specified char array. void setTextAppearance(Context context, int resId) This method was deprecated in API level 23. Use setTextAppearance(int) instead. void setTextAppearance(int resId) Sets the text appearance from the specified style resource. void setTextClassifier(TextClassifier textClassifier) Sets the TextClassifier for this TextView. void setTextColor(int color) Sets the text color for all the states (normal, selected, focused) to be this color. void setTextColor(ColorStateList colors) Sets the text color. void setTextIsSelectable(boolean selectable) Sets whether the content of this view is selectable by the user. final void setTextKeepState(CharSequence text) Sets the text to be displayed but retains the cursor position. final void setTextKeepState(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType but retains the cursor position. void setTextLocale(Locale locale) Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale. void setTextLocales(LocaleList locales) Set the default LocaleList of the text in this TextView to the given value. void setTextMetricsParams(PrecomputedText.Params params) Apply the text layout parameter. void setTextScaleX(float size) Sets the horizontal scale factor for text. void setTextSize(int unit, float size) Set the default text size to a given unit and value. void setTextSize(float size) Set the default text size to the given value, interpreted as "scaled pixel" units. final void setTransformationMethod(TransformationMethod method) Sets the transformation that is applied to the text that this TextView is displaying. void setTypeface(Typeface tf) Sets the typeface and style in which the text should be displayed. void setTypeface(Typeface tf, int style) Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. void setWidth(int pixels) Sets the width of the TextView to be exactly pixels wide. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. From class android.view.View void addChildrenForAccessibility(ArrayList<View> outChildren) Adds the children of this View relevant for accessibility to the given list as output. void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addKeyboardNavigationClusters(Collection<View> views, int direction) Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views. void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes. void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing. void addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Adds a listener which will receive unhandled KeyEvents. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. void announceForAccessibility(CharSequence text) Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void autofill(SparseArray<AutofillValue> values) Automatically fills the content of the virtual children within this view. boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw. boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw. boolean awakenScrollBars() Trigger the scrollbars to draw. void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views. void buildDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer. boolean callOnClick() Directly call any attached OnClickListener. boolean canResolveLayoutDirection() Check if layout direction resolution can be done. boolean canResolveTextAlignment() Check if text alignment resolution can be done. boolean canResolveTextDirection() Check if text direction resolution can be done. boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction. boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction. final void cancelDragAndDrop() Cancels an ongoing drag and drop operation. void cancelLongPress() Cancels a pending long press. final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue. boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. void clearAnimation() Cancels any animations for this view. void clearFocus() Called when this view wants to give up focus. static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState(). int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService. void createContextMenu(ContextMenu menu) Show the context menu for this view. void destroyDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. boolean dispatchCapturedPointerEvent(MotionEvent event) Pass a captured pointer event down to the focused view. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. void dispatchDrawableHotspotChanged(float x, float y) Dispatches drawableHotspotChanged to all of this View's children. void dispatchFinishTemporaryDetach() Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent. boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view. boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments) Report an accessibility action to this view's parents for delegated processing. boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it. boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress. void dispatchPointerCaptureChanged(boolean hasCapture) boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. void dispatchProvideAutofillStructure(ViewStructure structure, int flags) Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. void dispatchProvideStructure(ViewStructure structure) Dispatch creation of ViewStructure down the hierarchy. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchStartTemporaryDetach() Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View. void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. final <T extends View> T findViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy. final <T extends View> T findViewWithTag(Object tag) Look for a child view with the given tag. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets. View focusSearch(int direction) Find the nearest view in the specified direction that can take focus. void forceHasOverlappingRendering(boolean hasOverlappingRendering) Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior). void forceLayout() Forces this view to be laid out during the next layout pass. static int generateViewId() Generate a value suitable for use in setId(int). CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. int getAccessibilityLiveRegion() Gets the live region mode for this View. AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. CharSequence getAccessibilityPaneTitle() Get the title of the pane for purposes of accessibility. int getAccessibilityTraversalAfter() Gets the id of a view after which this one is visited in accessibility traversal. int getAccessibilityTraversalBefore() Gets the id of a view before which this one is visited in accessibility traversal. float getAlpha() The opacity of the view. Animation getAnimation() Get the animation currently associated with this view. IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to. String[] getAutofillHints() Gets the hints that help an AutofillService determine how to autofill the view with the user's data. final AutofillId getAutofillId() Gets the unique, logical identifier of this view in the activity, for autofill purposes. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the View's current autofill value. Drawable getBackground() Gets the background drawable ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified. PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. final int getBottom() Bottom position of this view relative to its parent. float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. float getCameraDistance() Gets the distance along the Z axis from the camera to this view. boolean getClipBounds(Rect outRect) Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null. Rect getClipBounds() Returns a copy of the current clipBounds. final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View. CharSequence getContentDescription() Returns the View's content description. final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc. ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu. final boolean getDefaultFocusHighlightEnabled() /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. static int getDefaultSize(int size, int measureSpec) Utility to return a default size. Display getDisplay() Gets the logical display to which the view's window has been attached. final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view. Bitmap getDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Bitmap getDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheBackgroundColor() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheQuality() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view. long getDrawingTime() Return the time at which the drawing of the view hierarchy started. float getElevation() The base elevation of this view relative to its parent, in pixels. boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window. boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean). int getFocusable() Returns the focusable setting for this view. ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. Drawable getForeground() Returns the drawable used as the foreground of this View. int getForegroundGravity() Describes how the foreground is positioned. ColorStateList getForegroundTintList() Return the tint applied to the foreground drawable, if specified. PorterDuff.Mode getForegroundTintMode() Return the blending mode used to apply the tint to the foreground drawable, if specified. final boolean getGlobalVisibleRect(Rect r) boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. Handler getHandler() final boolean getHasOverlappingRendering() Returns the value for overlapping rendering that is used internally. final int getHeight() Return the height of your view. void getHitRect(Rect outRect) Hit rectangle in parent's coordinates int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar. int getId() Returns this view's identifier. int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility. int getImportantForAutofill() Gets the mode for determining whether this view is important for autofill. boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window. int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes. int getLayerType() Indicates what type of layer is currently associated with this view. int getLayoutDirection() Returns the resolved layout direction for this view. ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view. final int getLeft() Left position of this view relative to its parent. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. final boolean getLocalVisibleRect(Rect r) void getLocationInWindow(int[] outLocation) Computes the coordinates of this view in its window. void getLocationOnScreen(int[] outLocation) Computes the coordinates of this view on the screen. Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int). final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int). int getMinimumHeight() Returns the minimum height of the view. int getMinimumWidth() Returns the minimum width of the view. int getNextClusterForwardId() Gets the id of the root of the next keyboard navigation cluster. int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN. int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD. int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT. int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT. int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP. View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view. int getOutlineAmbientShadowColor() ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. int getOutlineSpotShadowColor() int getOverScrollMode() Returns the over-scroll mode for this view. ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist. int getPaddingBottom() Returns the bottom padding of this view. int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction. int getPaddingLeft() Returns the left padding of this view. int getPaddingRight() Returns the right padding of this view. int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction. int getPaddingTop() Returns the top padding of this view. final ViewParent getParent() Gets the parent of this view. ViewParent getParentForAccessibility() Gets the parent for accessibility purposes. float getPivotX() The x location of the point around which the view is rotated and scaled. float getPivotY() The y location of the point around which the view is rotated and scaled. PointerIcon getPointerIcon() Gets the pointer icon for the current view. Resources getResources() Returns the resources associated with this view. final boolean getRevealOnFocusHint() Returns this view's preference for reveal behavior when it gains focus. final int getRight() Right position of this view relative to its parent. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. View getRootView() Finds the topmost view in the current view hierarchy. WindowInsets getRootWindowInsets() Provide original WindowInsets that are dispatched to the view hierarchy. float getRotation() The degrees that the view is rotated around the pivot point. float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point. float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point. float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade. int getScrollBarFadeDuration() Returns the scrollbar fade duration. int getScrollBarSize() Returns the scrollbar size. int getScrollBarStyle() Returns the current scrollbar style. int getScrollIndicators() Returns a bitmask representing the enabled scroll indicators. final int getScrollX() Return the scrolled left position of this view. final int getScrollY() Return the scrolled top position of this view. int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists. int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use. int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use. int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested. Object getTag() Returns this view's tag. Object getTag(int key) Returns the tag associated with this view and the specified key. int getTextAlignment() Return the resolved text alignment. int getTextDirection() Return the resolved text direction. CharSequence getTooltipText() Returns the view's tooltip text. final int getTop() Top position of this view relative to its parent. float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge. int getTopPaddingOffset() Amount by which to extend the top fading region. TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View. ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. String getTransitionName() Returns the name of the View to be used to identify Views in Transitions. float getTranslationX() The horizontal location of this view relative to its left position. float getTranslationY() The vertical location of this view relative to its top position. float getTranslationZ() The depth location of this view relative to its elevation. int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible. int getVerticalScrollbarPosition() int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar. ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy. int getVisibility() Returns the visibility status for this view. final int getWidth() Return the width of your view. int getWindowAttachCount() WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to. int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window. IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to. int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in. float getX() The visual x position of this view, in pixels. float getY() The visual y position of this view, in pixels. float getZ() The visual z position of this view, in pixels. boolean hasExplicitFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true. boolean hasFocus() Returns true if this view has focus itself, or is the ancestor of the view that has focus. boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent. boolean hasOnClickListeners() Return whether this view has an attached OnClickListener. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasPointerCapture() Checks pointer capture status. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus. static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource. void invalidate() Invalidate the whole view. void invalidate(Rect dirty) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidate(int l, int t, int r, int b) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. void invalidateOutline() Called to rebuild this View's Outline from its outline provider boolean isAccessibilityFocused() Returns whether this View is accessibility focused. boolean isAccessibilityHeading() Gets whether this view is a heading for accessibility purposes. boolean isActivated() Indicates the activation state of this view. boolean isAttachedToWindow() Returns true if this view is currently attached to a window. boolean isClickable() Indicates whether this view reacts to click events or not. boolean isContextClickable() Indicates whether this view reacts to context clicks or not. boolean isDirty() True if this view has changed since the last time being drawn. boolean isDrawingCacheEnabled() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent. boolean isEnabled() Returns the enabled status for this view. final boolean isFocusable() Returns whether this View is currently able to take focus. final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode. boolean isFocused() Returns true if this view has focus final boolean isFocusedByDefault() Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view. boolean isHapticFeedbackEnabled() boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not. boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally. boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not. boolean isHovered() Returns true if the view is currently hovered. boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility. final boolean isImportantForAutofill() Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes. boolean isInEditMode() Indicates whether this View is currently in edit mode. boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass. boolean isInTouchMode() Returns whether the device is currently in touch mode. final boolean isKeyboardNavigationCluster() Returns whether this View is a root of a keyboard navigation cluster. boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window. boolean isLayoutDirectionResolved() boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. boolean isLongClickable() Indicates whether this view reacts to long click events or not. boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view. boolean isOpaque() Indicates whether this View is opaque. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isPaddingRelative() Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through boolean isPivotSet() Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float). boolean isPressed() Indicates whether the view is currently in pressed state. boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. boolean isScreenReaderFocusable() Returns whether the view should be treated as a focusable unit by screen reader accessibility tools. boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window. boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling boolean isSelected() Indicates the selection state of this view. boolean isShown() Returns the visibility of this view and all of its ancestors boolean isSoundEffectsEnabled() final boolean isTemporarilyDetached() Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach(). boolean isTextAlignmentResolved() boolean isTextDirectionResolved() boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally. boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not. boolean isVisibleToUserForAutofill(int virtualId) Computes whether this virtual autofill view is visible to the user. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. View keyboardNavigationClusterSearch(View currentCluster, int direction) Find the nearest keyboard navigation cluster in the specified direction. void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be. static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int). void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels. void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy. void onAttachedToWindow() This is called when the view is attached to a window. void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. boolean onCapturedPointerEvent(MotionEvent event) Implement this method to handle captured pointer events boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. void onDetachedFromWindow() This is called when the view is detached from a window. void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onDrawForeground(Canvas canvas) Draw any foreground content for this view. final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar. boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies. void onFinishInflate() Finalize inflating a view from XML. void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view. void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. void onHoverChanged(boolean hovered) Implement this method to handle hover state changes. boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events. void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source. void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation. void onPointerCaptureChange(boolean hasCapture) Called when the window has just acquired or lost pointer capture. void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) Populates a ViewStructure containing virtual children to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. void onProvideVirtualStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityAggregated(boolean isVisible) Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE). boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries. boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view. boolean performClick() Call this view's OnClickListener, if it is defined. boolean performContextClick(float x, float y) Call this view's OnContextClickListener, if it is defined. boolean performContextClick() Call this view's OnContextClickListener, if it is defined. boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view. boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options. boolean performLongClick(float x, float y) Calls this view's OnLongClickListener, if it is defined. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void playSoundEffect(int soundConstant) Play a sound effect for this view. boolean post(Runnable action) Causes the Runnable to be added to the message queue. boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame. void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step. void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. void refreshDrawableState() Call this to force a view to update its drawable state. void releasePointerCapture() Releases the pointer capture. boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue. void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes. void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes. void removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Removes a listener which will receive unhandled KeyEvents. void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants. boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants. void requestLayout() Call this when something has changed which has invalidated the layout of this view. void requestPointerCapture() Requests pointer capture mode. boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View. final <T extends View> T requireViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy. void resetPivot() Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float). static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. boolean restoreDefaultFocus() Gives focus to the default-focus view in the view hierarchy that has this view as a root. void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container. void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container. void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition (as opposed to inheritance). void setAccessibilityHeading(boolean isHeading) Set if view is a heading for a section of content for accessibility purposes. void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view. void setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle) Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes. void setAccessibilityTraversalAfter(int afterId) Sets the id of a view after which this one is visited in accessibility traversal. void setAccessibilityTraversalBefore(int beforeId) Sets the id of a view before which this one is visited in accessibility traversal. void setActivated(boolean activated) Changes the activated state of this view. void setAlpha(float alpha) Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. void setAnimation(Animation animation) Sets the next animation to play for this view. void setAutofillHints(String... autofillHints) Sets the hints that help an AutofillService determine how to autofill the view with the user's data. void setAutofillId(AutofillId id) Sets the unique, logical identifier of this view in the activity, for autofill purposes. void setBackground(Drawable background) Set the background to a given Drawable, or remove the background. void setBackgroundColor(int color) Sets the background color for this view. void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead void setBackgroundResource(int resid) Set the background to a given resource. void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable. void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. final void setBottom(int bottom) Sets the bottom position of this view relative to its parent. void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. void setClickable(boolean clickable) Enables or disables click events for this view. void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View. void setContentDescription(CharSequence contentDescription) Sets the View's content description. void setContextClickable(boolean contextClickable) Enables or disables context clicking for this view. void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled) Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. void setDrawingCacheBackgroundColor(int color) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheEnabled(boolean enabled) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheQuality(int quality) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view. void setElevation(float elevation) Sets the base elevation of this view, in pixels. void setEnabled(boolean enabled) Set the enabled state of this view. void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available. void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window. void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. void setFocusable(boolean focusable) Set whether this view can receive the focus. void setFocusable(int focusable) Sets whether this view can receive focus. void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode. void setFocusedByDefault(boolean isFocusedByDefault) Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view. void setForeground(Drawable foreground) Supply a Drawable that is to be rendered on top of all of the content in the view. void setForegroundGravity(int gravity) Describes how the foreground is positioned. void setForegroundTintList(ColorStateList tint) Applies a tint to the foreground drawable. void setForegroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable. void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses. void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally. void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not. void setHovered(boolean hovered) Sets whether the view is currently hovered. void setId(int id) Sets the identifier for this view. void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. void setImportantForAutofill(int mode) Sets the mode for determining whether this view is considered important for autofill. void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. void setKeyboardNavigationCluster(boolean isCluster) Set whether this view is a root of a keyboard navigation cluster. void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes. void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view. void setLayoutDirection(int layoutDirection) Set the layout direction for this view. void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view. final void setLeft(int left) Sets the left position of this view relative to its parent. void setLongClickable(boolean longClickable) Enables or disables long click events for this view. final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height. void setMinimumHeight(int minHeight) Sets the minimum height of the view. void setMinimumWidth(int minWidth) Sets the minimum width of the view. void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view. void setNextClusterForwardId(int nextClusterForwardId) Sets the id of the view to use as the root of the next keyboard navigation cluster. void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN. void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD. void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT. void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT. void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP. void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. void setOnCapturedPointerListener(View.OnCapturedPointerListener l) Set a listener to receive callbacks when the pointer capture state of a view changes. void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked. void setOnContextClickListener(View.OnContextClickListener l) Register a callback to be invoked when this view is context clicked. void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built. void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View. void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed. void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view. void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view. void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view. void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held. void setOnScrollChangeListener(View.OnScrollChangeListener l) Register a callback to be invoked when the scroll X or Y positions of this view change. void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes. void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view. void setOutlineAmbientShadowColor(int color) Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. void setOutlineSpotShadowColor(int color) Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled. void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled. void setPointerIcon(PointerIcon pointerIcon) Set the pointer icon for the current view. void setPressed(boolean pressed) Sets the pressed state for this view. final void setRevealOnFocusHint(boolean revealOnFocus) Sets this view's preference for reveal behavior when it gains focus. final void setRight(int right) Sets the right position of this view relative to its parent. void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point. void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point. void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point. void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. void setScreenReaderFocusable(boolean screenReaderFocusable) When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit. void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade. void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration. void setScrollBarSize(int scrollBarSize) Define the scrollbar size. void setScrollBarStyle(int style) Specify the style of the scrollbars. void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window. void setScrollIndicators(int indicators, int mask) Sets the state of the scroll indicators specified by the mask. void setScrollIndicators(int indicators) Sets the state of all scroll indicators. void setScrollX(int value) Set the horizontal scrolled position of your view. void setScrollY(int value) Set the vertical scrolled position of your view. void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling. void setSelected(boolean selected) Changes the selection state of this view. void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching. void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View. void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed. void setTag(int key, Object tag) Sets a tag associated with this view and a key. void setTag(Object tag) Sets the tag associated with this view. void setTextAlignment(int textAlignment) Set the text alignment. void setTextDirection(int textDirection) Set the text direction. void setTooltipText(CharSequence tooltipText) Sets the tooltip text which will be displayed in a small popup next to the view. final void setTop(int top) Sets the top position of this view relative to its parent. void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View. final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions. void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position. void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position. void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation. void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically. void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not. void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar. void setVisibility(int visibility) Set the visibility state of this view. void setWillNotCacheDrawing(boolean willNotCacheDrawing) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations. void setX(float x) Sets the visual x position of this view, in pixels. void setY(float y) Sets the visual y position of this view, in pixels. void setZ(float z) Sets the visual z position of this view, in pixels. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. ActionMode startActionMode(ActionMode.Callback callback, int type) Start an action mode with the given type. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode with the default type ActionMode.TYPE_PRIMARY. void startAnimation(Animation animation) Start the specified animation now. final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions. final boolean startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation. boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes. void stopNestedScroll() Stop a nested scroll in progress. String toString() Returns a string representation of the object. void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable. void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable. final void updateDragShadow(View.DragShadowBuilder shadowBuilder) Updates the drag shadow for the ongoing drag and drop operation. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. boolean willNotCacheDrawing() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean willNotDraw() Returns whether or not this View draws on its own. From class java.lang.Object Object clone() Creates and returns a copy of this object. boolean equals(Object obj) Indicates whether some other object is "equal to" this one. void finalize() Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. final Class<?> getClass() Returns the runtime class of this Object. int hashCode() Returns a hash code value for the object. final void notify() Wakes up a single thread that is waiting on this object's monitor. final void notifyAll() Wakes up all threads that are waiting on this object's monitor. String toString() Returns a string representation of the object. final void wait(long millis, int nanos) Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed. final void wait(long millis) Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed. final void wait() Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. From interface android.view.ViewTreeObserver.OnPreDrawListener abstract boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. From interface android.graphics.drawable.Drawable.Callback abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn. abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation. abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred. From interface android.view.accessibility.AccessibilityEventSource abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type. abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent. Public constructors Button added in API level 1 public Button (Context context) Simple constructor to use when creating a button from code. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. See also: Button(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. The attributes defined by the current theme's android:buttonStyle override base view attributes. You typically do not call this constructor to create your own button instance in code. However, you must override this constructor when creating custom views. Parameters context Context: The Context the view is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag being used to inflate the view. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. The attributes defined by the current theme's defStyleAttr override base view attributes. For Button's base view attributes see Button Attributes, TextView Attributes, View Attributes. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int, int) View.View(Context, AttributeSet, int) Button added in API level 21 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. To see how the final value of a particular attribute is resolved based on your inputs to this constructor, see View.View(Context, AttributeSet, int, int). Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. defStyleRes int: The identifier of a style resource that supplies default values for the button, used only if defStyleAttr is 0 or cannot be found in the theme. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet, int, int) Public methods getAccessibilityClassName added in API level 23 public CharSequence getAccessibilityClassName () Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in AccessibilityNodeInfo.setClassName. Returns CharSequence onResolvePointerIcon added in API level 24 public PointerIcon onResolvePointerIcon (MotionEvent event, 
                int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews). Parameters event MotionEvent: The MotionEvent from a mouse pointerIndex int: The index of the pointer for which to retrieve the PointerIcon. This will be between 0 and MotionEvent.getPointerCount(). Returns PointerIcon Annotations RemoteViews.RemoteView Interfaces AbsListView.MultiChoiceModeListener AbsListView.OnScrollListener AbsListView.RecyclerListener AbsListView.SelectionBoundsAdjuster ActionMenuView.OnMenuItemClickListener Adapter AdapterView.OnItemClickListener AdapterView.OnItemLongClickListener AdapterView.OnItemSelectedListener Advanceable AutoCompleteTextView.OnDismissListener AutoCompleteTextView.Validator CalendarView.OnDateChangeListener Checkable Chronometer.OnChronometerTickListener CompoundButton.OnCheckedChangeListener DatePicker.OnDateChangedListener ExpandableListAdapter ExpandableListView.OnChildClickListener ExpandableListView.OnGroupClickListener ExpandableListView.OnGroupCollapseListener ExpandableListView.OnGroupExpandListener Filter.FilterListener Filterable FilterQueryProvider HeterogeneousExpandableList ListAdapter MediaController.MediaPlayerControl MultiAutoCompleteTextView.Tokenizer NumberPicker.Formatter NumberPicker.OnScrollListener NumberPicker.OnValueChangeListener PopupMenu.OnDismissListener PopupMenu.OnMenuItemClickListener PopupWindow.OnDismissListener RadioGroup.OnCheckedChangeListener RatingBar.OnRatingBarChangeListener RemoteViewsService.RemoteViewsFactory SearchView.OnCloseListener SearchView.OnQueryTextListener SearchView.OnSuggestionListener SectionIndexer SeekBar.OnSeekBarChangeListener ShareActionProvider.OnShareTargetSelectedListener SimpleAdapter.ViewBinder SimpleCursorAdapter.CursorToStringConverter SimpleCursorAdapter.ViewBinder SimpleCursorTreeAdapter.ViewBinder SlidingDrawer.OnDrawerCloseListener SlidingDrawer.OnDrawerOpenListener SlidingDrawer.OnDrawerScrollListener SpinnerAdapter TabHost.OnTabChangeListener TabHost.TabContentFactory TextView.OnEditorActionListener ThemedSpinnerAdapter TimePicker.OnTimeChangedListener Toolbar.OnMenuItemClickListener ViewSwitcher.ViewFactory WrapperListAdapter ZoomButtonsController.OnZoomListener Classes AbsListView AbsListView.LayoutParams AbsoluteLayout AbsoluteLayout.LayoutParams AbsSeekBar AbsSpinner ActionMenuView ActionMenuView.LayoutParams AdapterView AdapterView.AdapterContextMenuInfo AdapterViewAnimator AdapterViewFlipper AlphabetIndexer AnalogClock ArrayAdapter AutoCompleteTextView BaseAdapter BaseExpandableListAdapter Button CalendarView CheckBox CheckedTextView Chronometer CompoundButton CursorAdapter CursorTreeAdapter DatePicker DialerFilter DigitalClock EdgeEffect EditText ExpandableListView ExpandableListView.ExpandableListContextMenuInfo Filter Filter.FilterResults FrameLayout FrameLayout.LayoutParams Gallery Gallery.LayoutParams GridLayout GridLayout.Alignment GridLayout.LayoutParams GridLayout.Spec GridView HeaderViewListAdapter HorizontalScrollView ImageButton ImageSwitcher ImageView LinearLayout LinearLayout.LayoutParams ListPopupWindow ListView ListView.FixedViewInfo Magnifier MediaController MultiAutoCompleteTextView MultiAutoCompleteTextView.CommaTokenizer NumberPicker OverScroller PopupMenu PopupWindow ProgressBar QuickContactBadge RadioButton RadioGroup RadioGroup.LayoutParams RatingBar RelativeLayout RelativeLayout.LayoutParams RemoteViews RemoteViewsService ResourceCursorAdapter ResourceCursorTreeAdapter Scroller ScrollView SearchView SeekBar ShareActionProvider SimpleAdapter SimpleCursorAdapter SimpleCursorTreeAdapter SimpleExpandableListAdapter SlidingDrawer Space Spinner StackView Switch TabHost TabHost.TabSpec TableLayout TableLayout.LayoutParams TableRow TableRow.LayoutParams TabWidget TextClock TextSwitcher TextView TextView.SavedState TimePicker Toast ToggleButton Toolbar Toolbar.LayoutParams TwoLineListItem VideoView ViewAnimator ViewFlipper ViewSwitcher ZoomButton ZoomButtonsController ZoomControls Enums ImageView.ScaleType TextView.BufferType Exceptions RemoteViews.ActionException Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates. Last updated June 6, 2018. Twitter Follow @AndroidDev on Twitter Google+ Follow Android Developers on Google+ YouTube Check out Android Developers on YouTube More Android Android Enterprise Security Source Support Report platform bug Report documentation bug Google Play support Join user studies Documentation Developer guides Design guides API reference Samples Android Studio Android Chrome Firebase Google Cloud Platform All Products Bahasa Indonesia Deutsch English español Español (América Latina) français Português Brasileiro Tiếng Việt Türkçe Русский ภาษาไทย 日本語 简体中文 繁體中文 한국어 Privacy License Brand Guidelines Get Android and Google Play news by email SubscribeButton  |  Android Developers Android Developers Platform Android Studio Google Play Android Jetpack Docs Blog Documentation Overview Guides Reference Samples Design & Quality Platform Android Studio Google Play Android Jetpack Docs Overview Guides Reference Samples Design & Quality Blog Save the date! Android Dev Summit is coming to Mountain View, CA on November 7-8, 2018. Overview Android Platform Android Support Library AndroidX Architecture Components Android Automotive Library Databinding Library Constraint Layout Library Material Components Test Support Library Wearable Library Play Billing Library Play Core Library Play Install Referrer Library Android Things Kotlin API Reference (Preview) Android Platform AndroidX Android Developers Docs Reference added in API level 1 Summary: Inherited XML Attrs | Inherited Constants | Inherited Fields | Ctors | Methods | Inherited Methods Button public class Button extends TextView java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.Button Known direct subclasses CompoundButton CompoundButton A button with two states, checked and unchecked. Known indirect subclasses CheckBox, RadioButton, Switch, ToggleButton CheckBox A checkbox is a specific type of two-states button that can be either checked or unchecked. RadioButton A radio button is a two-states button that can be either checked or unchecked. Switch A Switch is a two-state toggle switch widget that can select between two options. ToggleButton Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". A user interface element the user can tap or click to perform an action. To display a button in an activity, add a button to the activity's layout XML file:  <Button
     android:id="@+id/button_id"
     android:layout_height="wrap_content"
     android:layout_width="wrap_content"
     android:text="@string/self_destruct" /> To specify an action when the button is pressed, set a click listener on the button object in the corresponding activity code:  public class MyActivity extends Activity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         setContentView(R.layout.content_layout_id);

         final Button button = findViewById(R.id.button_id);
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 // Code here executes on main thread after user presses button
             }
         });
     }
 } The above snippet creates an instance of View.OnClickListener and wires the listener to the button using setOnClickListener(View.OnClickListener). As a result, the system executes the code you write in onClick(View) after the user presses the button. The system executes the code in onClick on the main thread. This means your onClick code must execute quickly to avoid delaying your app's response to further user actions. See Keeping Your App Responsive for more details. Every button is styled using the system's default button background, which is often different from one version of the platform to another. If you are not satisfied with the default button style, you can customize it. For more details and code samples, see the Styling Your Button guide. For all XML style attributes available on Button see Button Attributes, TextView Attributes, View Attributes. See the Styles and Themes guide to learn how to implement and organize overrides to style-related attributes. Summary Inherited XML attributes From class android.widget.TextView android:autoLink Controls whether links such as urls and email addresses are automatically found and converted to clickable links. android:autoSizeMaxTextSize The maximum text size constraint to be used when auto-sizing text. android:autoSizeMinTextSize The minimum text size constraint to be used when auto-sizing text. android:autoSizePresetSizes Resource array of dimensions to be used in conjunction with autoSizeTextType set to uniform. android:autoSizeStepGranularity Specify the auto-size step size if autoSizeTextType is set to uniform. android:autoSizeTextType Specify the type of auto-size. android:autoText If set, specifies that this TextView has a textual input method and automatically corrects some common spelling errors. android:breakStrategy Break strategy (control over paragraph layout). android:bufferType Determines the minimum type that getText() will return. android:capitalize If set, specifies that this TextView has a textual input method and should automatically capitalize what the user types. android:cursorVisible Makes the cursor visible (the default) or invisible. android:digits If set, specifies that this TextView has a numeric input method and that these specific characters are the ones that it will accept. android:drawableBottom The drawable to be drawn below the text. android:drawableEnd The drawable to be drawn to the end of the text. android:drawableLeft The drawable to be drawn to the left of the text. android:drawablePadding The padding between the drawables and the text. android:drawableRight The drawable to be drawn to the right of the text. android:drawableStart The drawable to be drawn to the start of the text. android:drawableTint Tint to apply to the compound (left, top, etc.) drawables. android:drawableTintMode Blending mode used to apply the compound (left, top, etc.) drawables tint. android:drawableTop The drawable to be drawn above the text. android:editable If set, specifies that this TextView has an input method. android:editorExtras Reference to an <input-extras> XML resource containing additional data to supply to an input method, which is private to the implementation of the input method. android:elegantTextHeight Elegant text height, especially for less compacted complex script text. android:ellipsize If set, causes words that are longer than the view is wide to be ellipsized instead of broken in the middle. android:ems Makes the TextView be exactly this many ems wide. android:fallbackLineSpacing Whether to respect the ascent and descent of the fallback fonts that are used in displaying the text. android:firstBaselineToTopHeight Distance from the top of the TextView to the first text baseline. android:fontFamily Font family (named by string or as a font resource reference) for the text. android:fontFeatureSettings Font feature settings. android:freezesText If set, the text view will include its current complete text inside of its frozen icicle in addition to meta-data such as the current cursor position. android:gravity Specifies how to align the text by the view's x- and/or y-axis when the text is smaller than the view. android:height Makes the TextView be exactly this tall. android:hint Hint text to display when the text is empty. android:hyphenationFrequency Frequency of automatic hyphenation. android:imeActionId Supply a value for EditorInfo.actionId used when an input method is connected to the text view. android:imeActionLabel Supply a value for EditorInfo.actionLabel used when an input method is connected to the text view. android:imeOptions Additional features you can enable in an IME associated with an editor to improve the integration with your application. android:includeFontPadding Leave enough room for ascenders and descenders instead of using the font ascent and descent strictly. android:inputMethod If set, specifies that this TextView should use the specified input method (specified by fully-qualified class name). android:inputType The type of data being placed in a text field, used to help an input method decide how to let the user enter text. android:justificationMode Mode for justification. android:lastBaselineToBottomHeight Distance from the bottom of the TextView to the last text baseline. android:letterSpacing Text letter-spacing. android:lineHeight Explicit height between lines of text. android:lineSpacingExtra Extra spacing between lines of text. android:lineSpacingMultiplier Extra spacing between lines of text, as a multiplier. android:lines Makes the TextView be exactly this many lines tall. android:linksClickable If set to false, keeps the movement method from being set to the link movement method even if autoLink causes links to be found. android:marqueeRepeatLimit The number of times to repeat the marquee animation. android:maxEms Makes the TextView be at most this many ems wide. android:maxHeight Makes the TextView be at most this many pixels tall. android:maxLength Set an input filter to constrain the text length to the specified number. android:maxLines Makes the TextView be at most this many lines tall. android:maxWidth Makes the TextView be at most this many pixels wide. android:minEms Makes the TextView be at least this many ems wide. android:minHeight Makes the TextView be at least this many pixels tall. android:minLines Makes the TextView be at least this many lines tall. android:minWidth Makes the TextView be at least this many pixels wide. android:numeric If set, specifies that this TextView has a numeric input method. android:password Whether the characters of the field are displayed as password dots instead of themselves. android:phoneNumber If set, specifies that this TextView has a phone number input method. android:privateImeOptions An addition content type description to supply to the input method attached to the text view, which is private to the implementation of the input method. android:scrollHorizontally Whether the text is allowed to be wider than the view (and therefore can be scrolled horizontally). android:selectAllOnFocus If the text is selectable, select it all when the view takes focus. android:shadowColor Place a blurred shadow of text underneath the text, drawn with the specified color. android:shadowDx Horizontal offset of the text shadow. android:shadowDy Vertical offset of the text shadow. android:shadowRadius Blur radius of the text shadow. android:singleLine Constrains the text to a single horizontally scrolling line instead of letting it wrap onto multiple lines, and advances focus instead of inserting a newline when you press the enter key. android:text Text to display. android:textAllCaps Present the text in ALL CAPS. android:textAppearance Base text color, typeface, size, and style. android:textColor Text color. android:textColorHighlight Color of the text selection highlight. android:textColorHint Color of the hint text. android:textColorLink Text color for links. android:textIsSelectable Indicates that the content of a non-editable text can be selected. android:textScaleX Sets the horizontal scaling factor for the text. android:textSize Size of the text. android:textStyle Style (normal, bold, italic, bold|italic) for the text. android:typeface Typeface (normal, sans, serif, monospace) for the text. android:width Makes the TextView be exactly this wide. From class android.view.View android:accessibilityHeading Whether or not this view is a heading for accessibility purposes. android:accessibilityLiveRegion Indicates to accessibility services whether the user should be notified when this view changes. android:accessibilityTraversalAfter Sets the id of a view after which this one is visited in accessibility traversal. android:accessibilityTraversalBefore Sets the id of a view before which this one is visited in accessibility traversal. android:alpha alpha property of the view, as a value between 0 (completely transparent) and 1 (completely opaque). android:autofillHints Describes the content of a view so that a autofill service can fill in the appropriate data. android:autofilledHighlight Drawable to be drawn over the view to mark it as autofilled May be a reference to another resource, in the form "@[+][package:]type/name" or a theme attribute in the form "?[package:]type/name". android:background A drawable to use as the background. android:backgroundTint Tint to apply to the background. android:backgroundTintMode Blending mode used to apply the background tint. android:clickable Defines whether this view reacts to click events. android:contentDescription Defines text that briefly describes content of the view. android:contextClickable Defines whether this view reacts to context click events. android:defaultFocusHighlightEnabled Whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. android:drawingCacheQuality Defines the quality of translucent drawing caches. android:duplicateParentState When this attribute is set to true, the view gets its drawable state (focused, pressed, etc.) from its direct parent rather than from itself. android:elevation base z depth of the view. android:fadeScrollbars Defines whether to fade out scrollbars when they are not in use. android:fadingEdgeLength Defines the length of the fading edges. android:filterTouchesWhenObscured Specifies whether to filter touches when the view's window is obscured by another visible window. android:fitsSystemWindows Boolean internal attribute to adjust view layout based on system windows such as the status bar. android:focusable Controls whether a view can take focus. android:focusableInTouchMode Boolean that controls whether a view can take focus while in touch mode. android:focusedByDefault Whether this view is a default-focus view. android:forceHasOverlappingRendering Whether this view has elements that may overlap when drawn. android:foreground Defines the drawable to draw over the content. android:foregroundGravity Defines the gravity to apply to the foreground drawable. android:foregroundTint Tint to apply to the foreground. android:foregroundTintMode Blending mode used to apply the foreground tint. android:hapticFeedbackEnabled Boolean that controls whether a view should have haptic feedback enabled for events such as long presses. android:id Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById(). android:importantForAccessibility Describes whether or not this view is important for accessibility. android:importantForAutofill Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes. android:isScrollContainer Set this if the view will serve as a scrolling container, meaning that it can be resized to shrink its overall window so that there will be space for an input method. android:keepScreenOn Controls whether the view's window should keep the screen on while visible. android:keyboardNavigationCluster Whether this view is a root of a keyboard navigation cluster. android:layerType Specifies the type of layer backing this view. android:layoutDirection Defines the direction of layout drawing. android:longClickable Defines whether this view reacts to long click events. android:minHeight Defines the minimum height of the view. android:minWidth Defines the minimum width of the view. android:nextClusterForward Defines the next keyboard navigation cluster. android:nextFocusDown Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusForward Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusLeft Defines the next view to give focus to when the next focus is View.FOCUS_LEFT. android:nextFocusRight Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusUp Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:onClick Name of the method in this View's context to invoke when the view is clicked. android:outlineAmbientShadowColor Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. android:outlineSpotShadowColor Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. android:padding Sets the padding, in pixels, of all four edges. android:paddingBottom Sets the padding, in pixels, of the bottom edge; see R.attr.padding. android:paddingEnd Sets the padding, in pixels, of the end edge; see R.attr.padding. android:paddingHorizontal Sets the padding, in pixels, of the left and right edges; see R.attr.padding. android:paddingLeft Sets the padding, in pixels, of the left edge; see R.attr.padding. android:paddingRight Sets the padding, in pixels, of the right edge; see R.attr.padding. android:paddingStart Sets the padding, in pixels, of the start edge; see R.attr.padding. android:paddingTop Sets the padding, in pixels, of the top edge; see R.attr.padding. android:paddingVertical Sets the padding, in pixels, of the top and bottom edges; see R.attr.padding. android:requiresFadingEdge Defines which edges should be faded on scrolling. android:rotation rotation of the view, in degrees. android:rotationX rotation of the view around the x axis, in degrees. android:rotationY rotation of the view around the y axis, in degrees. android:saveEnabled If false, no state will be saved for this view when it is being frozen. android:scaleX scale of the view in the x direction. android:scaleY scale of the view in the y direction. android:scrollIndicators Defines which scroll indicators should be displayed when the view can be scrolled. android:scrollX The initial horizontal scroll offset, in pixels. android:scrollY The initial vertical scroll offset, in pixels. android:scrollbarAlwaysDrawHorizontalTrack Defines whether the horizontal scrollbar track should always be drawn. android:scrollbarAlwaysDrawVerticalTrack Defines whether the vertical scrollbar track should always be drawn. android:scrollbarDefaultDelayBeforeFade Defines the delay in milliseconds that a scrollbar waits before fade out. android:scrollbarFadeDuration Defines the delay in milliseconds that a scrollbar takes to fade out. android:scrollbarSize Sets the width of vertical scrollbars and height of horizontal scrollbars. android:scrollbarStyle Controls the scrollbar style and position. android:scrollbarThumbHorizontal Defines the horizontal scrollbar thumb drawable. android:scrollbarThumbVertical Defines the vertical scrollbar thumb drawable. android:scrollbarTrackHorizontal Defines the horizontal scrollbar track drawable. android:scrollbarTrackVertical Defines the vertical scrollbar track drawable. android:scrollbars Defines which scrollbars should be displayed on scrolling or not. android:soundEffectsEnabled Boolean that controls whether a view should have sound effects enabled for events such as clicking and touching. android:stateListAnimator Sets the state-based animator for the View. android:tag Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag(). android:textAlignment Defines the alignment of the text. android:textDirection Defines the direction of the text. android:theme Specifies a theme override for a view. android:tooltipText Defines text displayed in a small popup window on hover or long press. android:transformPivotX x location of the pivot point around which the view will rotate and scale. android:transformPivotY y location of the pivot point around which the view will rotate and scale. android:transitionName Names a View such that it can be identified for Transitions. android:translationX translation in x of the view. android:translationY translation in y of the view. android:translationZ translation in z of the view. android:visibility Controls the initial visibility of the view. Inherited constants From class android.widget.TextView int AUTO_SIZE_TEXT_TYPE_NONE The TextView does not auto-size text (default). int AUTO_SIZE_TEXT_TYPE_UNIFORM The TextView scales text size both horizontally and vertically to fit within the container. From class android.view.View int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view. int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view. int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view. int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE Hint indicating that this view can be autofilled with a credit card expiration date. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY Hint indicating that this view can be autofilled with a credit card expiration day. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH Hint indicating that this view can be autofilled with a credit card expiration month. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR Hint indicating that this view can be autofilled with a credit card expiration year. String AUTOFILL_HINT_CREDIT_CARD_NUMBER Hint indicating that this view can be autofilled with a credit card number. String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE Hint indicating that this view can be autofilled with a credit card security code. String AUTOFILL_HINT_EMAIL_ADDRESS Hint indicating that this view can be autofilled with an email address. String AUTOFILL_HINT_NAME Hint indicating that this view can be autofilled with a user's real name. String AUTOFILL_HINT_PASSWORD Hint indicating that this view can be autofilled with a password. String AUTOFILL_HINT_PHONE Hint indicating that this view can be autofilled with a phone number. String AUTOFILL_HINT_POSTAL_ADDRESS Hint indicating that this view can be autofilled with a postal address. String AUTOFILL_HINT_POSTAL_CODE Hint indicating that this view can be autofilled with a postal code. String AUTOFILL_HINT_USERNAME Hint indicating that this view can be autofilled with a username. int AUTOFILL_TYPE_DATE Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime(). int AUTOFILL_TYPE_LIST Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0). int AUTOFILL_TYPE_NONE Autofill type for views that cannot be autofilled. int AUTOFILL_TYPE_TEXT Autofill type for a text field, which is filled by a CharSequence. int AUTOFILL_TYPE_TOGGLE Autofill type for a togglable field, which is filled by a boolean. int DRAG_FLAG_GLOBAL Flag indicating that a drag can cross window boundaries. int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}. int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI. int DRAG_FLAG_GLOBAL_URI_READ When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_GLOBAL_URI_WRITE When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_OPAQUE Flag indicating that the drag shadow will be opaque. int DRAWING_CACHE_QUALITY_AUTO This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_HIGH This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_LOW This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description. int FIND_VIEWS_WITH_TEXT Find views that render the specified text. int FOCUSABLE This view wants keystrokes. int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode. int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode. int FOCUSABLE_AUTO This view determines focusability automatically. int FOCUS_BACKWARD Use with focusSearch(int). int FOCUS_DOWN Use with focusSearch(int). int FOCUS_FORWARD Use with focusSearch(int). int FOCUS_LEFT Use with focusSearch(int). int FOCUS_RIGHT Use with focusSearch(int). int FOCUS_UP Use with focusSearch(int). int GONE This view is invisible, and it doesn't take any space for layout purposes. int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses. int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views. int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility. int IMPORTANT_FOR_AUTOFILL_AUTO Automatically determine whether a view is important for autofill. int IMPORTANT_FOR_AUTOFILL_NO The view is not important for autofill, but its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS The view is not important for autofill, and its children (if any) will not be traversed. int IMPORTANT_FOR_AUTOFILL_YES The view is important for autofill, and its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS The view is important for autofill, but its children (if any) will not be traversed. int INVISIBLE This view is invisible, but it still takes up space for layout purposes. int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user. int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer. int LAYER_TYPE_NONE Indicates that the view does not have a layer. int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer. int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent. int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale. int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right. int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left. int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int). int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size. int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits. int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have. int NOT_FOCUSABLE This view does not want keystrokes. int NO_ID Used to mark a View that has no ID. int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll. int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. int OVER_SCROLL_NEVER Never allow a user to over-scroll this view. int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off. int SCREEN_STATE_ON Indicates that the screen has changed state and is now on. int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view. int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding. int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view. int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding. int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system. int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge. int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge. int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis. int SCROLL_AXIS_NONE Indicates no axis of view scrolling. int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis. int SCROLL_INDICATOR_BOTTOM Scroll indicator direction for the bottom edge of the view. int SCROLL_INDICATOR_END Scroll indicator direction for the ending edge of the view. int SCROLL_INDICATOR_LEFT Scroll indicator direction for the left edge of the view. int SCROLL_INDICATOR_RIGHT Scroll indicator direction for the right edge of the view. int SCROLL_INDICATOR_START Scroll indicator direction for the starting edge of the view. int SCROLL_INDICATOR_TOP Scroll indicator direction for the top edge of the view. int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching. int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead. int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead. int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden. int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds. int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode. int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default). int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI. int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g. int TEXT_ALIGNMENT_GRAVITY Default for the root view. int TEXT_ALIGNMENT_INHERIT Default text alignment. int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g. int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g. int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise. int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise. int TEXT_DIRECTION_ANY_RTL Text direction is using "any-RTL" algorithm. int TEXT_DIRECTION_FIRST_STRONG Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_LTR Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_RTL Text direction is using "first strong algorithm". int TEXT_DIRECTION_INHERIT Text direction is inherited through ViewGroup int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale. int TEXT_DIRECTION_LTR Text direction is forced to LTR. int TEXT_DIRECTION_RTL Text direction is forced to RTL. String VIEW_LOG_TAG The logging tag used by this class with android.util.Log. int VISIBLE This view is visible. Inherited fields From class android.view.View public static final Property<View, Float> ALPHA A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods. protected static final int[] EMPTY_STATE_SET Indicates the view has no states set. protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is enabled, focused and selected. protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused, selected and its window has the focus. protected static final int[] ENABLED_FOCUSED_STATE_SET Indicates the view is enabled and has the focus. protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused and its window has the focus. protected static final int[] ENABLED_SELECTED_STATE_SET Indicates the view is enabled and selected. protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, selected and its window has the focus. protected static final int[] ENABLED_STATE_SET Indicates the view is enabled. protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled and that its window has focus. protected static final int[] FOCUSED_SELECTED_STATE_SET Indicates the view is focused and selected. protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is focused, selected and its window has the focus. protected static final int[] FOCUSED_STATE_SET Indicates the view is focused. protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view has the focus and that its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, enabled, focused and selected. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET Indicates the view is pressed, enabled and focused. protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused and its window has the focus. protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET Indicates the view is pressed, enabled and selected. protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_STATE_SET Indicates the view is pressed and enabled. protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled and its window has the focus. protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, focused and selected. protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused, selected and its window has the focus. protected static final int[] PRESSED_FOCUSED_STATE_SET Indicates the view is pressed and focused. protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused and its window has the focus. protected static final int[] PRESSED_SELECTED_STATE_SET Indicates the view is pressed and selected. protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, selected and its window has the focus. protected static final int[] PRESSED_STATE_SET Indicates the view is pressed. protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed and its window has the focus. public static final Property<View, Float> ROTATION A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods. public static final Property<View, Float> ROTATION_X A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods. public static final Property<View, Float> ROTATION_Y A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods. public static final Property<View, Float> SCALE_X A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods. public static final Property<View, Float> SCALE_Y A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods. protected static final int[] SELECTED_STATE_SET Indicates the view is selected. protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is selected and that its window has the focus. public static final Property<View, Float> TRANSLATION_X A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods. public static final Property<View, Float> TRANSLATION_Y A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods. public static final Property<View, Float> TRANSLATION_Z A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods. protected static final int[] WINDOW_FOCUSED_STATE_SET Indicates the view's window has focus. public static final Property<View, Float> X A Property wrapper around the x functionality handled by the setX(float) and getX() methods. public static final Property<View, Float> Y A Property wrapper around the y functionality handled by the setY(float) and getY() methods. public static final Property<View, Float> Z A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods. Public constructors Button(Context context) Simple constructor to use when creating a button from code. Button(Context context, AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. Button(Context context, AttributeSet attrs, int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. Button(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. Public methods CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. Inherited methods From class android.widget.TextView void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addTextChangedListener(TextWatcher watcher) Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. final void append(CharSequence text) Convenience method to append the specified text to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void append(CharSequence text, int start, int end) Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void beginBatchEdit() boolean bringPointIntoView(int offset) Move the point, specified by the offset, into the view if it is needed. void cancelLongPress() Cancels a pending long press. void clearComposingText() Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG. boolean didTouchFocusSelect() Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. void endBatchEdit() boolean extractText(ExtractedTextRequest request, ExtractedText outText) If this TextView contains editable content, extract a portion of it based on the information in request in to outText. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. final int getAutoLinkMask() Gets the autolink mask of the text. int getAutoSizeMaxTextSize() int getAutoSizeMinTextSize() int getAutoSizeStepGranularity() int[] getAutoSizeTextAvailableSizes() int getAutoSizeTextType() Returns the type of auto-size set for this widget. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the TextView's current text for AutoFill. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. int getBreakStrategy() Gets the current strategy for breaking paragraphs into lines. int getCompoundDrawablePadding() Returns the padding between the compound drawables and the text. ColorStateList getCompoundDrawableTintList() PorterDuff.Mode getCompoundDrawableTintMode() Returns the blending mode used to apply the tint to the compound drawables, if specified. Drawable[] getCompoundDrawables() Returns drawables for the left, top, right, and bottom borders. Drawable[] getCompoundDrawablesRelative() Returns drawables for the start, top, end, and bottom borders. int getCompoundPaddingBottom() Returns the bottom padding of the view, plus space for the bottom Drawable if any. int getCompoundPaddingEnd() Returns the end padding of the view, plus space for the end Drawable if any. int getCompoundPaddingLeft() Returns the left padding of the view, plus space for the left Drawable if any. int getCompoundPaddingRight() Returns the right padding of the view, plus space for the right Drawable if any. int getCompoundPaddingStart() Returns the start padding of the view, plus space for the start Drawable if any. int getCompoundPaddingTop() Returns the top padding of the view, plus space for the top Drawable if any. final int getCurrentHintTextColor() Return the current color selected to paint the hint text. final int getCurrentTextColor() Return the current color selected for normal text. ActionMode.Callback getCustomInsertionActionModeCallback() Retrieves the value set in setCustomInsertionActionModeCallback(ActionMode.Callback). ActionMode.Callback getCustomSelectionActionModeCallback() Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback). boolean getDefaultEditable() Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options. MovementMethod getDefaultMovementMethod() Subclasses override this to specify a default movement method. Editable getEditableText() Return the text that TextView is displaying as an Editable object. TextUtils.TruncateAt getEllipsize() Returns where, if anywhere, words that are longer than the view is wide should be ellipsized. CharSequence getError() Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input. int getExtendedPaddingBottom() Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. int getExtendedPaddingTop() Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. InputFilter[] getFilters() Returns the current list of input filters. int getFirstBaselineToTopHeight() Returns the distance between the first text baseline and the top of this TextView. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. String getFontFeatureSettings() Returns the font feature settings. String getFontVariationSettings() Returns the font variation settings. boolean getFreezesText() Return whether this text view is including its entire text contents in frozen icicles. int getGravity() Returns the horizontal and vertical alignment of this TextView. int getHighlightColor() CharSequence getHint() Returns the hint that is displayed when the text of the TextView is empty. final ColorStateList getHintTextColors() int getHyphenationFrequency() Gets the current frequency of automatic hyphenation to be used when determining word breaks. int getImeActionId() Get the IME action ID previous set with setImeActionLabel(CharSequence, int). CharSequence getImeActionLabel() Get the IME action label previous set with setImeActionLabel(CharSequence, int). LocaleList getImeHintLocales() int getImeOptions() Get the type of the Input Method Editor (IME). boolean getIncludeFontPadding() Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. Bundle getInputExtras(boolean create) Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. int getInputType() Get the type of the editable content. int getJustificationMode() final KeyListener getKeyListener() Gets the current KeyListener for the TextView. int getLastBaselineToBottomHeight() Returns the distance between the last text baseline and the bottom of this TextView. final Layout getLayout() Gets the Layout that is currently being used to display the text. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. float getLetterSpacing() Gets the text letter-space value, which determines the spacing between characters. int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. int getLineCount() Return the number of lines of text, or 0 if the internal Layout has not been built. int getLineHeight() Gets the vertical distance between lines of text, in pixels. float getLineSpacingExtra() Gets the line spacing extra space float getLineSpacingMultiplier() Gets the line spacing multiplier final ColorStateList getLinkTextColors() final boolean getLinksClickable() Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). int getMarqueeRepeatLimit() Gets the number of times the marquee animation is repeated. int getMaxEms() Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth(int) or setWidth(int). int getMaxHeight() Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines(int) or setLines(int). int getMaxLines() Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight(int) or setHeight(int). int getMaxWidth() Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms(int) or setEms(int). int getMinEms() Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth(int) or setWidth(int). int getMinHeight() Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines(int) or setLines(int). int getMinLines() Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight(int) or setHeight(int). int getMinWidth() Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms(int) or setEms(int). final MovementMethod getMovementMethod() Gets the MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality. int getOffsetForPosition(float x, float y) Get the character offset closest to the specified absolute position. TextPaint getPaint() Gets the TextPaint used for the text. int getPaintFlags() Gets the flags on the Paint being used to display the text. String getPrivateImeOptions() Get the private type of the content. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. int getSelectionEnd() Convenience for Selection.getSelectionEnd(CharSequence). int getSelectionStart() Convenience for Selection.getSelectionStart(CharSequence). int getShadowColor() Gets the color of the shadow layer. float getShadowDx() float getShadowDy() Gets the vertical offset of the shadow layer. float getShadowRadius() Gets the radius of the shadow layer. final boolean getShowSoftInputOnFocus() Returns whether the soft input method will be made visible when this TextView gets focused. CharSequence getText() Return the text that TextView is displaying. TextClassifier getTextClassifier() Returns the TextClassifier used by this TextView. final ColorStateList getTextColors() Gets the text colors for the different states (normal, selected, focused) of the TextView. Locale getTextLocale() Get the default primary Locale of the text in this TextView. LocaleList getTextLocales() Get the default LocaleList of the text in this TextView. PrecomputedText.Params getTextMetricsParams() Gets the parameters for text layout precomputation, for use with PrecomputedText. float getTextScaleX() Gets the extent by which text should be stretched horizontally. float getTextSize() int getTopPaddingOffset() Amount by which to extend the top fading region. int getTotalPaddingBottom() Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. int getTotalPaddingEnd() Returns the total end padding of the view, including the end Drawable if any. int getTotalPaddingLeft() Returns the total left padding of the view, including the left Drawable if any. int getTotalPaddingRight() Returns the total right padding of the view, including the right Drawable if any. int getTotalPaddingStart() Returns the total start padding of the view, including the start Drawable if any. int getTotalPaddingTop() Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. final TransformationMethod getTransformationMethod() Gets the current TransformationMethod for the TextView. Typeface getTypeface() Gets the current Typeface that is used to style the text. URLSpan[] getUrls() Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasSelection() Return true iff there is a selection inside this text view. void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. boolean isAllCaps() Checks whether the transformation method applied to this TextView is set to ALL CAPS. boolean isCursorVisible() boolean isElegantTextHeight() Get the value of the TextView's elegant height metrics flag. boolean isFallbackLineSpacing() boolean isInputMethodTarget() Returns whether this text view is a current input method target. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isSuggestionsEnabled() Return whether or not suggestions are enabled on this TextView. boolean isTextSelectable() Returns the state of the textIsSelectable flag (See setTextIsSelectable()). void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. int length() Returns the length, in characters, of the text managed by this TextView boolean moveCursorToVisibleOffset() Move the cursor, if needed, so that it is at an offset that is visible to the user. void onAttachedToWindow() This is called when the view is attached to a window. void onBeginBatchEdit() Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit(). boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onCommitCompletion(CompletionInfo text) Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). void onCommitCorrection(CorrectionInfo info) Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling InputConnection.commitCorrection(). void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onEditorAction(int actionCode) Called when an attached input method calls InputConnection.performEditorAction() for this text view. void onEndBatchEdit() Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit(). void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. boolean onPrivateIMECommand(String action, Bundle data) Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand(). void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int horiz, int vert, int oldHoriz, int oldVert) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). void onSelectionChanged(int selStart, int selEnd) This method is called when the selection has changed, in case any subclasses would like to know. void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) This method is called when the text is changed, in case any subclasses would like to know. boolean onTextContextMenuItem(int id) Called when a context menu option for the text view is selected. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void removeTextChangedListener(TextWatcher watcher) Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAllCaps(boolean allCaps) Sets the properties of this field to transform input to ALL CAPS display. final void setAutoLinkMask(int mask) Sets the autolink mask of the text. void setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeWithDefaults(int autoSizeTextType) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration. void setBreakStrategy(int breakStrategy) Sets the break strategy for breaking paragraphs into lines. void setCompoundDrawablePadding(int pad) Sets the size of the padding between the compound drawables and the text. void setCompoundDrawableTintList(ColorStateList tint) Applies a tint to the compound drawables. void setCompoundDrawableTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList(ColorStateList) to the compound drawables. void setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesRelative(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(int start, int top, int end, int bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCursorVisible(boolean visible) Set whether the cursor is visible. void setCustomInsertionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View. void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. final void setEditableFactory(Editable.Factory factory) Sets the Factory used to create new Editables. void setElegantTextHeight(boolean elegant) Set the TextView's elegant height metrics flag. void setEllipsize(TextUtils.TruncateAt where) Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. void setEms(int ems) Sets the width of the TextView to be exactly ems wide. void setEnabled(boolean enabled) Set the enabled state of this view. void setError(CharSequence error) Sets the right-hand compound drawable of the TextView to the "error" icon and sets an error message that will be displayed in a popup when the TextView has focus. void setError(CharSequence error, Drawable icon) Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. void setExtractedText(ExtractedText text) Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText). void setFallbackLineSpacing(boolean enabled) Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). void setFilters(InputFilter[] filters) Sets the list of input filters that will be used if the buffer is Editable. void setFirstBaselineToTopHeight(int firstBaselineToTopHeight) Updates the top padding of the TextView so that firstBaselineToTopHeight is equal to the distance between the firt text baseline and the top of this TextView. void setFontFeatureSettings(String fontFeatureSettings) Sets font feature settings. boolean setFontVariationSettings(String fontVariationSettings) Sets TrueType or OpenType font variation settings. boolean setFrame(int l, int t, int r, int b) Assign a size and position to this view. void setFreezesText(boolean freezesText) Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. void setGravity(int gravity) Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. void setHeight(int pixels) Sets the height of the TextView to be exactly pixels tall. void setHighlightColor(int color) Sets the color used to display the selection highlight. final void setHint(CharSequence hint) Sets the text to be displayed when the text of the TextView is empty. final void setHint(int resid) Sets the text to be displayed when the text of the TextView is empty, from a resource. final void setHintTextColor(ColorStateList colors) Sets the color of the hint text. final void setHintTextColor(int color) Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. void setHorizontallyScrolling(boolean whether) Sets whether the text should be allowed to be wider than the View is. void setHyphenationFrequency(int hyphenationFrequency) Sets the frequency of automatic hyphenation to use when determining word breaks. void setImeActionLabel(CharSequence label, int actionId) Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo.actionLabel and EditorInfo.actionId when it has focus. void setImeHintLocales(LocaleList hintLocales) Change "hint" locales associated with the text view, which will be reported to an IME with EditorInfo.hintLocales when it has focus. void setImeOptions(int imeOptions) Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with EditorInfo.imeOptions when it has focus. void setIncludeFontPadding(boolean includepad) Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. void setInputExtras(int xmlResId) Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection. void setInputType(int type) Set the type of the content with a constant as defined for EditorInfo.inputType. void setJustificationMode(int justificationMode) Set justification mode. void setKeyListener(KeyListener input) Sets the key listener to be used with this TextView. void setLastBaselineToBottomHeight(int lastBaselineToBottomHeight) Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is equal to the distance between the last text baseline and the bottom of this TextView. void setLetterSpacing(float letterSpacing) Sets text letter-spacing in em units. void setLineHeight(int lineHeight) Sets an explicit line height for this TextView. void setLineSpacing(float add, float mult) Sets line spacing for this TextView. void setLines(int lines) Sets the height of the TextView to be exactly lines tall. final void setLinkTextColor(ColorStateList colors) Sets the color of links in the text. final void setLinkTextColor(int color) Sets the color of links in the text. final void setLinksClickable(boolean whether) Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). void setMarqueeRepeatLimit(int marqueeLimit) Sets how many times to repeat the marquee animation. void setMaxEms(int maxEms) Sets the width of the TextView to be at most maxEms wide. void setMaxHeight(int maxPixels) Sets the height of the TextView to be at most maxPixels tall. void setMaxLines(int maxLines) Sets the height of the TextView to be at most maxLines tall. void setMaxWidth(int maxPixels) Sets the width of the TextView to be at most maxPixels wide. void setMinEms(int minEms) Sets the width of the TextView to be at least minEms wide. void setMinHeight(int minPixels) Sets the height of the TextView to be at least minPixels tall. void setMinLines(int minLines) Sets the height of the TextView to be at least minLines tall. void setMinWidth(int minPixels) Sets the width of the TextView to be at least minPixels wide. final void setMovementMethod(MovementMethod movement) Sets the MovementMethod for handling arrow key movement for this TextView. void setOnEditorActionListener(TextView.OnEditorActionListener l) Set a special listener to be called when an action is performed on the text view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPaintFlags(int flags) Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. void setPrivateImeOptions(String type) Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection. void setRawInputType(int type) Directly change the content type integer of the text view, without modifying any other state. void setScroller(Scroller s) Sets the Scroller used for producing a scrolling animation void setSelectAllOnFocus(boolean selectAllOnFocus) Set the TextView so that when it takes focus, all the text is selected. void setSelected(boolean selected) Changes the selection state of this view. void setShadowLayer(float radius, float dx, float dy, int color) Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. final void setShowSoftInputOnFocus(boolean show) Sets whether the soft input method will be made visible when this TextView gets focused. void setSingleLine(boolean singleLine) If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. void setSingleLine() Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. final void setSpannableFactory(Spannable.Factory factory) Sets the Factory used to create new Spannables. final void setText(int resid) Sets the text to be displayed using a string resource identifier. final void setText(CharSequence text) Sets the text to be displayed. void setText(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType. final void setText(int resid, TextView.BufferType type) Sets the text to be displayed using a string resource identifier and the TextView.BufferType. final void setText(char[] text, int start, int len) Sets the TextView to display the specified slice of the specified char array. void setTextAppearance(Context context, int resId) This method was deprecated in API level 23. Use setTextAppearance(int) instead. void setTextAppearance(int resId) Sets the text appearance from the specified style resource. void setTextClassifier(TextClassifier textClassifier) Sets the TextClassifier for this TextView. void setTextColor(int color) Sets the text color for all the states (normal, selected, focused) to be this color. void setTextColor(ColorStateList colors) Sets the text color. void setTextIsSelectable(boolean selectable) Sets whether the content of this view is selectable by the user. final void setTextKeepState(CharSequence text) Sets the text to be displayed but retains the cursor position. final void setTextKeepState(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType but retains the cursor position. void setTextLocale(Locale locale) Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale. void setTextLocales(LocaleList locales) Set the default LocaleList of the text in this TextView to the given value. void setTextMetricsParams(PrecomputedText.Params params) Apply the text layout parameter. void setTextScaleX(float size) Sets the horizontal scale factor for text. void setTextSize(int unit, float size) Set the default text size to a given unit and value. void setTextSize(float size) Set the default text size to the given value, interpreted as "scaled pixel" units. final void setTransformationMethod(TransformationMethod method) Sets the transformation that is applied to the text that this TextView is displaying. void setTypeface(Typeface tf) Sets the typeface and style in which the text should be displayed. void setTypeface(Typeface tf, int style) Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. void setWidth(int pixels) Sets the width of the TextView to be exactly pixels wide. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. From class android.view.View void addChildrenForAccessibility(ArrayList<View> outChildren) Adds the children of this View relevant for accessibility to the given list as output. void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addKeyboardNavigationClusters(Collection<View> views, int direction) Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views. void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes. void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing. void addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Adds a listener which will receive unhandled KeyEvents. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. void announceForAccessibility(CharSequence text) Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void autofill(SparseArray<AutofillValue> values) Automatically fills the content of the virtual children within this view. boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw. boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw. boolean awakenScrollBars() Trigger the scrollbars to draw. void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views. void buildDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer. boolean callOnClick() Directly call any attached OnClickListener. boolean canResolveLayoutDirection() Check if layout direction resolution can be done. boolean canResolveTextAlignment() Check if text alignment resolution can be done. boolean canResolveTextDirection() Check if text direction resolution can be done. boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction. boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction. final void cancelDragAndDrop() Cancels an ongoing drag and drop operation. void cancelLongPress() Cancels a pending long press. final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue. boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. void clearAnimation() Cancels any animations for this view. void clearFocus() Called when this view wants to give up focus. static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState(). int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService. void createContextMenu(ContextMenu menu) Show the context menu for this view. void destroyDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. boolean dispatchCapturedPointerEvent(MotionEvent event) Pass a captured pointer event down to the focused view. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. void dispatchDrawableHotspotChanged(float x, float y) Dispatches drawableHotspotChanged to all of this View's children. void dispatchFinishTemporaryDetach() Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent. boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view. boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments) Report an accessibility action to this view's parents for delegated processing. boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it. boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress. void dispatchPointerCaptureChanged(boolean hasCapture) boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. void dispatchProvideAutofillStructure(ViewStructure structure, int flags) Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. void dispatchProvideStructure(ViewStructure structure) Dispatch creation of ViewStructure down the hierarchy. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchStartTemporaryDetach() Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View. void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. final <T extends View> T findViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy. final <T extends View> T findViewWithTag(Object tag) Look for a child view with the given tag. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets. View focusSearch(int direction) Find the nearest view in the specified direction that can take focus. void forceHasOverlappingRendering(boolean hasOverlappingRendering) Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior). void forceLayout() Forces this view to be laid out during the next layout pass. static int generateViewId() Generate a value suitable for use in setId(int). CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. int getAccessibilityLiveRegion() Gets the live region mode for this View. AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. CharSequence getAccessibilityPaneTitle() Get the title of the pane for purposes of accessibility. int getAccessibilityTraversalAfter() Gets the id of a view after which this one is visited in accessibility traversal. int getAccessibilityTraversalBefore() Gets the id of a view before which this one is visited in accessibility traversal. float getAlpha() The opacity of the view. Animation getAnimation() Get the animation currently associated with this view. IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to. String[] getAutofillHints() Gets the hints that help an AutofillService determine how to autofill the view with the user's data. final AutofillId getAutofillId() Gets the unique, logical identifier of this view in the activity, for autofill purposes. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the View's current autofill value. Drawable getBackground() Gets the background drawable ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified. PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. final int getBottom() Bottom position of this view relative to its parent. float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. float getCameraDistance() Gets the distance along the Z axis from the camera to this view. boolean getClipBounds(Rect outRect) Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null. Rect getClipBounds() Returns a copy of the current clipBounds. final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View. CharSequence getContentDescription() Returns the View's content description. final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc. ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu. final boolean getDefaultFocusHighlightEnabled() /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. static int getDefaultSize(int size, int measureSpec) Utility to return a default size. Display getDisplay() Gets the logical display to which the view's window has been attached. final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view. Bitmap getDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Bitmap getDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheBackgroundColor() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheQuality() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view. long getDrawingTime() Return the time at which the drawing of the view hierarchy started. float getElevation() The base elevation of this view relative to its parent, in pixels. boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window. boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean). int getFocusable() Returns the focusable setting for this view. ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. Drawable getForeground() Returns the drawable used as the foreground of this View. int getForegroundGravity() Describes how the foreground is positioned. ColorStateList getForegroundTintList() Return the tint applied to the foreground drawable, if specified. PorterDuff.Mode getForegroundTintMode() Return the blending mode used to apply the tint to the foreground drawable, if specified. final boolean getGlobalVisibleRect(Rect r) boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. Handler getHandler() final boolean getHasOverlappingRendering() Returns the value for overlapping rendering that is used internally. final int getHeight() Return the height of your view. void getHitRect(Rect outRect) Hit rectangle in parent's coordinates int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar. int getId() Returns this view's identifier. int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility. int getImportantForAutofill() Gets the mode for determining whether this view is important for autofill. boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window. int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes. int getLayerType() Indicates what type of layer is currently associated with this view. int getLayoutDirection() Returns the resolved layout direction for this view. ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view. final int getLeft() Left position of this view relative to its parent. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. final boolean getLocalVisibleRect(Rect r) void getLocationInWindow(int[] outLocation) Computes the coordinates of this view in its window. void getLocationOnScreen(int[] outLocation) Computes the coordinates of this view on the screen. Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int). final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int). int getMinimumHeight() Returns the minimum height of the view. int getMinimumWidth() Returns the minimum width of the view. int getNextClusterForwardId() Gets the id of the root of the next keyboard navigation cluster. int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN. int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD. int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT. int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT. int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP. View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view. int getOutlineAmbientShadowColor() ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. int getOutlineSpotShadowColor() int getOverScrollMode() Returns the over-scroll mode for this view. ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist. int getPaddingBottom() Returns the bottom padding of this view. int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction. int getPaddingLeft() Returns the left padding of this view. int getPaddingRight() Returns the right padding of this view. int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction. int getPaddingTop() Returns the top padding of this view. final ViewParent getParent() Gets the parent of this view. ViewParent getParentForAccessibility() Gets the parent for accessibility purposes. float getPivotX() The x location of the point around which the view is rotated and scaled. float getPivotY() The y location of the point around which the view is rotated and scaled. PointerIcon getPointerIcon() Gets the pointer icon for the current view. Resources getResources() Returns the resources associated with this view. final boolean getRevealOnFocusHint() Returns this view's preference for reveal behavior when it gains focus. final int getRight() Right position of this view relative to its parent. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. View getRootView() Finds the topmost view in the current view hierarchy. WindowInsets getRootWindowInsets() Provide original WindowInsets that are dispatched to the view hierarchy. float getRotation() The degrees that the view is rotated around the pivot point. float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point. float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point. float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade. int getScrollBarFadeDuration() Returns the scrollbar fade duration. int getScrollBarSize() Returns the scrollbar size. int getScrollBarStyle() Returns the current scrollbar style. int getScrollIndicators() Returns a bitmask representing the enabled scroll indicators. final int getScrollX() Return the scrolled left position of this view. final int getScrollY() Return the scrolled top position of this view. int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists. int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use. int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use. int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested. Object getTag() Returns this view's tag. Object getTag(int key) Returns the tag associated with this view and the specified key. int getTextAlignment() Return the resolved text alignment. int getTextDirection() Return the resolved text direction. CharSequence getTooltipText() Returns the view's tooltip text. final int getTop() Top position of this view relative to its parent. float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge. int getTopPaddingOffset() Amount by which to extend the top fading region. TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View. ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. String getTransitionName() Returns the name of the View to be used to identify Views in Transitions. float getTranslationX() The horizontal location of this view relative to its left position. float getTranslationY() The vertical location of this view relative to its top position. float getTranslationZ() The depth location of this view relative to its elevation. int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible. int getVerticalScrollbarPosition() int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar. ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy. int getVisibility() Returns the visibility status for this view. final int getWidth() Return the width of your view. int getWindowAttachCount() WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to. int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window. IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to. int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in. float getX() The visual x position of this view, in pixels. float getY() The visual y position of this view, in pixels. float getZ() The visual z position of this view, in pixels. boolean hasExplicitFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true. boolean hasFocus() Returns true if this view has focus itself, or is the ancestor of the view that has focus. boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent. boolean hasOnClickListeners() Return whether this view has an attached OnClickListener. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasPointerCapture() Checks pointer capture status. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus. static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource. void invalidate() Invalidate the whole view. void invalidate(Rect dirty) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidate(int l, int t, int r, int b) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. void invalidateOutline() Called to rebuild this View's Outline from its outline provider boolean isAccessibilityFocused() Returns whether this View is accessibility focused. boolean isAccessibilityHeading() Gets whether this view is a heading for accessibility purposes. boolean isActivated() Indicates the activation state of this view. boolean isAttachedToWindow() Returns true if this view is currently attached to a window. boolean isClickable() Indicates whether this view reacts to click events or not. boolean isContextClickable() Indicates whether this view reacts to context clicks or not. boolean isDirty() True if this view has changed since the last time being drawn. boolean isDrawingCacheEnabled() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent. boolean isEnabled() Returns the enabled status for this view. final boolean isFocusable() Returns whether this View is currently able to take focus. final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode. boolean isFocused() Returns true if this view has focus final boolean isFocusedByDefault() Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view. boolean isHapticFeedbackEnabled() boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not. boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally. boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not. boolean isHovered() Returns true if the view is currently hovered. boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility. final boolean isImportantForAutofill() Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes. boolean isInEditMode() Indicates whether this View is currently in edit mode. boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass. boolean isInTouchMode() Returns whether the device is currently in touch mode. final boolean isKeyboardNavigationCluster() Returns whether this View is a root of a keyboard navigation cluster. boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window. boolean isLayoutDirectionResolved() boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. boolean isLongClickable() Indicates whether this view reacts to long click events or not. boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view. boolean isOpaque() Indicates whether this View is opaque. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isPaddingRelative() Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through boolean isPivotSet() Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float). boolean isPressed() Indicates whether the view is currently in pressed state. boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. boolean isScreenReaderFocusable() Returns whether the view should be treated as a focusable unit by screen reader accessibility tools. boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window. boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling boolean isSelected() Indicates the selection state of this view. boolean isShown() Returns the visibility of this view and all of its ancestors boolean isSoundEffectsEnabled() final boolean isTemporarilyDetached() Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach(). boolean isTextAlignmentResolved() boolean isTextDirectionResolved() boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally. boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not. boolean isVisibleToUserForAutofill(int virtualId) Computes whether this virtual autofill view is visible to the user. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. View keyboardNavigationClusterSearch(View currentCluster, int direction) Find the nearest keyboard navigation cluster in the specified direction. void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be. static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int). void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels. void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy. void onAttachedToWindow() This is called when the view is attached to a window. void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. boolean onCapturedPointerEvent(MotionEvent event) Implement this method to handle captured pointer events boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. void onDetachedFromWindow() This is called when the view is detached from a window. void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onDrawForeground(Canvas canvas) Draw any foreground content for this view. final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar. boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies. void onFinishInflate() Finalize inflating a view from XML. void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view. void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. void onHoverChanged(boolean hovered) Implement this method to handle hover state changes. boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events. void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source. void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation. void onPointerCaptureChange(boolean hasCapture) Called when the window has just acquired or lost pointer capture. void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) Populates a ViewStructure containing virtual children to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. void onProvideVirtualStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityAggregated(boolean isVisible) Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE). boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries. boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view. boolean performClick() Call this view's OnClickListener, if it is defined. boolean performContextClick(float x, float y) Call this view's OnContextClickListener, if it is defined. boolean performContextClick() Call this view's OnContextClickListener, if it is defined. boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view. boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options. boolean performLongClick(float x, float y) Calls this view's OnLongClickListener, if it is defined. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void playSoundEffect(int soundConstant) Play a sound effect for this view. boolean post(Runnable action) Causes the Runnable to be added to the message queue. boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame. void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step. void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. void refreshDrawableState() Call this to force a view to update its drawable state. void releasePointerCapture() Releases the pointer capture. boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue. void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes. void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes. void removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Removes a listener which will receive unhandled KeyEvents. void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants. boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants. void requestLayout() Call this when something has changed which has invalidated the layout of this view. void requestPointerCapture() Requests pointer capture mode. boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View. final <T extends View> T requireViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy. void resetPivot() Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float). static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. boolean restoreDefaultFocus() Gives focus to the default-focus view in the view hierarchy that has this view as a root. void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container. void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container. void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition (as opposed to inheritance). void setAccessibilityHeading(boolean isHeading) Set if view is a heading for a section of content for accessibility purposes. void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view. void setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle) Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes. void setAccessibilityTraversalAfter(int afterId) Sets the id of a view after which this one is visited in accessibility traversal. void setAccessibilityTraversalBefore(int beforeId) Sets the id of a view before which this one is visited in accessibility traversal. void setActivated(boolean activated) Changes the activated state of this view. void setAlpha(float alpha) Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. void setAnimation(Animation animation) Sets the next animation to play for this view. void setAutofillHints(String... autofillHints) Sets the hints that help an AutofillService determine how to autofill the view with the user's data. void setAutofillId(AutofillId id) Sets the unique, logical identifier of this view in the activity, for autofill purposes. void setBackground(Drawable background) Set the background to a given Drawable, or remove the background. void setBackgroundColor(int color) Sets the background color for this view. void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead void setBackgroundResource(int resid) Set the background to a given resource. void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable. void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. final void setBottom(int bottom) Sets the bottom position of this view relative to its parent. void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. void setClickable(boolean clickable) Enables or disables click events for this view. void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View. void setContentDescription(CharSequence contentDescription) Sets the View's content description. void setContextClickable(boolean contextClickable) Enables or disables context clicking for this view. void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled) Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. void setDrawingCacheBackgroundColor(int color) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheEnabled(boolean enabled) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheQuality(int quality) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view. void setElevation(float elevation) Sets the base elevation of this view, in pixels. void setEnabled(boolean enabled) Set the enabled state of this view. void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available. void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window. void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. void setFocusable(boolean focusable) Set whether this view can receive the focus. void setFocusable(int focusable) Sets whether this view can receive focus. void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode. void setFocusedByDefault(boolean isFocusedByDefault) Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view. void setForeground(Drawable foreground) Supply a Drawable that is to be rendered on top of all of the content in the view. void setForegroundGravity(int gravity) Describes how the foreground is positioned. void setForegroundTintList(ColorStateList tint) Applies a tint to the foreground drawable. void setForegroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable. void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses. void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally. void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not. void setHovered(boolean hovered) Sets whether the view is currently hovered. void setId(int id) Sets the identifier for this view. void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. void setImportantForAutofill(int mode) Sets the mode for determining whether this view is considered important for autofill. void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. void setKeyboardNavigationCluster(boolean isCluster) Set whether this view is a root of a keyboard navigation cluster. void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes. void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view. void setLayoutDirection(int layoutDirection) Set the layout direction for this view. void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view. final void setLeft(int left) Sets the left position of this view relative to its parent. void setLongClickable(boolean longClickable) Enables or disables long click events for this view. final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height. void setMinimumHeight(int minHeight) Sets the minimum height of the view. void setMinimumWidth(int minWidth) Sets the minimum width of the view. void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view. void setNextClusterForwardId(int nextClusterForwardId) Sets the id of the view to use as the root of the next keyboard navigation cluster. void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN. void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD. void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT. void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT. void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP. void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. void setOnCapturedPointerListener(View.OnCapturedPointerListener l) Set a listener to receive callbacks when the pointer capture state of a view changes. void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked. void setOnContextClickListener(View.OnContextClickListener l) Register a callback to be invoked when this view is context clicked. void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built. void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View. void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed. void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view. void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view. void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view. void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held. void setOnScrollChangeListener(View.OnScrollChangeListener l) Register a callback to be invoked when the scroll X or Y positions of this view change. void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes. void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view. void setOutlineAmbientShadowColor(int color) Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. void setOutlineSpotShadowColor(int color) Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled. void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled. void setPointerIcon(PointerIcon pointerIcon) Set the pointer icon for the current view. void setPressed(boolean pressed) Sets the pressed state for this view. final void setRevealOnFocusHint(boolean revealOnFocus) Sets this view's preference for reveal behavior when it gains focus. final void setRight(int right) Sets the right position of this view relative to its parent. void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point. void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point. void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point. void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. void setScreenReaderFocusable(boolean screenReaderFocusable) When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit. void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade. void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration. void setScrollBarSize(int scrollBarSize) Define the scrollbar size. void setScrollBarStyle(int style) Specify the style of the scrollbars. void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window. void setScrollIndicators(int indicators, int mask) Sets the state of the scroll indicators specified by the mask. void setScrollIndicators(int indicators) Sets the state of all scroll indicators. void setScrollX(int value) Set the horizontal scrolled position of your view. void setScrollY(int value) Set the vertical scrolled position of your view. void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling. void setSelected(boolean selected) Changes the selection state of this view. void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching. void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View. void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed. void setTag(int key, Object tag) Sets a tag associated with this view and a key. void setTag(Object tag) Sets the tag associated with this view. void setTextAlignment(int textAlignment) Set the text alignment. void setTextDirection(int textDirection) Set the text direction. void setTooltipText(CharSequence tooltipText) Sets the tooltip text which will be displayed in a small popup next to the view. final void setTop(int top) Sets the top position of this view relative to its parent. void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View. final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions. void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position. void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position. void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation. void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically. void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not. void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar. void setVisibility(int visibility) Set the visibility state of this view. void setWillNotCacheDrawing(boolean willNotCacheDrawing) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations. void setX(float x) Sets the visual x position of this view, in pixels. void setY(float y) Sets the visual y position of this view, in pixels. void setZ(float z) Sets the visual z position of this view, in pixels. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. ActionMode startActionMode(ActionMode.Callback callback, int type) Start an action mode with the given type. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode with the default type ActionMode.TYPE_PRIMARY. void startAnimation(Animation animation) Start the specified animation now. final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions. final boolean startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation. boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes. void stopNestedScroll() Stop a nested scroll in progress. String toString() Returns a string representation of the object. void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable. void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable. final void updateDragShadow(View.DragShadowBuilder shadowBuilder) Updates the drag shadow for the ongoing drag and drop operation. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. boolean willNotCacheDrawing() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean willNotDraw() Returns whether or not this View draws on its own. From class java.lang.Object Object clone() Creates and returns a copy of this object. boolean equals(Object obj) Indicates whether some other object is "equal to" this one. void finalize() Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. final Class<?> getClass() Returns the runtime class of this Object. int hashCode() Returns a hash code value for the object. final void notify() Wakes up a single thread that is waiting on this object's monitor. final void notifyAll() Wakes up all threads that are waiting on this object's monitor. String toString() Returns a string representation of the object. final void wait(long millis, int nanos) Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed. final void wait(long millis) Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed. final void wait() Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. From interface android.view.ViewTreeObserver.OnPreDrawListener abstract boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. From interface android.graphics.drawable.Drawable.Callback abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn. abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation. abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred. From interface android.view.accessibility.AccessibilityEventSource abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type. abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent. Public constructors Button added in API level 1 public Button (Context context) Simple constructor to use when creating a button from code. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. See also: Button(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. The attributes defined by the current theme's android:buttonStyle override base view attributes. You typically do not call this constructor to create your own button instance in code. However, you must override this constructor when creating custom views. Parameters context Context: The Context the view is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag being used to inflate the view. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. The attributes defined by the current theme's defStyleAttr override base view attributes. For Button's base view attributes see Button Attributes, TextView Attributes, View Attributes. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int, int) View.View(Context, AttributeSet, int) Button added in API level 21 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. To see how the final value of a particular attribute is resolved based on your inputs to this constructor, see View.View(Context, AttributeSet, int, int). Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. defStyleRes int: The identifier of a style resource that supplies default values for the button, used only if defStyleAttr is 0 or cannot be found in the theme. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet, int, int) Public methods getAccessibilityClassName added in API level 23 public CharSequence getAccessibilityClassName () Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in AccessibilityNodeInfo.setClassName. Returns CharSequence onResolvePointerIcon added in API level 24 public PointerIcon onResolvePointerIcon (MotionEvent event, 
                int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews). Parameters event MotionEvent: The MotionEvent from a mouse pointerIndex int: The index of the pointer for which to retrieve the PointerIcon. This will be between 0 and MotionEvent.getPointerCount(). Returns PointerIcon Annotations RemoteViews.RemoteView Interfaces AbsListView.MultiChoiceModeListener AbsListView.OnScrollListener AbsListView.RecyclerListener AbsListView.SelectionBoundsAdjuster ActionMenuView.OnMenuItemClickListener Adapter AdapterView.OnItemClickListener AdapterView.OnItemLongClickListener AdapterView.OnItemSelectedListener Advanceable AutoCompleteTextView.OnDismissListener AutoCompleteTextView.Validator CalendarView.OnDateChangeListener Checkable Chronometer.OnChronometerTickListener CompoundButton.OnCheckedChangeListener DatePicker.OnDateChangedListener ExpandableListAdapter ExpandableListView.OnChildClickListener ExpandableListView.OnGroupClickListener ExpandableListView.OnGroupCollapseListener ExpandableListView.OnGroupExpandListener Filter.FilterListener Filterable FilterQueryProvider HeterogeneousExpandableList ListAdapter MediaController.MediaPlayerControl MultiAutoCompleteTextView.Tokenizer NumberPicker.Formatter NumberPicker.OnScrollListener NumberPicker.OnValueChangeListener PopupMenu.OnDismissListener PopupMenu.OnMenuItemClickListener PopupWindow.OnDismissListener RadioGroup.OnCheckedChangeListener RatingBar.OnRatingBarChangeListener RemoteViewsService.RemoteViewsFactory SearchView.OnCloseListener SearchView.OnQueryTextListener SearchView.OnSuggestionListener SectionIndexer SeekBar.OnSeekBarChangeListener ShareActionProvider.OnShareTargetSelectedListener SimpleAdapter.ViewBinder SimpleCursorAdapter.CursorToStringConverter SimpleCursorAdapter.ViewBinder SimpleCursorTreeAdapter.ViewBinder SlidingDrawer.OnDrawerCloseListener SlidingDrawer.OnDrawerOpenListener SlidingDrawer.OnDrawerScrollListener SpinnerAdapter TabHost.OnTabChangeListener TabHost.TabContentFactory TextView.OnEditorActionListener ThemedSpinnerAdapter TimePicker.OnTimeChangedListener Toolbar.OnMenuItemClickListener ViewSwitcher.ViewFactory WrapperListAdapter ZoomButtonsController.OnZoomListener Classes AbsListView AbsListView.LayoutParams AbsoluteLayout AbsoluteLayout.LayoutParams AbsSeekBar AbsSpinner ActionMenuView ActionMenuView.LayoutParams AdapterView AdapterView.AdapterContextMenuInfo AdapterViewAnimator AdapterViewFlipper AlphabetIndexer AnalogClock ArrayAdapter AutoCompleteTextView BaseAdapter BaseExpandableListAdapter Button CalendarView CheckBox CheckedTextView Chronometer CompoundButton CursorAdapter CursorTreeAdapter DatePicker DialerFilter DigitalClock EdgeEffect EditText ExpandableListView ExpandableListView.ExpandableListContextMenuInfo Filter Filter.FilterResults FrameLayout FrameLayout.LayoutParams Gallery Gallery.LayoutParams GridLayout GridLayout.Alignment GridLayout.LayoutParams GridLayout.Spec GridView HeaderViewListAdapter HorizontalScrollView ImageButton ImageSwitcher ImageView LinearLayout LinearLayout.LayoutParams ListPopupWindow ListView ListView.FixedViewInfo Magnifier MediaController MultiAutoCompleteTextView MultiAutoCompleteTextView.CommaTokenizer NumberPicker OverScroller PopupMenu PopupWindow ProgressBar QuickContactBadge RadioButton RadioGroup RadioGroup.LayoutParams RatingBar RelativeLayout RelativeLayout.LayoutParams RemoteViews RemoteViewsService ResourceCursorAdapter ResourceCursorTreeAdapter Scroller ScrollView SearchView SeekBar ShareActionProvider SimpleAdapter SimpleCursorAdapter SimpleCursorTreeAdapter SimpleExpandableListAdapter SlidingDrawer Space Spinner StackView Switch TabHost TabHost.TabSpec TableLayout TableLayout.LayoutParams TableRow TableRow.LayoutParams TabWidget TextClock TextSwitcher TextView TextView.SavedState TimePicker Toast ToggleButton Toolbar Toolbar.LayoutParams TwoLineListItem VideoView ViewAnimator ViewFlipper ViewSwitcher ZoomButton ZoomButtonsController ZoomControls Enums ImageView.ScaleType TextView.BufferType Exceptions RemoteViews.ActionException Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates. Last updated June 6, 2018. Twitter Follow @AndroidDev on Twitter Google+ Follow Android Developers on Google+ YouTube Check out Android Developers on YouTube More Android Android Enterprise Security Source Support Report platform bug Report documentation bug Google Play support Join user studies Documentation Developer guides Design guides API reference Samples Android Studio Android Chrome Firebase Google Cloud Platform All Products Bahasa Indonesia Deutsch English español Español (América Latina) français Português Brasileiro Tiếng Việt Türkçe Русский ภาษาไทย 日本語 简体中文 繁體中文 한국어 Privacy License Brand Guidelines Get Android and Google Play news by email SubscribeButton  |  Android Developers Android Developers Platform Android Studio Google Play Android Jetpack Docs Blog Documentation Overview Guides Reference Samples Design & Quality Platform Android Studio Google Play Android Jetpack Docs Overview Guides Reference Samples Design & Quality Blog Save the date! Android Dev Summit is coming to Mountain View, CA on November 7-8, 2018. Overview Android Platform Android Support Library AndroidX Architecture Components Android Automotive Library Databinding Library Constraint Layout Library Material Components Test Support Library Wearable Library Play Billing Library Play Core Library Play Install Referrer Library Android Things Kotlin API Reference (Preview) Android Platform AndroidX Android Developers Docs Reference added in API level 1 Summary: Inherited XML Attrs | Inherited Constants | Inherited Fields | Ctors | Methods | Inherited Methods Button public class Button extends TextView java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.Button Known direct subclasses CompoundButton CompoundButton A button with two states, checked and unchecked. Known indirect subclasses CheckBox, RadioButton, Switch, ToggleButton CheckBox A checkbox is a specific type of two-states button that can be either checked or unchecked. RadioButton A radio button is a two-states button that can be either checked or unchecked. Switch A Switch is a two-state toggle switch widget that can select between two options. ToggleButton Displays checked/unchecked states as a button with a "light" indicator and by default accompanied with the text "ON" or "OFF". A user interface element the user can tap or click to perform an action. To display a button in an activity, add a button to the activity's layout XML file:  <Button
     android:id="@+id/button_id"
     android:layout_height="wrap_content"
     android:layout_width="wrap_content"
     android:text="@string/self_destruct" /> To specify an action when the button is pressed, set a click listener on the button object in the corresponding activity code:  public class MyActivity extends Activity {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);

         setContentView(R.layout.content_layout_id);

         final Button button = findViewById(R.id.button_id);
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 // Code here executes on main thread after user presses button
             }
         });
     }
 } The above snippet creates an instance of View.OnClickListener and wires the listener to the button using setOnClickListener(View.OnClickListener). As a result, the system executes the code you write in onClick(View) after the user presses the button. The system executes the code in onClick on the main thread. This means your onClick code must execute quickly to avoid delaying your app's response to further user actions. See Keeping Your App Responsive for more details. Every button is styled using the system's default button background, which is often different from one version of the platform to another. If you are not satisfied with the default button style, you can customize it. For more details and code samples, see the Styling Your Button guide. For all XML style attributes available on Button see Button Attributes, TextView Attributes, View Attributes. See the Styles and Themes guide to learn how to implement and organize overrides to style-related attributes. Summary Inherited XML attributes From class android.widget.TextView android:autoLink Controls whether links such as urls and email addresses are automatically found and converted to clickable links. android:autoSizeMaxTextSize The maximum text size constraint to be used when auto-sizing text. android:autoSizeMinTextSize The minimum text size constraint to be used when auto-sizing text. android:autoSizePresetSizes Resource array of dimensions to be used in conjunction with autoSizeTextType set to uniform. android:autoSizeStepGranularity Specify the auto-size step size if autoSizeTextType is set to uniform. android:autoSizeTextType Specify the type of auto-size. android:autoText If set, specifies that this TextView has a textual input method and automatically corrects some common spelling errors. android:breakStrategy Break strategy (control over paragraph layout). android:bufferType Determines the minimum type that getText() will return. android:capitalize If set, specifies that this TextView has a textual input method and should automatically capitalize what the user types. android:cursorVisible Makes the cursor visible (the default) or invisible. android:digits If set, specifies that this TextView has a numeric input method and that these specific characters are the ones that it will accept. android:drawableBottom The drawable to be drawn below the text. android:drawableEnd The drawable to be drawn to the end of the text. android:drawableLeft The drawable to be drawn to the left of the text. android:drawablePadding The padding between the drawables and the text. android:drawableRight The drawable to be drawn to the right of the text. android:drawableStart The drawable to be drawn to the start of the text. android:drawableTint Tint to apply to the compound (left, top, etc.) drawables. android:drawableTintMode Blending mode used to apply the compound (left, top, etc.) drawables tint. android:drawableTop The drawable to be drawn above the text. android:editable If set, specifies that this TextView has an input method. android:editorExtras Reference to an <input-extras> XML resource containing additional data to supply to an input method, which is private to the implementation of the input method. android:elegantTextHeight Elegant text height, especially for less compacted complex script text. android:ellipsize If set, causes words that are longer than the view is wide to be ellipsized instead of broken in the middle. android:ems Makes the TextView be exactly this many ems wide. android:fallbackLineSpacing Whether to respect the ascent and descent of the fallback fonts that are used in displaying the text. android:firstBaselineToTopHeight Distance from the top of the TextView to the first text baseline. android:fontFamily Font family (named by string or as a font resource reference) for the text. android:fontFeatureSettings Font feature settings. android:freezesText If set, the text view will include its current complete text inside of its frozen icicle in addition to meta-data such as the current cursor position. android:gravity Specifies how to align the text by the view's x- and/or y-axis when the text is smaller than the view. android:height Makes the TextView be exactly this tall. android:hint Hint text to display when the text is empty. android:hyphenationFrequency Frequency of automatic hyphenation. android:imeActionId Supply a value for EditorInfo.actionId used when an input method is connected to the text view. android:imeActionLabel Supply a value for EditorInfo.actionLabel used when an input method is connected to the text view. android:imeOptions Additional features you can enable in an IME associated with an editor to improve the integration with your application. android:includeFontPadding Leave enough room for ascenders and descenders instead of using the font ascent and descent strictly. android:inputMethod If set, specifies that this TextView should use the specified input method (specified by fully-qualified class name). android:inputType The type of data being placed in a text field, used to help an input method decide how to let the user enter text. android:justificationMode Mode for justification. android:lastBaselineToBottomHeight Distance from the bottom of the TextView to the last text baseline. android:letterSpacing Text letter-spacing. android:lineHeight Explicit height between lines of text. android:lineSpacingExtra Extra spacing between lines of text. android:lineSpacingMultiplier Extra spacing between lines of text, as a multiplier. android:lines Makes the TextView be exactly this many lines tall. android:linksClickable If set to false, keeps the movement method from being set to the link movement method even if autoLink causes links to be found. android:marqueeRepeatLimit The number of times to repeat the marquee animation. android:maxEms Makes the TextView be at most this many ems wide. android:maxHeight Makes the TextView be at most this many pixels tall. android:maxLength Set an input filter to constrain the text length to the specified number. android:maxLines Makes the TextView be at most this many lines tall. android:maxWidth Makes the TextView be at most this many pixels wide. android:minEms Makes the TextView be at least this many ems wide. android:minHeight Makes the TextView be at least this many pixels tall. android:minLines Makes the TextView be at least this many lines tall. android:minWidth Makes the TextView be at least this many pixels wide. android:numeric If set, specifies that this TextView has a numeric input method. android:password Whether the characters of the field are displayed as password dots instead of themselves. android:phoneNumber If set, specifies that this TextView has a phone number input method. android:privateImeOptions An addition content type description to supply to the input method attached to the text view, which is private to the implementation of the input method. android:scrollHorizontally Whether the text is allowed to be wider than the view (and therefore can be scrolled horizontally). android:selectAllOnFocus If the text is selectable, select it all when the view takes focus. android:shadowColor Place a blurred shadow of text underneath the text, drawn with the specified color. android:shadowDx Horizontal offset of the text shadow. android:shadowDy Vertical offset of the text shadow. android:shadowRadius Blur radius of the text shadow. android:singleLine Constrains the text to a single horizontally scrolling line instead of letting it wrap onto multiple lines, and advances focus instead of inserting a newline when you press the enter key. android:text Text to display. android:textAllCaps Present the text in ALL CAPS. android:textAppearance Base text color, typeface, size, and style. android:textColor Text color. android:textColorHighlight Color of the text selection highlight. android:textColorHint Color of the hint text. android:textColorLink Text color for links. android:textIsSelectable Indicates that the content of a non-editable text can be selected. android:textScaleX Sets the horizontal scaling factor for the text. android:textSize Size of the text. android:textStyle Style (normal, bold, italic, bold|italic) for the text. android:typeface Typeface (normal, sans, serif, monospace) for the text. android:width Makes the TextView be exactly this wide. From class android.view.View android:accessibilityHeading Whether or not this view is a heading for accessibility purposes. android:accessibilityLiveRegion Indicates to accessibility services whether the user should be notified when this view changes. android:accessibilityTraversalAfter Sets the id of a view after which this one is visited in accessibility traversal. android:accessibilityTraversalBefore Sets the id of a view before which this one is visited in accessibility traversal. android:alpha alpha property of the view, as a value between 0 (completely transparent) and 1 (completely opaque). android:autofillHints Describes the content of a view so that a autofill service can fill in the appropriate data. android:autofilledHighlight Drawable to be drawn over the view to mark it as autofilled May be a reference to another resource, in the form "@[+][package:]type/name" or a theme attribute in the form "?[package:]type/name". android:background A drawable to use as the background. android:backgroundTint Tint to apply to the background. android:backgroundTintMode Blending mode used to apply the background tint. android:clickable Defines whether this view reacts to click events. android:contentDescription Defines text that briefly describes content of the view. android:contextClickable Defines whether this view reacts to context click events. android:defaultFocusHighlightEnabled Whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. android:drawingCacheQuality Defines the quality of translucent drawing caches. android:duplicateParentState When this attribute is set to true, the view gets its drawable state (focused, pressed, etc.) from its direct parent rather than from itself. android:elevation base z depth of the view. android:fadeScrollbars Defines whether to fade out scrollbars when they are not in use. android:fadingEdgeLength Defines the length of the fading edges. android:filterTouchesWhenObscured Specifies whether to filter touches when the view's window is obscured by another visible window. android:fitsSystemWindows Boolean internal attribute to adjust view layout based on system windows such as the status bar. android:focusable Controls whether a view can take focus. android:focusableInTouchMode Boolean that controls whether a view can take focus while in touch mode. android:focusedByDefault Whether this view is a default-focus view. android:forceHasOverlappingRendering Whether this view has elements that may overlap when drawn. android:foreground Defines the drawable to draw over the content. android:foregroundGravity Defines the gravity to apply to the foreground drawable. android:foregroundTint Tint to apply to the foreground. android:foregroundTintMode Blending mode used to apply the foreground tint. android:hapticFeedbackEnabled Boolean that controls whether a view should have haptic feedback enabled for events such as long presses. android:id Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById(). android:importantForAccessibility Describes whether or not this view is important for accessibility. android:importantForAutofill Hints the Android System whether the view node associated with this View should be included in a view structure used for autofill purposes. android:isScrollContainer Set this if the view will serve as a scrolling container, meaning that it can be resized to shrink its overall window so that there will be space for an input method. android:keepScreenOn Controls whether the view's window should keep the screen on while visible. android:keyboardNavigationCluster Whether this view is a root of a keyboard navigation cluster. android:layerType Specifies the type of layer backing this view. android:layoutDirection Defines the direction of layout drawing. android:longClickable Defines whether this view reacts to long click events. android:minHeight Defines the minimum height of the view. android:minWidth Defines the minimum width of the view. android:nextClusterForward Defines the next keyboard navigation cluster. android:nextFocusDown Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusForward Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusLeft Defines the next view to give focus to when the next focus is View.FOCUS_LEFT. android:nextFocusRight Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:nextFocusUp Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed. android:onClick Name of the method in this View's context to invoke when the view is clicked. android:outlineAmbientShadowColor Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. android:outlineSpotShadowColor Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. android:padding Sets the padding, in pixels, of all four edges. android:paddingBottom Sets the padding, in pixels, of the bottom edge; see R.attr.padding. android:paddingEnd Sets the padding, in pixels, of the end edge; see R.attr.padding. android:paddingHorizontal Sets the padding, in pixels, of the left and right edges; see R.attr.padding. android:paddingLeft Sets the padding, in pixels, of the left edge; see R.attr.padding. android:paddingRight Sets the padding, in pixels, of the right edge; see R.attr.padding. android:paddingStart Sets the padding, in pixels, of the start edge; see R.attr.padding. android:paddingTop Sets the padding, in pixels, of the top edge; see R.attr.padding. android:paddingVertical Sets the padding, in pixels, of the top and bottom edges; see R.attr.padding. android:requiresFadingEdge Defines which edges should be faded on scrolling. android:rotation rotation of the view, in degrees. android:rotationX rotation of the view around the x axis, in degrees. android:rotationY rotation of the view around the y axis, in degrees. android:saveEnabled If false, no state will be saved for this view when it is being frozen. android:scaleX scale of the view in the x direction. android:scaleY scale of the view in the y direction. android:scrollIndicators Defines which scroll indicators should be displayed when the view can be scrolled. android:scrollX The initial horizontal scroll offset, in pixels. android:scrollY The initial vertical scroll offset, in pixels. android:scrollbarAlwaysDrawHorizontalTrack Defines whether the horizontal scrollbar track should always be drawn. android:scrollbarAlwaysDrawVerticalTrack Defines whether the vertical scrollbar track should always be drawn. android:scrollbarDefaultDelayBeforeFade Defines the delay in milliseconds that a scrollbar waits before fade out. android:scrollbarFadeDuration Defines the delay in milliseconds that a scrollbar takes to fade out. android:scrollbarSize Sets the width of vertical scrollbars and height of horizontal scrollbars. android:scrollbarStyle Controls the scrollbar style and position. android:scrollbarThumbHorizontal Defines the horizontal scrollbar thumb drawable. android:scrollbarThumbVertical Defines the vertical scrollbar thumb drawable. android:scrollbarTrackHorizontal Defines the horizontal scrollbar track drawable. android:scrollbarTrackVertical Defines the vertical scrollbar track drawable. android:scrollbars Defines which scrollbars should be displayed on scrolling or not. android:soundEffectsEnabled Boolean that controls whether a view should have sound effects enabled for events such as clicking and touching. android:stateListAnimator Sets the state-based animator for the View. android:tag Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag(). android:textAlignment Defines the alignment of the text. android:textDirection Defines the direction of the text. android:theme Specifies a theme override for a view. android:tooltipText Defines text displayed in a small popup window on hover or long press. android:transformPivotX x location of the pivot point around which the view will rotate and scale. android:transformPivotY y location of the pivot point around which the view will rotate and scale. android:transitionName Names a View such that it can be identified for Transitions. android:translationX translation in x of the view. android:translationY translation in y of the view. android:translationZ translation in z of the view. android:visibility Controls the initial visibility of the view. Inherited constants From class android.widget.TextView int AUTO_SIZE_TEXT_TYPE_NONE The TextView does not auto-size text (default). int AUTO_SIZE_TEXT_TYPE_UNIFORM The TextView scales text size both horizontally and vertically to fit within the container. From class android.view.View int ACCESSIBILITY_LIVE_REGION_ASSERTIVE Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view. int ACCESSIBILITY_LIVE_REGION_NONE Live region mode specifying that accessibility services should not automatically announce changes to this view. int ACCESSIBILITY_LIVE_REGION_POLITE Live region mode specifying that accessibility services should announce changes to this view. int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE Hint indicating that this view can be autofilled with a credit card expiration date. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY Hint indicating that this view can be autofilled with a credit card expiration day. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH Hint indicating that this view can be autofilled with a credit card expiration month. String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR Hint indicating that this view can be autofilled with a credit card expiration year. String AUTOFILL_HINT_CREDIT_CARD_NUMBER Hint indicating that this view can be autofilled with a credit card number. String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE Hint indicating that this view can be autofilled with a credit card security code. String AUTOFILL_HINT_EMAIL_ADDRESS Hint indicating that this view can be autofilled with an email address. String AUTOFILL_HINT_NAME Hint indicating that this view can be autofilled with a user's real name. String AUTOFILL_HINT_PASSWORD Hint indicating that this view can be autofilled with a password. String AUTOFILL_HINT_PHONE Hint indicating that this view can be autofilled with a phone number. String AUTOFILL_HINT_POSTAL_ADDRESS Hint indicating that this view can be autofilled with a postal address. String AUTOFILL_HINT_POSTAL_CODE Hint indicating that this view can be autofilled with a postal code. String AUTOFILL_HINT_USERNAME Hint indicating that this view can be autofilled with a username. int AUTOFILL_TYPE_DATE Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime(). int AUTOFILL_TYPE_LIST Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0). int AUTOFILL_TYPE_NONE Autofill type for views that cannot be autofilled. int AUTOFILL_TYPE_TEXT Autofill type for a text field, which is filled by a CharSequence. int AUTOFILL_TYPE_TOGGLE Autofill type for a togglable field, which is filled by a boolean. int DRAG_FLAG_GLOBAL Flag indicating that a drag can cross window boundaries. int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}. int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI. int DRAG_FLAG_GLOBAL_URI_READ When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_GLOBAL_URI_WRITE When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object. int DRAG_FLAG_OPAQUE Flag indicating that the drag shadow will be opaque. int DRAWING_CACHE_QUALITY_AUTO This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_HIGH This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int DRAWING_CACHE_QUALITY_LOW This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int FIND_VIEWS_WITH_CONTENT_DESCRIPTION Find find views that contain the specified content description. int FIND_VIEWS_WITH_TEXT Find views that render the specified text. int FOCUSABLE This view wants keystrokes. int FOCUSABLES_ALL View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode. int FOCUSABLES_TOUCH_MODE View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode. int FOCUSABLE_AUTO This view determines focusability automatically. int FOCUS_BACKWARD Use with focusSearch(int). int FOCUS_DOWN Use with focusSearch(int). int FOCUS_FORWARD Use with focusSearch(int). int FOCUS_LEFT Use with focusSearch(int). int FOCUS_RIGHT Use with focusSearch(int). int FOCUS_UP Use with focusSearch(int). int GONE This view is invisible, and it doesn't take any space for layout purposes. int HAPTIC_FEEDBACK_ENABLED View flag indicating whether this view should have haptic feedback enabled for events such as long presses. int IMPORTANT_FOR_ACCESSIBILITY_AUTO Automatically determine whether a view is important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO The view is not important for accessibility. int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS The view is not important for accessibility, nor are any of its descendant views. int IMPORTANT_FOR_ACCESSIBILITY_YES The view is important for accessibility. int IMPORTANT_FOR_AUTOFILL_AUTO Automatically determine whether a view is important for autofill. int IMPORTANT_FOR_AUTOFILL_NO The view is not important for autofill, but its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS The view is not important for autofill, and its children (if any) will not be traversed. int IMPORTANT_FOR_AUTOFILL_YES The view is important for autofill, and its children (if any) will be traversed. int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS The view is important for autofill, but its children (if any) will not be traversed. int INVISIBLE This view is invisible, but it still takes up space for layout purposes. int KEEP_SCREEN_ON View flag indicating that the screen should remain on while the window containing this view is visible to the user. int LAYER_TYPE_HARDWARE Indicates that the view has a hardware layer. int LAYER_TYPE_NONE Indicates that the view does not have a layer. int LAYER_TYPE_SOFTWARE Indicates that the view has a software layer. int LAYOUT_DIRECTION_INHERIT Horizontal layout direction of this view is inherited from its parent. int LAYOUT_DIRECTION_LOCALE Horizontal layout direction of this view is from deduced from the default language script for the locale. int LAYOUT_DIRECTION_LTR Horizontal layout direction of this view is from Left to Right. int LAYOUT_DIRECTION_RTL Horizontal layout direction of this view is from Right to Left. int MEASURED_HEIGHT_STATE_SHIFT Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int). int MEASURED_SIZE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size. int MEASURED_STATE_MASK Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits. int MEASURED_STATE_TOO_SMALL Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have. int NOT_FOCUSABLE This view does not want keystrokes. int NO_ID Used to mark a View that has no ID. int OVER_SCROLL_ALWAYS Always allow a user to over-scroll this view, provided it is a view that can scroll. int OVER_SCROLL_IF_CONTENT_SCROLLS Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll. int OVER_SCROLL_NEVER Never allow a user to over-scroll this view. int SCREEN_STATE_OFF Indicates that the screen has changed state and is now off. int SCREEN_STATE_ON Indicates that the screen has changed state and is now on. int SCROLLBARS_INSIDE_INSET The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view. int SCROLLBARS_INSIDE_OVERLAY The scrollbar style to display the scrollbars inside the content area, without increasing the padding. int SCROLLBARS_OUTSIDE_INSET The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view. int SCROLLBARS_OUTSIDE_OVERLAY The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding. int SCROLLBAR_POSITION_DEFAULT Position the scroll bar at the default position as determined by the system. int SCROLLBAR_POSITION_LEFT Position the scroll bar along the left edge. int SCROLLBAR_POSITION_RIGHT Position the scroll bar along the right edge. int SCROLL_AXIS_HORIZONTAL Indicates scrolling along the horizontal axis. int SCROLL_AXIS_NONE Indicates no axis of view scrolling. int SCROLL_AXIS_VERTICAL Indicates scrolling along the vertical axis. int SCROLL_INDICATOR_BOTTOM Scroll indicator direction for the bottom edge of the view. int SCROLL_INDICATOR_END Scroll indicator direction for the ending edge of the view. int SCROLL_INDICATOR_LEFT Scroll indicator direction for the left edge of the view. int SCROLL_INDICATOR_RIGHT Scroll indicator direction for the right edge of the view. int SCROLL_INDICATOR_START Scroll indicator direction for the starting edge of the view. int SCROLL_INDICATOR_TOP Scroll indicator direction for the top edge of the view. int SOUND_EFFECTS_ENABLED View flag indicating whether this view should have sound effects enabled for events such as clicking and touching. int STATUS_BAR_HIDDEN This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead. int STATUS_BAR_VISIBLE This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead. int SYSTEM_UI_FLAG_FULLSCREEN Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application. int SYSTEM_UI_FLAG_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden. int SYSTEM_UI_FLAG_IMMERSIVE Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_IMMERSIVE_STICKY Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION. int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't. int SYSTEM_UI_FLAG_LAYOUT_STABLE Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect). int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds. int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds. int SYSTEM_UI_FLAG_LOW_PROFILE Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode. int SYSTEM_UI_FLAG_VISIBLE Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default). int SYSTEM_UI_LAYOUT_FLAGS Flags that can impact the layout in relation to system UI. int TEXT_ALIGNMENT_CENTER Center the paragraph, e.g. int TEXT_ALIGNMENT_GRAVITY Default for the root view. int TEXT_ALIGNMENT_INHERIT Default text alignment. int TEXT_ALIGNMENT_TEXT_END Align to the end of the paragraph, e.g. int TEXT_ALIGNMENT_TEXT_START Align to the start of the paragraph, e.g. int TEXT_ALIGNMENT_VIEW_END Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise. int TEXT_ALIGNMENT_VIEW_START Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise. int TEXT_DIRECTION_ANY_RTL Text direction is using "any-RTL" algorithm. int TEXT_DIRECTION_FIRST_STRONG Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_LTR Text direction is using "first strong algorithm". int TEXT_DIRECTION_FIRST_STRONG_RTL Text direction is using "first strong algorithm". int TEXT_DIRECTION_INHERIT Text direction is inherited through ViewGroup int TEXT_DIRECTION_LOCALE Text direction is coming from the system Locale. int TEXT_DIRECTION_LTR Text direction is forced to LTR. int TEXT_DIRECTION_RTL Text direction is forced to RTL. String VIEW_LOG_TAG The logging tag used by this class with android.util.Log. int VISIBLE This view is visible. Inherited fields From class android.view.View public static final Property<View, Float> ALPHA A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods. protected static final int[] EMPTY_STATE_SET Indicates the view has no states set. protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is enabled, focused and selected. protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused, selected and its window has the focus. protected static final int[] ENABLED_FOCUSED_STATE_SET Indicates the view is enabled and has the focus. protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, focused and its window has the focus. protected static final int[] ENABLED_SELECTED_STATE_SET Indicates the view is enabled and selected. protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled, selected and its window has the focus. protected static final int[] ENABLED_STATE_SET Indicates the view is enabled. protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is enabled and that its window has focus. protected static final int[] FOCUSED_SELECTED_STATE_SET Indicates the view is focused and selected. protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is focused, selected and its window has the focus. protected static final int[] FOCUSED_STATE_SET Indicates the view is focused. protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view has the focus and that its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, enabled, focused and selected. protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET Indicates the view is pressed, enabled and focused. protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, focused and its window has the focus. protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET Indicates the view is pressed, enabled and selected. protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled, selected and its window has the focus. protected static final int[] PRESSED_ENABLED_STATE_SET Indicates the view is pressed and enabled. protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, enabled and its window has the focus. protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET Indicates the view is pressed, focused and selected. protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused, selected and its window has the focus. protected static final int[] PRESSED_FOCUSED_STATE_SET Indicates the view is pressed and focused. protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, focused and its window has the focus. protected static final int[] PRESSED_SELECTED_STATE_SET Indicates the view is pressed and selected. protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed, selected and its window has the focus. protected static final int[] PRESSED_STATE_SET Indicates the view is pressed. protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET Indicates the view is pressed and its window has the focus. public static final Property<View, Float> ROTATION A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods. public static final Property<View, Float> ROTATION_X A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods. public static final Property<View, Float> ROTATION_Y A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods. public static final Property<View, Float> SCALE_X A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods. public static final Property<View, Float> SCALE_Y A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods. protected static final int[] SELECTED_STATE_SET Indicates the view is selected. protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET Indicates the view is selected and that its window has the focus. public static final Property<View, Float> TRANSLATION_X A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods. public static final Property<View, Float> TRANSLATION_Y A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods. public static final Property<View, Float> TRANSLATION_Z A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods. protected static final int[] WINDOW_FOCUSED_STATE_SET Indicates the view's window has focus. public static final Property<View, Float> X A Property wrapper around the x functionality handled by the setX(float) and getX() methods. public static final Property<View, Float> Y A Property wrapper around the y functionality handled by the setY(float) and getY() methods. public static final Property<View, Float> Z A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods. Public constructors Button(Context context) Simple constructor to use when creating a button from code. Button(Context context, AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. Button(Context context, AttributeSet attrs, int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. Button(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. Public methods CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. Inherited methods From class android.widget.TextView void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addTextChangedListener(TextWatcher watcher) Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. final void append(CharSequence text) Convenience method to append the specified text to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void append(CharSequence text, int start, int end) Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void beginBatchEdit() boolean bringPointIntoView(int offset) Move the point, specified by the offset, into the view if it is needed. void cancelLongPress() Cancels a pending long press. void clearComposingText() Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. void debug(int depth) Prints information about this view in the log output, with the tag VIEW_LOG_TAG. boolean didTouchFocusSelect() Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. void endBatchEdit() boolean extractText(ExtractedTextRequest request, ExtractedText outText) If this TextView contains editable content, extract a portion of it based on the information in request in to outText. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. final int getAutoLinkMask() Gets the autolink mask of the text. int getAutoSizeMaxTextSize() int getAutoSizeMinTextSize() int getAutoSizeStepGranularity() int[] getAutoSizeTextAvailableSizes() int getAutoSizeTextType() Returns the type of auto-size set for this widget. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the TextView's current text for AutoFill. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. int getBreakStrategy() Gets the current strategy for breaking paragraphs into lines. int getCompoundDrawablePadding() Returns the padding between the compound drawables and the text. ColorStateList getCompoundDrawableTintList() PorterDuff.Mode getCompoundDrawableTintMode() Returns the blending mode used to apply the tint to the compound drawables, if specified. Drawable[] getCompoundDrawables() Returns drawables for the left, top, right, and bottom borders. Drawable[] getCompoundDrawablesRelative() Returns drawables for the start, top, end, and bottom borders. int getCompoundPaddingBottom() Returns the bottom padding of the view, plus space for the bottom Drawable if any. int getCompoundPaddingEnd() Returns the end padding of the view, plus space for the end Drawable if any. int getCompoundPaddingLeft() Returns the left padding of the view, plus space for the left Drawable if any. int getCompoundPaddingRight() Returns the right padding of the view, plus space for the right Drawable if any. int getCompoundPaddingStart() Returns the start padding of the view, plus space for the start Drawable if any. int getCompoundPaddingTop() Returns the top padding of the view, plus space for the top Drawable if any. final int getCurrentHintTextColor() Return the current color selected to paint the hint text. final int getCurrentTextColor() Return the current color selected for normal text. ActionMode.Callback getCustomInsertionActionModeCallback() Retrieves the value set in setCustomInsertionActionModeCallback(ActionMode.Callback). ActionMode.Callback getCustomSelectionActionModeCallback() Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback). boolean getDefaultEditable() Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options. MovementMethod getDefaultMovementMethod() Subclasses override this to specify a default movement method. Editable getEditableText() Return the text that TextView is displaying as an Editable object. TextUtils.TruncateAt getEllipsize() Returns where, if anywhere, words that are longer than the view is wide should be ellipsized. CharSequence getError() Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input. int getExtendedPaddingBottom() Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. int getExtendedPaddingTop() Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. InputFilter[] getFilters() Returns the current list of input filters. int getFirstBaselineToTopHeight() Returns the distance between the first text baseline and the top of this TextView. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. String getFontFeatureSettings() Returns the font feature settings. String getFontVariationSettings() Returns the font variation settings. boolean getFreezesText() Return whether this text view is including its entire text contents in frozen icicles. int getGravity() Returns the horizontal and vertical alignment of this TextView. int getHighlightColor() CharSequence getHint() Returns the hint that is displayed when the text of the TextView is empty. final ColorStateList getHintTextColors() int getHyphenationFrequency() Gets the current frequency of automatic hyphenation to be used when determining word breaks. int getImeActionId() Get the IME action ID previous set with setImeActionLabel(CharSequence, int). CharSequence getImeActionLabel() Get the IME action label previous set with setImeActionLabel(CharSequence, int). LocaleList getImeHintLocales() int getImeOptions() Get the type of the Input Method Editor (IME). boolean getIncludeFontPadding() Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. Bundle getInputExtras(boolean create) Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. int getInputType() Get the type of the editable content. int getJustificationMode() final KeyListener getKeyListener() Gets the current KeyListener for the TextView. int getLastBaselineToBottomHeight() Returns the distance between the last text baseline and the bottom of this TextView. final Layout getLayout() Gets the Layout that is currently being used to display the text. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. float getLetterSpacing() Gets the text letter-space value, which determines the spacing between characters. int getLineBounds(int line, Rect bounds) Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. int getLineCount() Return the number of lines of text, or 0 if the internal Layout has not been built. int getLineHeight() Gets the vertical distance between lines of text, in pixels. float getLineSpacingExtra() Gets the line spacing extra space float getLineSpacingMultiplier() Gets the line spacing multiplier final ColorStateList getLinkTextColors() final boolean getLinksClickable() Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). int getMarqueeRepeatLimit() Gets the number of times the marquee animation is repeated. int getMaxEms() Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth(int) or setWidth(int). int getMaxHeight() Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines(int) or setLines(int). int getMaxLines() Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight(int) or setHeight(int). int getMaxWidth() Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms(int) or setEms(int). int getMinEms() Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth(int) or setWidth(int). int getMinHeight() Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines(int) or setLines(int). int getMinLines() Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight(int) or setHeight(int). int getMinWidth() Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms(int) or setEms(int). final MovementMethod getMovementMethod() Gets the MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality. int getOffsetForPosition(float x, float y) Get the character offset closest to the specified absolute position. TextPaint getPaint() Gets the TextPaint used for the text. int getPaintFlags() Gets the flags on the Paint being used to display the text. String getPrivateImeOptions() Get the private type of the content. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. int getSelectionEnd() Convenience for Selection.getSelectionEnd(CharSequence). int getSelectionStart() Convenience for Selection.getSelectionStart(CharSequence). int getShadowColor() Gets the color of the shadow layer. float getShadowDx() float getShadowDy() Gets the vertical offset of the shadow layer. float getShadowRadius() Gets the radius of the shadow layer. final boolean getShowSoftInputOnFocus() Returns whether the soft input method will be made visible when this TextView gets focused. CharSequence getText() Return the text that TextView is displaying. TextClassifier getTextClassifier() Returns the TextClassifier used by this TextView. final ColorStateList getTextColors() Gets the text colors for the different states (normal, selected, focused) of the TextView. Locale getTextLocale() Get the default primary Locale of the text in this TextView. LocaleList getTextLocales() Get the default LocaleList of the text in this TextView. PrecomputedText.Params getTextMetricsParams() Gets the parameters for text layout precomputation, for use with PrecomputedText. float getTextScaleX() Gets the extent by which text should be stretched horizontally. float getTextSize() int getTopPaddingOffset() Amount by which to extend the top fading region. int getTotalPaddingBottom() Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. int getTotalPaddingEnd() Returns the total end padding of the view, including the end Drawable if any. int getTotalPaddingLeft() Returns the total left padding of the view, including the left Drawable if any. int getTotalPaddingRight() Returns the total right padding of the view, including the right Drawable if any. int getTotalPaddingStart() Returns the total start padding of the view, including the start Drawable if any. int getTotalPaddingTop() Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. final TransformationMethod getTransformationMethod() Gets the current TransformationMethod for the TextView. Typeface getTypeface() Gets the current Typeface that is used to style the text. URLSpan[] getUrls() Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasSelection() Return true iff there is a selection inside this text view. void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. boolean isAllCaps() Checks whether the transformation method applied to this TextView is set to ALL CAPS. boolean isCursorVisible() boolean isElegantTextHeight() Get the value of the TextView's elegant height metrics flag. boolean isFallbackLineSpacing() boolean isInputMethodTarget() Returns whether this text view is a current input method target. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isSuggestionsEnabled() Return whether or not suggestions are enabled on this TextView. boolean isTextSelectable() Returns the state of the textIsSelectable flag (See setTextIsSelectable()). void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. int length() Returns the length, in characters, of the text managed by this TextView boolean moveCursorToVisibleOffset() Move the cursor, if needed, so that it is at an offset that is visible to the user. void onAttachedToWindow() This is called when the view is attached to a window. void onBeginBatchEdit() Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit(). boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onCommitCompletion(CompletionInfo text) Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). void onCommitCorrection(CorrectionInfo info) Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling InputConnection.commitCorrection(). void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onEditorAction(int actionCode) Called when an attached input method calls InputConnection.performEditorAction() for this text view. void onEndBatchEdit() Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit(). void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. boolean onPrivateIMECommand(String action, Bundle data) Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand(). void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int horiz, int vert, int oldHoriz, int oldVert) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). void onSelectionChanged(int selStart, int selEnd) This method is called when the selection has changed, in case any subclasses would like to know. void onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter) This method is called when the text is changed, in case any subclasses would like to know. boolean onTextContextMenuItem(int id) Called when a context menu option for the text view is selected. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void removeTextChangedListener(TextWatcher watcher) Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAllCaps(boolean allCaps) Sets the properties of this field to transform input to ALL CAPS display. final void setAutoLinkMask(int mask) Sets the autolink mask of the text. void setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. void setAutoSizeTextTypeWithDefaults(int autoSizeTextType) Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration. void setBreakStrategy(int breakStrategy) Sets the break strategy for breaking paragraphs into lines. void setCompoundDrawablePadding(int pad) Sets the size of the padding between the compound drawables and the text. void setCompoundDrawableTintList(ColorStateList tint) Applies a tint to the compound drawables. void setCompoundDrawableTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList(ColorStateList) to the compound drawables. void setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesRelative(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable start, Drawable top, Drawable end, Drawable bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesRelativeWithIntrinsicBounds(int start, int top, int end, int bottom) Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom) Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. void setCursorVisible(boolean visible) Set whether the cursor is visible. void setCustomInsertionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View. void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. final void setEditableFactory(Editable.Factory factory) Sets the Factory used to create new Editables. void setElegantTextHeight(boolean elegant) Set the TextView's elegant height metrics flag. void setEllipsize(TextUtils.TruncateAt where) Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. void setEms(int ems) Sets the width of the TextView to be exactly ems wide. void setEnabled(boolean enabled) Set the enabled state of this view. void setError(CharSequence error) Sets the right-hand compound drawable of the TextView to the "error" icon and sets an error message that will be displayed in a popup when the TextView has focus. void setError(CharSequence error, Drawable icon) Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. void setExtractedText(ExtractedText text) Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText). void setFallbackLineSpacing(boolean enabled) Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). void setFilters(InputFilter[] filters) Sets the list of input filters that will be used if the buffer is Editable. void setFirstBaselineToTopHeight(int firstBaselineToTopHeight) Updates the top padding of the TextView so that firstBaselineToTopHeight is equal to the distance between the firt text baseline and the top of this TextView. void setFontFeatureSettings(String fontFeatureSettings) Sets font feature settings. boolean setFontVariationSettings(String fontVariationSettings) Sets TrueType or OpenType font variation settings. boolean setFrame(int l, int t, int r, int b) Assign a size and position to this view. void setFreezesText(boolean freezesText) Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. void setGravity(int gravity) Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. void setHeight(int pixels) Sets the height of the TextView to be exactly pixels tall. void setHighlightColor(int color) Sets the color used to display the selection highlight. final void setHint(CharSequence hint) Sets the text to be displayed when the text of the TextView is empty. final void setHint(int resid) Sets the text to be displayed when the text of the TextView is empty, from a resource. final void setHintTextColor(ColorStateList colors) Sets the color of the hint text. final void setHintTextColor(int color) Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. void setHorizontallyScrolling(boolean whether) Sets whether the text should be allowed to be wider than the View is. void setHyphenationFrequency(int hyphenationFrequency) Sets the frequency of automatic hyphenation to use when determining word breaks. void setImeActionLabel(CharSequence label, int actionId) Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo.actionLabel and EditorInfo.actionId when it has focus. void setImeHintLocales(LocaleList hintLocales) Change "hint" locales associated with the text view, which will be reported to an IME with EditorInfo.hintLocales when it has focus. void setImeOptions(int imeOptions) Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with EditorInfo.imeOptions when it has focus. void setIncludeFontPadding(boolean includepad) Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. void setInputExtras(int xmlResId) Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection. void setInputType(int type) Set the type of the content with a constant as defined for EditorInfo.inputType. void setJustificationMode(int justificationMode) Set justification mode. void setKeyListener(KeyListener input) Sets the key listener to be used with this TextView. void setLastBaselineToBottomHeight(int lastBaselineToBottomHeight) Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is equal to the distance between the last text baseline and the bottom of this TextView. void setLetterSpacing(float letterSpacing) Sets text letter-spacing in em units. void setLineHeight(int lineHeight) Sets an explicit line height for this TextView. void setLineSpacing(float add, float mult) Sets line spacing for this TextView. void setLines(int lines) Sets the height of the TextView to be exactly lines tall. final void setLinkTextColor(ColorStateList colors) Sets the color of links in the text. final void setLinkTextColor(int color) Sets the color of links in the text. final void setLinksClickable(boolean whether) Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). void setMarqueeRepeatLimit(int marqueeLimit) Sets how many times to repeat the marquee animation. void setMaxEms(int maxEms) Sets the width of the TextView to be at most maxEms wide. void setMaxHeight(int maxPixels) Sets the height of the TextView to be at most maxPixels tall. void setMaxLines(int maxLines) Sets the height of the TextView to be at most maxLines tall. void setMaxWidth(int maxPixels) Sets the width of the TextView to be at most maxPixels wide. void setMinEms(int minEms) Sets the width of the TextView to be at least minEms wide. void setMinHeight(int minPixels) Sets the height of the TextView to be at least minPixels tall. void setMinLines(int minLines) Sets the height of the TextView to be at least minLines tall. void setMinWidth(int minPixels) Sets the width of the TextView to be at least minPixels wide. final void setMovementMethod(MovementMethod movement) Sets the MovementMethod for handling arrow key movement for this TextView. void setOnEditorActionListener(TextView.OnEditorActionListener l) Set a special listener to be called when an action is performed on the text view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPaintFlags(int flags) Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. void setPrivateImeOptions(String type) Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection. void setRawInputType(int type) Directly change the content type integer of the text view, without modifying any other state. void setScroller(Scroller s) Sets the Scroller used for producing a scrolling animation void setSelectAllOnFocus(boolean selectAllOnFocus) Set the TextView so that when it takes focus, all the text is selected. void setSelected(boolean selected) Changes the selection state of this view. void setShadowLayer(float radius, float dx, float dy, int color) Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. final void setShowSoftInputOnFocus(boolean show) Sets whether the soft input method will be made visible when this TextView gets focused. void setSingleLine(boolean singleLine) If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. void setSingleLine() Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. final void setSpannableFactory(Spannable.Factory factory) Sets the Factory used to create new Spannables. final void setText(int resid) Sets the text to be displayed using a string resource identifier. final void setText(CharSequence text) Sets the text to be displayed. void setText(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType. final void setText(int resid, TextView.BufferType type) Sets the text to be displayed using a string resource identifier and the TextView.BufferType. final void setText(char[] text, int start, int len) Sets the TextView to display the specified slice of the specified char array. void setTextAppearance(Context context, int resId) This method was deprecated in API level 23. Use setTextAppearance(int) instead. void setTextAppearance(int resId) Sets the text appearance from the specified style resource. void setTextClassifier(TextClassifier textClassifier) Sets the TextClassifier for this TextView. void setTextColor(int color) Sets the text color for all the states (normal, selected, focused) to be this color. void setTextColor(ColorStateList colors) Sets the text color. void setTextIsSelectable(boolean selectable) Sets whether the content of this view is selectable by the user. final void setTextKeepState(CharSequence text) Sets the text to be displayed but retains the cursor position. final void setTextKeepState(CharSequence text, TextView.BufferType type) Sets the text to be displayed and the TextView.BufferType but retains the cursor position. void setTextLocale(Locale locale) Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale. void setTextLocales(LocaleList locales) Set the default LocaleList of the text in this TextView to the given value. void setTextMetricsParams(PrecomputedText.Params params) Apply the text layout parameter. void setTextScaleX(float size) Sets the horizontal scale factor for text. void setTextSize(int unit, float size) Set the default text size to a given unit and value. void setTextSize(float size) Set the default text size to the given value, interpreted as "scaled pixel" units. final void setTransformationMethod(TransformationMethod method) Sets the transformation that is applied to the text that this TextView is displaying. void setTypeface(Typeface tf) Sets the typeface and style in which the text should be displayed. void setTypeface(Typeface tf, int style) Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. void setWidth(int pixels) Sets the width of the TextView to be exactly pixels wide. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. From class android.view.View void addChildrenForAccessibility(ArrayList<View> outChildren) Adds the children of this View relevant for accessibility to the given list as output. void addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments) Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data. void addFocusables(ArrayList<View> views, int direction) Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addFocusables(ArrayList<View> views, int direction, int focusableMode) Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. void addKeyboardNavigationClusters(Collection<View> views, int direction) Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views. void addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Add a listener for attach state changes. void addOnLayoutChangeListener(View.OnLayoutChangeListener listener) Add a listener that will be called when the bounds of the view change due to layout processing. void addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Adds a listener which will receive unhandled KeyEvents. void addTouchables(ArrayList<View> views) Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. ViewPropertyAnimator animate() This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. void announceForAccessibility(CharSequence text) Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit. void autofill(AutofillValue value) Automatically fills the content of this view with the value. void autofill(SparseArray<AutofillValue> values) Automatically fills the content of the virtual children within this view. boolean awakenScrollBars(int startDelay, boolean invalidate) Trigger the scrollbars to draw. boolean awakenScrollBars(int startDelay) Trigger the scrollbars to draw. boolean awakenScrollBars() Trigger the scrollbars to draw. void bringToFront() Change the view's z order in the tree, so it's on top of other sibling views. void buildDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void buildLayer() Forces this view's layer to be created and this view to be rendered into its layer. boolean callOnClick() Directly call any attached OnClickListener. boolean canResolveLayoutDirection() Check if layout direction resolution can be done. boolean canResolveTextAlignment() Check if text alignment resolution can be done. boolean canResolveTextDirection() Check if text direction resolution can be done. boolean canScrollHorizontally(int direction) Check if this view can be scrolled horizontally in a certain direction. boolean canScrollVertically(int direction) Check if this view can be scrolled vertically in a certain direction. final void cancelDragAndDrop() Cancels an ongoing drag and drop operation. void cancelLongPress() Cancels a pending long press. final void cancelPendingInputEvents() Cancel any deferred high-level input events that were previously posted to the event queue. boolean checkInputConnectionProxy(View view) Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. void clearAnimation() Cancels any animations for this view. void clearFocus() Called when this view wants to give up focus. static int combineMeasuredStates(int curState, int newState) Merge two states as returned by getMeasuredState(). int computeHorizontalScrollExtent() Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollOffset() Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. int computeHorizontalScrollRange() Compute the horizontal range that the horizontal scrollbar represents. void computeScroll() Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. WindowInsets computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets) Compute insets that should be consumed by this view and the ones that should propagate to those under it. int computeVerticalScrollExtent() Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. int computeVerticalScrollOffset() Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. int computeVerticalScrollRange() Compute the vertical range that the vertical scrollbar represents. AccessibilityNodeInfo createAccessibilityNodeInfo() Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService. void createContextMenu(ContextMenu menu) Show the context menu for this view. void destroyDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. WindowInsets dispatchApplyWindowInsets(WindowInsets insets) Request to apply the given window insets to this view or another view in its subtree. boolean dispatchCapturedPointerEvent(MotionEvent event) Pass a captured pointer event down to the focused view. void dispatchConfigurationChanged(Configuration newConfig) Dispatch a notification about a resource configuration change down the view hierarchy. void dispatchDisplayHint(int hint) Dispatch a hint about whether this view is displayed. boolean dispatchDragEvent(DragEvent event) Detects if this View is enabled and has a drag event listener. void dispatchDraw(Canvas canvas) Called by draw to draw the child views. void dispatchDrawableHotspotChanged(float x, float y) Dispatches drawableHotspotChanged to all of this View's children. void dispatchFinishTemporaryDetach() Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View. boolean dispatchGenericFocusedEvent(MotionEvent event) Dispatch a generic motion event to the currently focused view. boolean dispatchGenericMotionEvent(MotionEvent event) Dispatch a generic motion event. boolean dispatchGenericPointerEvent(MotionEvent event) Dispatch a generic motion event to the view under the first pointer. boolean dispatchHoverEvent(MotionEvent event) Dispatch a hover event. boolean dispatchKeyEvent(KeyEvent event) Dispatch a key event to the next view on the focus path. boolean dispatchKeyEventPreIme(KeyEvent event) Dispatch a key event before it is processed by any input method associated with the view hierarchy. boolean dispatchKeyShortcutEvent(KeyEvent event) Dispatches a key shortcut event. boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) Dispatch a fling to a nested scrolling parent. boolean dispatchNestedPreFling(float velocityX, float velocityY) Dispatch a fling to a nested scrolling parent before it is processed by this view. boolean dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments) Report an accessibility action to this view's parents for delegated processing. boolean dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress before this view consumes any portion of it. boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) Dispatch one step of a nested scroll in progress. void dispatchPointerCaptureChanged(boolean hasCapture) boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. void dispatchProvideAutofillStructure(ViewStructure structure, int flags) Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. void dispatchProvideStructure(ViewStructure structure) Dispatch creation of ViewStructure down the hierarchy. void dispatchRestoreInstanceState(SparseArray<Parcelable> container) Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children. void dispatchSaveInstanceState(SparseArray<Parcelable> container) Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children. void dispatchSetActivated(boolean activated) Dispatch setActivated to all of this View's children. void dispatchSetPressed(boolean pressed) Dispatch setPressed to all of this View's children. void dispatchSetSelected(boolean selected) Dispatch setSelected to all of this View's children. void dispatchStartTemporaryDetach() Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View. void dispatchSystemUiVisibilityChanged(int visibility) Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. boolean dispatchTouchEvent(MotionEvent event) Pass the touch screen motion event down to the target view, or this view if it is the target. boolean dispatchTrackballEvent(MotionEvent event) Pass a trackball motion event down to the focused view. boolean dispatchUnhandledMove(View focused, int direction) This method is the last chance for the focused view and its ancestors to respond to an arrow key. void dispatchVisibilityChanged(View changedView, int visibility) Dispatch a view visibility change down the view hierarchy. void dispatchWindowFocusChanged(boolean hasFocus) Called when the window containing this view gains or loses window focus. void dispatchWindowSystemUiVisiblityChanged(int visible) Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. void dispatchWindowVisibilityChanged(int visibility) Dispatch a window visibility change down the view hierarchy. void draw(Canvas canvas) Manually render this view (and all of its children) to the given Canvas. void drawableHotspotChanged(float x, float y) This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. void drawableStateChanged() This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. View findFocus() Find the view in the hierarchy rooted at this view that currently has focus. final <T extends View> T findViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy. final <T extends View> T findViewWithTag(Object tag) Look for a child view with the given tag. void findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags) Finds the Views that contain given text. boolean fitSystemWindows(Rect insets) This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets. View focusSearch(int direction) Find the nearest view in the specified direction that can take focus. void forceHasOverlappingRendering(boolean hasOverlappingRendering) Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior). void forceLayout() Forces this view to be laid out during the next layout pass. static int generateViewId() Generate a value suitable for use in setId(int). CharSequence getAccessibilityClassName() Return the class name of this object to be used for accessibility purposes. int getAccessibilityLiveRegion() Gets the live region mode for this View. AccessibilityNodeProvider getAccessibilityNodeProvider() Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. CharSequence getAccessibilityPaneTitle() Get the title of the pane for purposes of accessibility. int getAccessibilityTraversalAfter() Gets the id of a view after which this one is visited in accessibility traversal. int getAccessibilityTraversalBefore() Gets the id of a view before which this one is visited in accessibility traversal. float getAlpha() The opacity of the view. Animation getAnimation() Get the animation currently associated with this view. IBinder getApplicationWindowToken() Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to. String[] getAutofillHints() Gets the hints that help an AutofillService determine how to autofill the view with the user's data. final AutofillId getAutofillId() Gets the unique, logical identifier of this view in the activity, for autofill purposes. int getAutofillType() Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view. AutofillValue getAutofillValue() Gets the View's current autofill value. Drawable getBackground() Gets the background drawable ColorStateList getBackgroundTintList() Return the tint applied to the background drawable, if specified. PorterDuff.Mode getBackgroundTintMode() Return the blending mode used to apply the tint to the background drawable, if specified. int getBaseline() Return the offset of the widget's text baseline from the widget's top boundary. final int getBottom() Bottom position of this view relative to its parent. float getBottomFadingEdgeStrength() Returns the strength, or intensity, of the bottom faded edge. int getBottomPaddingOffset() Amount by which to extend the bottom fading region. float getCameraDistance() Gets the distance along the Z axis from the camera to this view. boolean getClipBounds(Rect outRect) Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null. Rect getClipBounds() Returns a copy of the current clipBounds. final boolean getClipToOutline() Returns whether the Outline should be used to clip the contents of the View. CharSequence getContentDescription() Returns the View's content description. final Context getContext() Returns the context the view is running in, through which it can access the current theme, resources, etc. ContextMenu.ContextMenuInfo getContextMenuInfo() Views should implement this if they have extra information to associate with the context menu. final boolean getDefaultFocusHighlightEnabled() /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. static int getDefaultSize(int size, int measureSpec) Utility to return a default size. Display getDisplay() Gets the logical display to which the view's window has been attached. final int[] getDrawableState() Return an array of resource IDs of the drawable states representing the current state of the view. Bitmap getDrawingCache() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Bitmap getDrawingCache(boolean autoScale) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheBackgroundColor() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. int getDrawingCacheQuality() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void getDrawingRect(Rect outRect) Return the visible drawing bounds of your view. long getDrawingTime() Return the time at which the drawing of the view hierarchy started. float getElevation() The base elevation of this view relative to its parent, in pixels. boolean getFilterTouchesWhenObscured() Gets whether the framework should discard touches when the view's window is obscured by another visible window. boolean getFitsSystemWindows() Check for state of setFitsSystemWindows(boolean). int getFocusable() Returns the focusable setting for this view. ArrayList<View> getFocusables(int direction) Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. void getFocusedRect(Rect r) When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. Drawable getForeground() Returns the drawable used as the foreground of this View. int getForegroundGravity() Describes how the foreground is positioned. ColorStateList getForegroundTintList() Return the tint applied to the foreground drawable, if specified. PorterDuff.Mode getForegroundTintMode() Return the blending mode used to apply the tint to the foreground drawable, if specified. final boolean getGlobalVisibleRect(Rect r) boolean getGlobalVisibleRect(Rect r, Point globalOffset) If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. Handler getHandler() final boolean getHasOverlappingRendering() Returns the value for overlapping rendering that is used internally. final int getHeight() Return the height of your view. void getHitRect(Rect outRect) Hit rectangle in parent's coordinates int getHorizontalFadingEdgeLength() Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. int getHorizontalScrollbarHeight() Returns the height of the horizontal scrollbar. int getId() Returns this view's identifier. int getImportantForAccessibility() Gets the mode for determining whether this View is important for accessibility. int getImportantForAutofill() Gets the mode for determining whether this view is important for autofill. boolean getKeepScreenOn() Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. KeyEvent.DispatcherState getKeyDispatcherState() Return the global KeyEvent.DispatcherState for this view's window. int getLabelFor() Gets the id of a view for which this view serves as a label for accessibility purposes. int getLayerType() Indicates what type of layer is currently associated with this view. int getLayoutDirection() Returns the resolved layout direction for this view. ViewGroup.LayoutParams getLayoutParams() Get the LayoutParams associated with this view. final int getLeft() Left position of this view relative to its parent. float getLeftFadingEdgeStrength() Returns the strength, or intensity, of the left faded edge. int getLeftPaddingOffset() Amount by which to extend the left fading region. final boolean getLocalVisibleRect(Rect r) void getLocationInWindow(int[] outLocation) Computes the coordinates of this view in its window. void getLocationOnScreen(int[] outLocation) Computes the coordinates of this view on the screen. Matrix getMatrix() The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. final int getMeasuredHeight() Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredHeightAndState() Return the full height measurement information for this view as computed by the most recent call to measure(int, int). final int getMeasuredState() Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. final int getMeasuredWidth() Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). final int getMeasuredWidthAndState() Return the full width measurement information for this view as computed by the most recent call to measure(int, int). int getMinimumHeight() Returns the minimum height of the view. int getMinimumWidth() Returns the minimum width of the view. int getNextClusterForwardId() Gets the id of the root of the next keyboard navigation cluster. int getNextFocusDownId() Gets the id of the view to use when the next focus is FOCUS_DOWN. int getNextFocusForwardId() Gets the id of the view to use when the next focus is FOCUS_FORWARD. int getNextFocusLeftId() Gets the id of the view to use when the next focus is FOCUS_LEFT. int getNextFocusRightId() Gets the id of the view to use when the next focus is FOCUS_RIGHT. int getNextFocusUpId() Gets the id of the view to use when the next focus is FOCUS_UP. View.OnFocusChangeListener getOnFocusChangeListener() Returns the focus-change callback registered for this view. int getOutlineAmbientShadowColor() ViewOutlineProvider getOutlineProvider() Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. int getOutlineSpotShadowColor() int getOverScrollMode() Returns the over-scroll mode for this view. ViewOverlay getOverlay() Returns the overlay for this view, creating it if it does not yet exist. int getPaddingBottom() Returns the bottom padding of this view. int getPaddingEnd() Returns the end padding of this view depending on its resolved layout direction. int getPaddingLeft() Returns the left padding of this view. int getPaddingRight() Returns the right padding of this view. int getPaddingStart() Returns the start padding of this view depending on its resolved layout direction. int getPaddingTop() Returns the top padding of this view. final ViewParent getParent() Gets the parent of this view. ViewParent getParentForAccessibility() Gets the parent for accessibility purposes. float getPivotX() The x location of the point around which the view is rotated and scaled. float getPivotY() The y location of the point around which the view is rotated and scaled. PointerIcon getPointerIcon() Gets the pointer icon for the current view. Resources getResources() Returns the resources associated with this view. final boolean getRevealOnFocusHint() Returns this view's preference for reveal behavior when it gains focus. final int getRight() Right position of this view relative to its parent. float getRightFadingEdgeStrength() Returns the strength, or intensity, of the right faded edge. int getRightPaddingOffset() Amount by which to extend the right fading region. View getRootView() Finds the topmost view in the current view hierarchy. WindowInsets getRootWindowInsets() Provide original WindowInsets that are dispatched to the view hierarchy. float getRotation() The degrees that the view is rotated around the pivot point. float getRotationX() The degrees that the view is rotated around the horizontal axis through the pivot point. float getRotationY() The degrees that the view is rotated around the vertical axis through the pivot point. float getScaleX() The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. float getScaleY() The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. int getScrollBarDefaultDelayBeforeFade() Returns the delay before scrollbars fade. int getScrollBarFadeDuration() Returns the scrollbar fade duration. int getScrollBarSize() Returns the scrollbar size. int getScrollBarStyle() Returns the current scrollbar style. int getScrollIndicators() Returns a bitmask representing the enabled scroll indicators. final int getScrollX() Return the scrolled left position of this view. final int getScrollY() Return the scrolled top position of this view. int getSolidColor() Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. StateListAnimator getStateListAnimator() Returns the current StateListAnimator if exists. int getSuggestedMinimumHeight() Returns the suggested minimum height that the view should use. int getSuggestedMinimumWidth() Returns the suggested minimum width that the view should use. int getSystemUiVisibility() Returns the last setSystemUiVisibility(int) that this view has requested. Object getTag() Returns this view's tag. Object getTag(int key) Returns the tag associated with this view and the specified key. int getTextAlignment() Return the resolved text alignment. int getTextDirection() Return the resolved text direction. CharSequence getTooltipText() Returns the view's tooltip text. final int getTop() Top position of this view relative to its parent. float getTopFadingEdgeStrength() Returns the strength, or intensity, of the top faded edge. int getTopPaddingOffset() Amount by which to extend the top fading region. TouchDelegate getTouchDelegate() Gets the TouchDelegate for this View. ArrayList<View> getTouchables() Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. String getTransitionName() Returns the name of the View to be used to identify Views in Transitions. float getTranslationX() The horizontal location of this view relative to its left position. float getTranslationY() The vertical location of this view relative to its top position. float getTranslationZ() The depth location of this view relative to its elevation. int getVerticalFadingEdgeLength() Returns the size of the vertical faded edges used to indicate that more content in this view is visible. int getVerticalScrollbarPosition() int getVerticalScrollbarWidth() Returns the width of the vertical scrollbar. ViewTreeObserver getViewTreeObserver() Returns the ViewTreeObserver for this view's hierarchy. int getVisibility() Returns the visibility status for this view. final int getWidth() Return the width of your view. int getWindowAttachCount() WindowId getWindowId() Retrieve the WindowId for the window this view is currently attached to. int getWindowSystemUiVisibility() Returns the current system UI visibility that is currently set for the entire window. IBinder getWindowToken() Retrieve a unique token identifying the window this view is attached to. int getWindowVisibility() Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). void getWindowVisibleDisplayFrame(Rect outRect) Retrieve the overall visible display size in which the window this view is attached to has been positioned in. float getX() The visual x position of this view, in pixels. float getY() The visual y position of this view, in pixels. float getZ() The visual z position of this view, in pixels. boolean hasExplicitFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true. boolean hasFocus() Returns true if this view has focus itself, or is the ancestor of the view that has focus. boolean hasFocusable() Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. boolean hasNestedScrollingParent() Returns true if this view has a nested scrolling parent. boolean hasOnClickListeners() Return whether this view has an attached OnClickListener. boolean hasOverlappingRendering() Returns whether this View has content which overlaps. boolean hasPointerCapture() Checks pointer capture status. boolean hasTransientState() Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. boolean hasWindowFocus() Returns true if this view is in a window that currently has window focus. static View inflate(Context context, int resource, ViewGroup root) Inflate a view from an XML resource. void invalidate() Invalidate the whole view. void invalidate(Rect dirty) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidate(int l, int t, int r, int b) This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate(). void invalidateDrawable(Drawable drawable) Invalidates the specified Drawable. void invalidateOutline() Called to rebuild this View's Outline from its outline provider boolean isAccessibilityFocused() Returns whether this View is accessibility focused. boolean isAccessibilityHeading() Gets whether this view is a heading for accessibility purposes. boolean isActivated() Indicates the activation state of this view. boolean isAttachedToWindow() Returns true if this view is currently attached to a window. boolean isClickable() Indicates whether this view reacts to click events or not. boolean isContextClickable() Indicates whether this view reacts to context clicks or not. boolean isDirty() True if this view has changed since the last time being drawn. boolean isDrawingCacheEnabled() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean isDuplicateParentStateEnabled() Indicates whether this duplicates its drawable state from its parent. boolean isEnabled() Returns the enabled status for this view. final boolean isFocusable() Returns whether this View is currently able to take focus. final boolean isFocusableInTouchMode() When a view is focusable, it may not want to take focus when in touch mode. boolean isFocused() Returns true if this view has focus final boolean isFocusedByDefault() Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view. boolean isHapticFeedbackEnabled() boolean isHardwareAccelerated() Indicates whether this view is attached to a hardware accelerated window or not. boolean isHorizontalFadingEdgeEnabled() Indicate whether the horizontal edges are faded when the view is scrolled horizontally. boolean isHorizontalScrollBarEnabled() Indicate whether the horizontal scrollbar should be drawn or not. boolean isHovered() Returns true if the view is currently hovered. boolean isImportantForAccessibility() Computes whether this view should be exposed for accessibility. final boolean isImportantForAutofill() Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes. boolean isInEditMode() Indicates whether this View is currently in edit mode. boolean isInLayout() Returns whether the view hierarchy is currently undergoing a layout pass. boolean isInTouchMode() Returns whether the device is currently in touch mode. final boolean isKeyboardNavigationCluster() Returns whether this View is a root of a keyboard navigation cluster. boolean isLaidOut() Returns true if this view has been through at least one layout since it was last attached to or detached from a window. boolean isLayoutDirectionResolved() boolean isLayoutRequested() Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. boolean isLongClickable() Indicates whether this view reacts to long click events or not. boolean isNestedScrollingEnabled() Returns true if nested scrolling is enabled for this view. boolean isOpaque() Indicates whether this View is opaque. boolean isPaddingOffsetRequired() If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. boolean isPaddingRelative() Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through boolean isPivotSet() Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float). boolean isPressed() Indicates whether the view is currently in pressed state. boolean isSaveEnabled() Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). boolean isSaveFromParentEnabled() Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. boolean isScreenReaderFocusable() Returns whether the view should be treated as a focusable unit by screen reader accessibility tools. boolean isScrollContainer() Indicates whether this view is one of the set of scrollable containers in its window. boolean isScrollbarFadingEnabled() Returns true if scrollbars will fade when this view is not scrolling boolean isSelected() Indicates the selection state of this view. boolean isShown() Returns the visibility of this view and all of its ancestors boolean isSoundEffectsEnabled() final boolean isTemporarilyDetached() Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach(). boolean isTextAlignmentResolved() boolean isTextDirectionResolved() boolean isVerticalFadingEdgeEnabled() Indicate whether the vertical edges are faded when the view is scrolled horizontally. boolean isVerticalScrollBarEnabled() Indicate whether the vertical scrollbar should be drawn or not. boolean isVisibleToUserForAutofill(int virtualId) Computes whether this virtual autofill view is visible to the user. void jumpDrawablesToCurrentState() Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. View keyboardNavigationClusterSearch(View currentCluster, int direction) Find the nearest keyboard navigation cluster in the specified direction. void layout(int l, int t, int r, int b) Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. final void measure(int widthMeasureSpec, int heightMeasureSpec) This is called to find out how big a view should be. static int[] mergeDrawableStates(int[] baseState, int[] additionalState) Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int). void offsetLeftAndRight(int offset) Offset this view's horizontal location by the specified amount of pixels. void offsetTopAndBottom(int offset) Offset this view's vertical location by the specified number of pixels. void onAnimationEnd() Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view. void onAnimationStart() Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view. WindowInsets onApplyWindowInsets(WindowInsets insets) Called when the view should apply WindowInsets according to its internal policy. void onAttachedToWindow() This is called when the view is attached to a window. void onCancelPendingInputEvents() Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. boolean onCapturedPointerEvent(MotionEvent event) Implement this method to handle captured pointer events boolean onCheckIsTextEditor() Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. void onConfigurationChanged(Configuration newConfig) Called when the current configuration of the resources being used by the application have changed. void onCreateContextMenu(ContextMenu menu) Views should implement this if the view itself is going to add items to the context menu. int[] onCreateDrawableState(int extraSpace) Generate the new Drawable state for this view. InputConnection onCreateInputConnection(EditorInfo outAttrs) Create a new InputConnection for an InputMethod to interact with the view. void onDetachedFromWindow() This is called when the view is detached from a window. void onDisplayHint(int hint) Gives this view a hint about whether is displayed or not. boolean onDragEvent(DragEvent event) Handles drag events sent by the system following a call to startDragAndDrop(). void onDraw(Canvas canvas) Implement this to do your drawing. void onDrawForeground(Canvas canvas) Draw any foreground content for this view. final void onDrawScrollBars(Canvas canvas) Request the drawing of the horizontal and the vertical scrollbar. boolean onFilterTouchEventForSecurity(MotionEvent event) Filter the touch event to apply security policies. void onFinishInflate() Finalize inflating a view from XML. void onFinishTemporaryDetach() Called after onStartTemporaryDetach() when the container is done changing the view. void onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect) Called by the view system when the focus state of this view changes. boolean onGenericMotionEvent(MotionEvent event) Implement this method to handle generic motion events. void onHoverChanged(boolean hovered) Implement this method to handle hover state changes. boolean onHoverEvent(MotionEvent event) Implement this method to handle hover events. void onInitializeAccessibilityEvent(AccessibilityEvent event) Initializes an AccessibilityEvent with information about this View which is the event source. void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) Initializes an AccessibilityNodeInfo with information about this view. boolean onKeyDown(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable. boolean onKeyLongPress(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). boolean onKeyMultiple(int keyCode, int repeatCount, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). boolean onKeyPreIme(int keyCode, KeyEvent event) Handle a key event before it is processed by any input method associated with the view hierarchy. boolean onKeyShortcut(int keyCode, KeyEvent event) Called on the focused view when a key shortcut event is not handled. boolean onKeyUp(int keyCode, KeyEvent event) Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released. void onLayout(boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. void onMeasure(int widthMeasureSpec, int heightMeasureSpec) Measure the view and its content to determine the measured width and the measured height. void onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY) Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation. void onPointerCaptureChange(boolean hasCapture) Called when the window has just acquired or lost pointer capture. void onPopulateAccessibilityEvent(AccessibilityEvent event) Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. void onProvideAutofillStructure(ViewStructure structure, int flags) Populates a ViewStructure to fullfil an autofill request. void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) Populates a ViewStructure containing virtual children to fullfil an autofill request. void onProvideStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData. void onProvideVirtualStructure(ViewStructure structure) Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view. PointerIcon onResolvePointerIcon(MotionEvent event, int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. void onRestoreInstanceState(Parcelable state) Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). void onRtlPropertiesChanged(int layoutDirection) Called when any RTL property (layout direction or text direction or text alignment) has been changed. Parcelable onSaveInstanceState() Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. void onScreenStateChanged(int screenState) This method is called whenever the state of the screen this view is attached to changes. void onScrollChanged(int l, int t, int oldl, int oldt) This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). boolean onSetAlpha(int alpha) Invoked if there is a Transform that involves alpha. void onSizeChanged(int w, int h, int oldw, int oldh) This is called during layout when the size of this view has changed. void onStartTemporaryDetach() This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. boolean onTouchEvent(MotionEvent event) Implement this method to handle touch screen motion events. boolean onTrackballEvent(MotionEvent event) Implement this method to handle trackball motion events. void onVisibilityAggregated(boolean isVisible) Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to. void onVisibilityChanged(View changedView, int visibility) Called when the visibility of the view or an ancestor of the view has changed. void onWindowFocusChanged(boolean hasWindowFocus) Called when the window containing this view gains or loses focus. void onWindowSystemUiVisibilityChanged(int visible) Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). void onWindowVisibilityChanged(int visibility) Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE). boolean overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent) Scroll the view with standard behavior for scrolling beyond the normal content boundaries. boolean performAccessibilityAction(int action, Bundle arguments) Performs the specified accessibility action on the view. boolean performClick() Call this view's OnClickListener, if it is defined. boolean performContextClick(float x, float y) Call this view's OnContextClickListener, if it is defined. boolean performContextClick() Call this view's OnContextClickListener, if it is defined. boolean performHapticFeedback(int feedbackConstant) BZZZTT!!1! Provide haptic feedback to the user for this view. boolean performHapticFeedback(int feedbackConstant, int flags) BZZZTT!!1! Like performHapticFeedback(int), with additional options. boolean performLongClick(float x, float y) Calls this view's OnLongClickListener, if it is defined. boolean performLongClick() Calls this view's OnLongClickListener, if it is defined. void playSoundEffect(int soundConstant) Play a sound effect for this view. boolean post(Runnable action) Causes the Runnable to be added to the message queue. boolean postDelayed(Runnable action, long delayMillis) Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. void postInvalidate() Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidate(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. void postInvalidateDelayed(long delayMilliseconds) Cause an invalidate to happen on a subsequent cycle through the event loop. void postInvalidateOnAnimation(int left, int top, int right, int bottom) Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. void postInvalidateOnAnimation() Cause an invalidate to happen on the next animation time step, typically the next display frame. void postOnAnimation(Runnable action) Causes the Runnable to execute on the next animation time step. void postOnAnimationDelayed(Runnable action, long delayMillis) Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. void refreshDrawableState() Call this to force a view to update its drawable state. void releasePointerCapture() Releases the pointer capture. boolean removeCallbacks(Runnable action) Removes the specified Runnable from the message queue. void removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener) Remove a listener for attach state changes. void removeOnLayoutChangeListener(View.OnLayoutChangeListener listener) Remove a listener for layout changes. void removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener) Removes a listener which will receive unhandled KeyEvents. void requestApplyInsets() Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. void requestFitSystemWindows() This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. final boolean requestFocus(int direction) Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. final boolean requestFocus() Call this to try to give focus to a specific view or to one of its descendants. boolean requestFocus(int direction, Rect previouslyFocusedRect) Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. final boolean requestFocusFromTouch() Call this to try to give focus to a specific view or to one of its descendants. void requestLayout() Call this when something has changed which has invalidated the layout of this view. void requestPointerCapture() Requests pointer capture mode. boolean requestRectangleOnScreen(Rect rectangle) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. boolean requestRectangleOnScreen(Rect rectangle, boolean immediate) Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. final void requestUnbufferedDispatch(MotionEvent event) Request unbuffered dispatch of the given stream of MotionEvents to this View. final <T extends View> T requireViewById(int id) Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy. void resetPivot() Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float). static int resolveSize(int size, int measureSpec) Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. static int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. boolean restoreDefaultFocus() Gives focus to the default-focus view in the view hierarchy that has this view as a root. void restoreHierarchyState(SparseArray<Parcelable> container) Restore this view hierarchy's frozen state from the given container. void saveHierarchyState(SparseArray<Parcelable> container) Store this view hierarchy's frozen state into the given container. void scheduleDrawable(Drawable who, Runnable what, long when) Schedules an action on a drawable to occur at a specified time. void scrollBy(int x, int y) Move the scrolled position of your view. void scrollTo(int x, int y) Set the scrolled position of your view. void sendAccessibilityEvent(int eventType) Sends an accessibility event of the given type. void sendAccessibilityEventUnchecked(AccessibilityEvent event) This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. void setAccessibilityDelegate(View.AccessibilityDelegate delegate) Sets a delegate for implementing accessibility support via composition (as opposed to inheritance). void setAccessibilityHeading(boolean isHeading) Set if view is a heading for a section of content for accessibility purposes. void setAccessibilityLiveRegion(int mode) Sets the live region mode for this view. void setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle) Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes. void setAccessibilityTraversalAfter(int afterId) Sets the id of a view after which this one is visited in accessibility traversal. void setAccessibilityTraversalBefore(int beforeId) Sets the id of a view before which this one is visited in accessibility traversal. void setActivated(boolean activated) Changes the activated state of this view. void setAlpha(float alpha) Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. void setAnimation(Animation animation) Sets the next animation to play for this view. void setAutofillHints(String... autofillHints) Sets the hints that help an AutofillService determine how to autofill the view with the user's data. void setAutofillId(AutofillId id) Sets the unique, logical identifier of this view in the activity, for autofill purposes. void setBackground(Drawable background) Set the background to a given Drawable, or remove the background. void setBackgroundColor(int color) Sets the background color for this view. void setBackgroundDrawable(Drawable background) This method was deprecated in API level 16. use setBackground(Drawable) instead void setBackgroundResource(int resid) Set the background to a given resource. void setBackgroundTintList(ColorStateList tint) Applies a tint to the background drawable. void setBackgroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. final void setBottom(int bottom) Sets the bottom position of this view relative to its parent. void setCameraDistance(float distance) Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. void setClickable(boolean clickable) Enables or disables click events for this view. void setClipBounds(Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. void setClipToOutline(boolean clipToOutline) Sets whether the View's Outline should be used to clip the contents of the View. void setContentDescription(CharSequence contentDescription) Sets the View's content description. void setContextClickable(boolean contextClickable) Enables or disables context clicking for this view. void setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled) Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background. void setDrawingCacheBackgroundColor(int color) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheEnabled(boolean enabled) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDrawingCacheQuality(int quality) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setDuplicateParentStateEnabled(boolean enabled) Enables or disables the duplication of the parent's state into this view. void setElevation(float elevation) Sets the base elevation of this view, in pixels. void setEnabled(boolean enabled) Set the enabled state of this view. void setFadingEdgeLength(int length) Set the size of the faded edge used to indicate that more content in this view is available. void setFilterTouchesWhenObscured(boolean enabled) Sets whether the framework should discard touches when the view's window is obscured by another visible window. void setFitsSystemWindows(boolean fitSystemWindows) Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. void setFocusable(boolean focusable) Set whether this view can receive the focus. void setFocusable(int focusable) Sets whether this view can receive focus. void setFocusableInTouchMode(boolean focusableInTouchMode) Set whether this view can receive focus while in touch mode. void setFocusedByDefault(boolean isFocusedByDefault) Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view. void setForeground(Drawable foreground) Supply a Drawable that is to be rendered on top of all of the content in the view. void setForegroundGravity(int gravity) Describes how the foreground is positioned. void setForegroundTintList(ColorStateList tint) Applies a tint to the foreground drawable. void setForegroundTintMode(PorterDuff.Mode tintMode) Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable. void setHapticFeedbackEnabled(boolean hapticFeedbackEnabled) Set whether this view should have haptic feedback for events such as long presses. void setHasTransientState(boolean hasTransientState) Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. void setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled) Define whether the horizontal edges should be faded when this view is scrolled horizontally. void setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled) Define whether the horizontal scrollbar should be drawn or not. void setHovered(boolean hovered) Sets whether the view is currently hovered. void setId(int id) Sets the identifier for this view. void setImportantForAccessibility(int mode) Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. void setImportantForAutofill(int mode) Sets the mode for determining whether this view is considered important for autofill. void setKeepScreenOn(boolean keepScreenOn) Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. void setKeyboardNavigationCluster(boolean isCluster) Set whether this view is a root of a keyboard navigation cluster. void setLabelFor(int id) Sets the id of a view for which this view serves as a label for accessibility purposes. void setLayerPaint(Paint paint) Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). void setLayerType(int layerType, Paint paint) Specifies the type of layer backing this view. void setLayoutDirection(int layoutDirection) Set the layout direction for this view. void setLayoutParams(ViewGroup.LayoutParams params) Set the layout parameters associated with this view. final void setLeft(int left) Sets the left position of this view relative to its parent. void setLongClickable(boolean longClickable) Enables or disables long click events for this view. final void setMeasuredDimension(int measuredWidth, int measuredHeight) This method must be called by onMeasure(int, int) to store the measured width and measured height. void setMinimumHeight(int minHeight) Sets the minimum height of the view. void setMinimumWidth(int minWidth) Sets the minimum width of the view. void setNestedScrollingEnabled(boolean enabled) Enable or disable nested scrolling for this view. void setNextClusterForwardId(int nextClusterForwardId) Sets the id of the view to use as the root of the next keyboard navigation cluster. void setNextFocusDownId(int nextFocusDownId) Sets the id of the view to use when the next focus is FOCUS_DOWN. void setNextFocusForwardId(int nextFocusForwardId) Sets the id of the view to use when the next focus is FOCUS_FORWARD. void setNextFocusLeftId(int nextFocusLeftId) Sets the id of the view to use when the next focus is FOCUS_LEFT. void setNextFocusRightId(int nextFocusRightId) Sets the id of the view to use when the next focus is FOCUS_RIGHT. void setNextFocusUpId(int nextFocusUpId) Sets the id of the view to use when the next focus is FOCUS_UP. void setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener) Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. void setOnCapturedPointerListener(View.OnCapturedPointerListener l) Set a listener to receive callbacks when the pointer capture state of a view changes. void setOnClickListener(View.OnClickListener l) Register a callback to be invoked when this view is clicked. void setOnContextClickListener(View.OnContextClickListener l) Register a callback to be invoked when this view is context clicked. void setOnCreateContextMenuListener(View.OnCreateContextMenuListener l) Register a callback to be invoked when the context menu for this view is being built. void setOnDragListener(View.OnDragListener l) Register a drag event listener callback object for this View. void setOnFocusChangeListener(View.OnFocusChangeListener l) Register a callback to be invoked when focus of this view changed. void setOnGenericMotionListener(View.OnGenericMotionListener l) Register a callback to be invoked when a generic motion event is sent to this view. void setOnHoverListener(View.OnHoverListener l) Register a callback to be invoked when a hover event is sent to this view. void setOnKeyListener(View.OnKeyListener l) Register a callback to be invoked when a hardware key is pressed in this view. void setOnLongClickListener(View.OnLongClickListener l) Register a callback to be invoked when this view is clicked and held. void setOnScrollChangeListener(View.OnScrollChangeListener l) Register a callback to be invoked when the scroll X or Y positions of this view change. void setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l) Set a listener to receive callbacks when the visibility of the system bar changes. void setOnTouchListener(View.OnTouchListener l) Register a callback to be invoked when a touch event is sent to this view. void setOutlineAmbientShadowColor(int color) Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value. void setOutlineProvider(ViewOutlineProvider provider) Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. void setOutlineSpotShadowColor(int color) Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value. void setOverScrollMode(int overScrollMode) Set the over-scroll mode for this view. void setPadding(int left, int top, int right, int bottom) Sets the padding. void setPaddingRelative(int start, int top, int end, int bottom) Sets the relative padding. void setPivotX(float pivotX) Sets the x location of the point around which the view is rotated and scaled. void setPivotY(float pivotY) Sets the y location of the point around which the view is rotated and scaled. void setPointerIcon(PointerIcon pointerIcon) Set the pointer icon for the current view. void setPressed(boolean pressed) Sets the pressed state for this view. final void setRevealOnFocusHint(boolean revealOnFocus) Sets this view's preference for reveal behavior when it gains focus. final void setRight(int right) Sets the right position of this view relative to its parent. void setRotation(float rotation) Sets the degrees that the view is rotated around the pivot point. void setRotationX(float rotationX) Sets the degrees that the view is rotated around the horizontal axis through the pivot point. void setRotationY(float rotationY) Sets the degrees that the view is rotated around the vertical axis through the pivot point. void setSaveEnabled(boolean enabled) Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). void setSaveFromParentEnabled(boolean enabled) Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. void setScaleX(float scaleX) Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. void setScaleY(float scaleY) Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. void setScreenReaderFocusable(boolean screenReaderFocusable) When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit. void setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade) Define the delay before scrollbars fade. void setScrollBarFadeDuration(int scrollBarFadeDuration) Define the scrollbar fade duration. void setScrollBarSize(int scrollBarSize) Define the scrollbar size. void setScrollBarStyle(int style) Specify the style of the scrollbars. void setScrollContainer(boolean isScrollContainer) Change whether this view is one of the set of scrollable containers in its window. void setScrollIndicators(int indicators, int mask) Sets the state of the scroll indicators specified by the mask. void setScrollIndicators(int indicators) Sets the state of all scroll indicators. void setScrollX(int value) Set the horizontal scrolled position of your view. void setScrollY(int value) Set the vertical scrolled position of your view. void setScrollbarFadingEnabled(boolean fadeScrollbars) Define whether scrollbars will fade when the view is not scrolling. void setSelected(boolean selected) Changes the selection state of this view. void setSoundEffectsEnabled(boolean soundEffectsEnabled) Set whether this view should have sound effects enabled for events such as clicking and touching. void setStateListAnimator(StateListAnimator stateListAnimator) Attaches the provided StateListAnimator to this View. void setSystemUiVisibility(int visibility) Request that the visibility of the status bar or other screen/window decorations be changed. void setTag(int key, Object tag) Sets a tag associated with this view and a key. void setTag(Object tag) Sets the tag associated with this view. void setTextAlignment(int textAlignment) Set the text alignment. void setTextDirection(int textDirection) Set the text direction. void setTooltipText(CharSequence tooltipText) Sets the tooltip text which will be displayed in a small popup next to the view. final void setTop(int top) Sets the top position of this view relative to its parent. void setTouchDelegate(TouchDelegate delegate) Sets the TouchDelegate for this View. final void setTransitionName(String transitionName) Sets the name of the View to be used to identify Views in Transitions. void setTranslationX(float translationX) Sets the horizontal location of this view relative to its left position. void setTranslationY(float translationY) Sets the vertical location of this view relative to its top position. void setTranslationZ(float translationZ) Sets the depth location of this view relative to its elevation. void setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled) Define whether the vertical edges should be faded when this view is scrolled vertically. void setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled) Define whether the vertical scrollbar should be drawn or not. void setVerticalScrollbarPosition(int position) Set the position of the vertical scroll bar. void setVisibility(int visibility) Set the visibility state of this view. void setWillNotCacheDrawing(boolean willNotCacheDrawing) This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. void setWillNotDraw(boolean willNotDraw) If this view doesn't do any drawing on its own, set this flag to allow further optimizations. void setX(float x) Sets the visual x position of this view, in pixels. void setY(float y) Sets the visual y position of this view, in pixels. void setZ(float z) Sets the visual z position of this view, in pixels. boolean showContextMenu() Shows the context menu for this view. boolean showContextMenu(float x, float y) Shows the context menu for this view anchored to the specified view-relative coordinate. ActionMode startActionMode(ActionMode.Callback callback, int type) Start an action mode with the given type. ActionMode startActionMode(ActionMode.Callback callback) Start an action mode with the default type ActionMode.TYPE_PRIMARY. void startAnimation(Animation animation) Start the specified animation now. final boolean startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions. final boolean startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags) Starts a drag and drop operation. boolean startNestedScroll(int axes) Begin a nestable scroll operation along the given axes. void stopNestedScroll() Stop a nested scroll in progress. String toString() Returns a string representation of the object. void unscheduleDrawable(Drawable who, Runnable what) Cancels a scheduled action on a drawable. void unscheduleDrawable(Drawable who) Unschedule any events associated with the given Drawable. final void updateDragShadow(View.DragShadowBuilder shadowBuilder) Updates the drag shadow for the ongoing drag and drop operation. boolean verifyDrawable(Drawable who) If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. boolean willNotCacheDrawing() This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. boolean willNotDraw() Returns whether or not this View draws on its own. From class java.lang.Object Object clone() Creates and returns a copy of this object. boolean equals(Object obj) Indicates whether some other object is "equal to" this one. void finalize() Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. final Class<?> getClass() Returns the runtime class of this Object. int hashCode() Returns a hash code value for the object. final void notify() Wakes up a single thread that is waiting on this object's monitor. final void notifyAll() Wakes up all threads that are waiting on this object's monitor. String toString() Returns a string representation of the object. final void wait(long millis, int nanos) Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed. final void wait(long millis) Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed. final void wait() Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object. From interface android.view.ViewTreeObserver.OnPreDrawListener abstract boolean onPreDraw() Callback method to be invoked when the view tree is about to be drawn. From interface android.graphics.drawable.Drawable.Callback abstract void invalidateDrawable(Drawable who) Called when the drawable needs to be redrawn. abstract void scheduleDrawable(Drawable who, Runnable what, long when) A Drawable can call this to schedule the next frame of its animation. abstract void unscheduleDrawable(Drawable who, Runnable what) A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). From interface android.view.KeyEvent.Callback abstract boolean onKeyDown(int keyCode, KeyEvent event) Called when a key down event has occurred. abstract boolean onKeyLongPress(int keyCode, KeyEvent event) Called when a long press has occurred. abstract boolean onKeyMultiple(int keyCode, int count, KeyEvent event) Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession. abstract boolean onKeyUp(int keyCode, KeyEvent event) Called when a key up event has occurred. From interface android.view.accessibility.AccessibilityEventSource abstract void sendAccessibilityEvent(int eventType) Handles the request for sending an AccessibilityEvent given the event type. abstract void sendAccessibilityEventUnchecked(AccessibilityEvent event) Handles the request for sending an AccessibilityEvent. Public constructors Button added in API level 1 public Button (Context context) Simple constructor to use when creating a button from code. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. See also: Button(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs) LayoutInflater calls this constructor when inflating a Button from XML. The attributes defined by the current theme's android:buttonStyle override base view attributes. You typically do not call this constructor to create your own button instance in code. However, you must override this constructor when creating custom views. Parameters context Context: The Context the view is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag being used to inflate the view. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet) Button added in API level 1 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr) This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. The attributes defined by the current theme's defStyleAttr override base view attributes. For Button's base view attributes see Button Attributes, TextView Attributes, View Attributes. Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int, int) View.View(Context, AttributeSet, int) Button added in API level 21 public Button (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes) This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. To see how the final value of a particular attribute is resolved based on your inputs to this constructor, see View.View(Context, AttributeSet, int, int). Parameters context Context: The Context the Button is running in, through which it can access the current theme, resources, etc. attrs AttributeSet: The attributes of the XML Button tag that is inflating the view. defStyleAttr int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style’s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values. defStyleRes int: The identifier of a style resource that supplies default values for the button, used only if defStyleAttr is 0 or cannot be found in the theme. Set this parameter to 0 to avoid use of default values. See also: Button(Context, AttributeSet, int) View.View(Context, AttributeSet, int, int) Public methods getAccessibilityClassName added in API level 23 public CharSequence getAccessibilityClassName () Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in AccessibilityNodeInfo.setClassName. Returns CharSequence onResolvePointerIcon added in API level 24 public PointerIcon onResolvePointerIcon (MotionEvent event, 
                int pointerIndex) Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews). Parameters event MotionEvent: The MotionEvent from a mouse pointerIndex int: The index of the pointer for which to retrieve the PointerIcon. This will be between 0 and MotionEvent.getPointerCount(). Returns PointerIcon Annotations RemoteViews.RemoteView Interfaces AbsListView.MultiChoiceModeListener AbsListView.OnScrollListener AbsListView.RecyclerListener AbsListView.SelectionBoundsAdjuster ActionMenuView.OnMenuItemClickListener Adapter AdapterView.OnItemClickListener AdapterView.OnItemLongClickListener AdapterView.OnItemSelectedListener Advanceable AutoCompleteTextView.OnDismissListener AutoCompleteTextView.Validator CalendarView.OnDateChangeListener Checkable Chronometer.OnChronometerTickListener CompoundButton.OnCheckedChangeListener DatePicker.OnDateChangedListener ExpandableListAdapter ExpandableListView.OnChildClickListener ExpandableListView.OnGroupClickListener ExpandableListView.OnGroupCollapseListener ExpandableListView.OnGroupExpandListener Filter.FilterListener Filterable FilterQueryProvider HeterogeneousExpandableList ListAdapter MediaController.MediaPlayerControl MultiAutoCompleteTextView.Tokenizer NumberPicker.Formatter NumberPicker.OnScrollListener NumberPicker.OnValueChangeListener PopupMenu.OnDismissListener PopupMenu.OnMenuItemClickListener PopupWindow.OnDismissListener RadioGroup.OnCheckedChangeListener RatingBar.OnRatingBarChangeListener RemoteViewsService.RemoteViewsFactory SearchView.OnCloseListener SearchView.OnQueryTextListener SearchView.OnSuggestionListener SectionIndexer SeekBar.OnSeekBarChangeListener ShareActionProvider.OnShareTargetSelectedListener SimpleAdapter.ViewBinder SimpleCursorAdapter.CursorToStringConverter SimpleCursorAdapter.ViewBinder SimpleCursorTreeAdapter.ViewBinder SlidingDrawer.OnDrawerCloseListener SlidingDrawer.OnDrawerOpenListener SlidingDrawer.OnDrawerScrollListener SpinnerAdapter TabHost.OnTabChangeListener TabHost.TabContentFactory TextView.OnEditorActionListener ThemedSpinnerAdapter TimePicker.OnTimeChangedListener Toolbar.OnMenuItemClickListener ViewSwitcher.ViewFactory WrapperListAdapter ZoomButtonsController.OnZoomListener Classes AbsListView AbsListView.LayoutParams AbsoluteLayout AbsoluteLayout.LayoutParams AbsSeekBar AbsSpinner ActionMenuView ActionMenuView.LayoutParams AdapterView AdapterView.AdapterContextMenuInfo AdapterViewAnimator AdapterViewFlipper AlphabetIndexer AnalogClock ArrayAdapter AutoCompleteTextView BaseAdapter BaseExpandableListAdapter Button CalendarView CheckBox CheckedTextView Chronometer CompoundButton CursorAdapter CursorTreeAdapter DatePicker DialerFilter DigitalClock EdgeEffect EditText ExpandableListView ExpandableListView.ExpandableListContextMenuInfo Filter Filter.FilterResults FrameLayout FrameLayout.LayoutParams Gallery Gallery.LayoutParams GridLayout GridLayout.Alignment GridLayout.LayoutParams GridLayout.Spec GridView HeaderViewListAdapter HorizontalScrollView ImageButton ImageSwitcher ImageView LinearLayout LinearLayout.LayoutParams ListPopupWindow ListView ListView.FixedViewInfo Magnifier MediaController MultiAutoCompleteTextView MultiAutoCompleteTextView.CommaTokenizer NumberPicker OverScroller PopupMenu PopupWindow ProgressBar QuickContactBadge RadioButton RadioGroup RadioGroup.LayoutParams RatingBar RelativeLayout RelativeLayout.LayoutParams RemoteViews RemoteViewsService ResourceCursorAdapter ResourceCursorTreeAdapter Scroller ScrollView SearchView SeekBar ShareActionProvider SimpleAdapter SimpleCursorAdapter SimpleCursorTreeAdapter SimpleExpandableListAdapter SlidingDrawer Space Spinner StackView Switch TabHost TabHost.TabSpec TableLayout TableLayout.LayoutParams TableRow TableRow.LayoutParams TabWidget TextClock TextSwitcher TextView TextView.SavedState TimePicker Toast ToggleButton Toolbar Toolbar.LayoutParams TwoLineListItem VideoView ViewAnimator ViewFlipper ViewSwitcher ZoomButton ZoomButtonsController ZoomControls Enums ImageView.ScaleType TextView.BufferType Exceptions RemoteViews.ActionException Content and code samples on this page are subject to the licenses described in the Content License. Java is a registered trademark of Oracle and/or its affiliates. Last updated June 6, 2018. Twitter Follow @AndroidDev on Twitter Google+ Follow Android Developers on Google+ YouTube Check out Android Developers on YouTube More Android Android Enterprise Security Source Support Report platform bug Report documentation bug Google Play support Join user studies Documentation Developer guides Design guides API reference Samples Android Studio Android Chrome Firebase Google Cloud Platform All Products Bahasa Indonesia Deutsch English español Español (América Latina) français Português Brasileiro Tiếng Việt Türkçe Русский ภาษาไทย 日本語 简体中文 繁體中文 한국어 Privacy License Brand Guidelines Get Android and Google Play news by email Subscribe