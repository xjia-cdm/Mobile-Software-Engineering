<api>
 <title>SimpleExpandableListAdapter</title>
 <api-signature>public class SimpleExpandableListAdapter extends BaseExpandableListAdapter</api-signature>
 <inheritance>java.lang.Object ↳ android.widget.BaseExpandableListAdapter ↳ android.widget.SimpleExpandableListAdapter</inheritance>
 <subclasses-direct-summary>
 </subclasses-direct-summary>
 <subclasses-indirect-summary>
 </subclasses-indirect-summary>
 <inherited_xml_attributes>
 </inherited_xml_attributes>
 <inherited_constants>
 </inherited_constants>
 <inherited_fields>
 </inherited_fields>
 <inherited_methods>
 <name>android.widget.BaseExpandableListAdapter</name>
 <class>
 <method>
 <return-value>boolean</return-value>
 <name>areAllItemsEnabled()</name>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getChildType(int groupPosition, int childPosition)</name>
 <description>Get the type of child View that will be created by ExpandableListAdapter.getChildView(int, int, boolean, View, ViewGroup) for the specified child item.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getChildTypeCount()</name>
 <description></description>
 </method>
 <method>
 <return-value>long</return-value>
 <name>getCombinedChildId(long groupId, long childId)</name>
 <description>Override this method if you foresee a clash in IDs based on this scheme:</description>
 </method>
 <method>
 <return-value>long</return-value>
 <name>getCombinedGroupId(long groupId)</name>
 <description>Override this method if you foresee a clash in IDs based on this scheme:</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getGroupType(int groupPosition)</name>
 <description>Get the type of group View that will be created by ExpandableListAdapter.getGroupView(int, boolean, View, ViewGroup) .</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getGroupTypeCount()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isEmpty()</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>notifyDataSetChanged()</name>
 </method>
 <method>
 <return-value>void</return-value>
 <name>notifyDataSetInvalidated()</name>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onGroupCollapsed(int groupPosition)</name>
 <description>Called when a group is collapsed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onGroupExpanded(int groupPosition)</name>
 <description>Called when a group is expanded.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>registerDataSetObserver(DataSetObserver observer)</name>
 </method>
 <method>
 <return-value>void</return-value>
 <name>unregisterDataSetObserver(DataSetObserver observer)</name>
 </method>
 </class>
 <name>java.lang.Object</name>
 <class>
 <method>
 <return-value>Object</return-value>
 <name>clone()</name>
 <description>Creates and returns a copy of this object.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>equals(Object obj)</name>
 <description>Indicates whether some other object is &amp;quot;equal to&amp;quot; this one.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>finalize()</name>
 <description>Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</description>
 </method>
 <method>
 <return-value>final Class&amp;lt;?&amp;gt;</return-value>
 <name>getClass()</name>
 <description>Returns the runtime class of this Object.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>hashCode()</name>
 <description>Returns a hash code value for the object.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>notify()</name>
 <description>Wakes up a single thread that is waiting on this object&amp;apos;s monitor.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>notifyAll()</name>
 <description>Wakes up all threads that are waiting on this object&amp;apos;s monitor.</description>
 </method>
 <method>
 <return-value>String</return-value>
 <name>toString()</name>
 <description>Returns a string representation of the object.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait(long millis, int nanos)</name>
 <description>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait(long millis)</name>
 <description>Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait()</name>
 <description>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.</description>
 </method>
 </class>
 <name>android.widget.ExpandableListAdapter</name>
 <class>
 <method>
 <return-value>abstract boolean</return-value>
 <name>areAllItemsEnabled()</name>
 </method>
 <method>
 <return-value>abstract Object</return-value>
 <name>getChild(int groupPosition, int childPosition)</name>
 <description>Gets the data associated with the given child within the given group.</description>
 </method>
 <method>
 <return-value>abstract long</return-value>
 <name>getChildId(int groupPosition, int childPosition)</name>
 <description>Gets the ID for the given child within the given group.</description>
 </method>
 <method>
 <return-value>abstract View</return-value>
 <name>getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)</name>
 <description>Gets a View that displays the data for the given child within the given group.</description>
 </method>
 <method>
 <return-value>abstract int</return-value>
 <name>getChildrenCount(int groupPosition)</name>
 <description>Gets the number of children in a specified group.</description>
 </method>
 <method>
 <return-value>abstract long</return-value>
 <name>getCombinedChildId(long groupId, long childId)</name>
 <description>Gets an ID for a child that is unique across any item (either group or child) that is in this list.</description>
 </method>
 <method>
 <return-value>abstract long</return-value>
 <name>getCombinedGroupId(long groupId)</name>
 <description>Gets an ID for a group that is unique across any item (either group or child) that is in this list.</description>
 </method>
 <method>
 <return-value>abstract Object</return-value>
 <name>getGroup(int groupPosition)</name>
 <description>Gets the data associated with the given group.</description>
 </method>
 <method>
 <return-value>abstract int</return-value>
 <name>getGroupCount()</name>
 <description>Gets the number of groups.</description>
 </method>
 <method>
 <return-value>abstract long</return-value>
 <name>getGroupId(int groupPosition)</name>
 <description>Gets the ID for the group at the given position.</description>
 </method>
 <method>
 <return-value>abstract View</return-value>
 <name>getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)</name>
 <description>Gets a View that displays the given group.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>hasStableIds()</name>
 <description>Indicates whether the child and group IDs are stable across changes to the underlying data.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>isChildSelectable(int groupPosition, int childPosition)</name>
 <description>Whether the child at the specified position is selectable.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>isEmpty()</name>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>onGroupCollapsed(int groupPosition)</name>
 <description>Called when a group is collapsed.</description>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>onGroupExpanded(int groupPosition)</name>
 <description>Called when a group is expanded.</description>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>registerDataSetObserver(DataSetObserver observer)</name>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>unregisterDataSetObserver(DataSetObserver observer)</name>
 </method>
 </class>
 <name>android.widget.HeterogeneousExpandableList</name>
 <class>
 <method>
 <return-value>abstract int</return-value>
 <name>getChildType(int groupPosition, int childPosition)</name>
 <description>Get the type of child View that will be created by ExpandableListAdapter.getChildView(int, int, boolean, View, ViewGroup) for the specified child item.</description>
 </method>
 <method>
 <return-value>abstract int</return-value>
 <name>getChildTypeCount()</name>
 <description></description>
 </method>
 <method>
 <return-value>abstract int</return-value>
 <name>getGroupType(int groupPosition)</name>
 <description>Get the type of group View that will be created by ExpandableListAdapter.getGroupView(int, boolean, View, ViewGroup) .</description>
 </method>
 <method>
 <return-value>abstract int</return-value>
 <name>getGroupTypeCount()</name>
 <description></description>
 </method>
 </class>
 </inherited_methods>
 <public_constructors>
 <method>
 <name>SimpleExpandableListAdapter(Context context, List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, int groupLayout, String[] groupFrom, int[] groupTo, List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, int childLayout, String[] childFrom, int[] childTo)</name>
 <description>Constructor</description>
 </method>
 <method>
 <name>SimpleExpandableListAdapter(Context context, List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, int expandedGroupLayout, int collapsedGroupLayout, String[] groupFrom, int[] groupTo, List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, int childLayout, String[] childFrom, int[] childTo)</name>
 <description>Constructor</description>
 </method>
 <method>
 <name>SimpleExpandableListAdapter(Context context, List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, int expandedGroupLayout, int collapsedGroupLayout, String[] groupFrom, int[] groupTo, List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, int childLayout, int lastChildLayout, String[] childFrom, int[] childTo)</name>
 <description>Constructor</description>
 </method>
 </public_constructors>
 <public_methods>
 <method>
 <return-value>Object</return-value>
 <name>getChild(int groupPosition, int childPosition)</name>
 </method>
 <method>
 <return-value>long</return-value>
 <name>getChildId(int groupPosition, int childPosition)</name>
 </method>
 <method>
 <return-value>View</return-value>
 <name>getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)</name>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getChildrenCount(int groupPosition)</name>
 </method>
 <method>
 <return-value>Object</return-value>
 <name>getGroup(int groupPosition)</name>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getGroupCount()</name>
 </method>
 <method>
 <return-value>long</return-value>
 <name>getGroupId(int groupPosition)</name>
 </method>
 <method>
 <return-value>View</return-value>
 <name>getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasStableIds()</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isChildSelectable(int groupPosition, int childPosition)</name>
 </method>
 <method>
 <return-value>View</return-value>
 <name>newChildView(boolean isLastChild, ViewGroup parent)</name>
 <description>Instantiates a new View for a child.</description>
 </method>
 <method>
 <return-value>View</return-value>
 <name>newGroupView(boolean isExpanded, ViewGroup parent)</name>
 <description>Instantiates a new View for a group.</description>
 </method>
 </public_methods>
 <api-section>
 <api>
 <name>SimpleExpandableListAdapter</name>
 <api_level>API level 1</api_level>
 <api_signature>public SimpleExpandableListAdapter (Context context, 
                List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, 
                int groupLayout, 
                String[] groupFrom, 
                int[] groupTo, 
                List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, 
                int childLayout, 
                String[] childFrom, 
                int[] childTo)</api_signature>
 <description>Constructor</description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context: The context where the ExpandableListView associated with this SimpleExpandableListAdapter is running</description>
 </parameter>
 <parameter>
 <name>groupData</name>
 <description>List: A List of Maps. Each entry in the List corresponds to one group in the list. The Maps contain the data for each group, and should include all the entries specified in &amp;quot;groupFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>groupLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a group. The layout file should include at least those named views defined in &amp;quot;groupTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>groupFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each group.</description>
 </parameter>
 <parameter>
 <name>groupTo</name>
 <description>int: The group views that should display column in the &amp;quot;groupFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the groupFrom parameter.</description>
 </parameter>
 <parameter>
 <name>childData</name>
 <description>List: A List of List of Maps. Each entry in the outer List corresponds to a group (index by group position), each entry in the inner List corresponds to a child within the group (index by child position), and the Map corresponds to the data for a child (index by values in the childFrom array). The Map contains the data for each child, and should include all the entries specified in &amp;quot;childFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a child. The layout file should include at least those named views defined in &amp;quot;childTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each child.</description>
 </parameter>
 <parameter>
 <name>childTo</name>
 <description>int: The child views that should display column in the &amp;quot;childFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the childFrom parameter.</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>SimpleExpandableListAdapter</name>
 <api_level>API level 1</api_level>
 <api_signature>public SimpleExpandableListAdapter (Context context, 
                List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, 
                int expandedGroupLayout, 
                int collapsedGroupLayout, 
                String[] groupFrom, 
                int[] groupTo, 
                List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, 
                int childLayout, 
                String[] childFrom, 
                int[] childTo)</api_signature>
 <description>Constructor</description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context: The context where the ExpandableListView associated with this SimpleExpandableListAdapter is running</description>
 </parameter>
 <parameter>
 <name>groupData</name>
 <description>List: A List of Maps. Each entry in the List corresponds to one group in the list. The Maps contain the data for each group, and should include all the entries specified in &amp;quot;groupFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>expandedGroupLayout</name>
 <description>int: resource identifier of a view layout that defines the views for an expanded group. The layout file should include at least those named views defined in &amp;quot;groupTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>collapsedGroupLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a collapsed group. The layout file should include at least those named views defined in &amp;quot;groupTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>groupFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each group.</description>
 </parameter>
 <parameter>
 <name>groupTo</name>
 <description>int: The group views that should display column in the &amp;quot;groupFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the groupFrom parameter.</description>
 </parameter>
 <parameter>
 <name>childData</name>
 <description>List: A List of List of Maps. Each entry in the outer List corresponds to a group (index by group position), each entry in the inner List corresponds to a child within the group (index by child position), and the Map corresponds to the data for a child (index by values in the childFrom array). The Map contains the data for each child, and should include all the entries specified in &amp;quot;childFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a child. The layout file should include at least those named views defined in &amp;quot;childTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each child.</description>
 </parameter>
 <parameter>
 <name>childTo</name>
 <description>int: The child views that should display column in the &amp;quot;childFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the childFrom parameter.</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>SimpleExpandableListAdapter</name>
 <api_level>API level 1</api_level>
 <api_signature>public SimpleExpandableListAdapter (Context context, 
                List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt; groupData, 
                int expandedGroupLayout, 
                int collapsedGroupLayout, 
                String[] groupFrom, 
                int[] groupTo, 
                List&amp;lt;? extends List&amp;lt;? extends Map&amp;lt;String, ?&amp;gt;&amp;gt;&amp;gt; childData, 
                int childLayout, 
                int lastChildLayout, 
                String[] childFrom, 
                int[] childTo)</api_signature>
 <description>Constructor</description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context: The context where the ExpandableListView associated with this SimpleExpandableListAdapter is running</description>
 </parameter>
 <parameter>
 <name>groupData</name>
 <description>List: A List of Maps. Each entry in the List corresponds to one group in the list. The Maps contain the data for each group, and should include all the entries specified in &amp;quot;groupFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>expandedGroupLayout</name>
 <description>int: resource identifier of a view layout that defines the views for an expanded group. The layout file should include at least those named views defined in &amp;quot;groupTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>collapsedGroupLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a collapsed group. The layout file should include at least those named views defined in &amp;quot;groupTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>groupFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each group.</description>
 </parameter>
 <parameter>
 <name>groupTo</name>
 <description>int: The group views that should display column in the &amp;quot;groupFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the groupFrom parameter.</description>
 </parameter>
 <parameter>
 <name>childData</name>
 <description>List: A List of List of Maps. Each entry in the outer List corresponds to a group (index by group position), each entry in the inner List corresponds to a child within the group (index by child position), and the Map corresponds to the data for a child (index by values in the childFrom array). The Map contains the data for each child, and should include all the entries specified in &amp;quot;childFrom&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childLayout</name>
 <description>int: resource identifier of a view layout that defines the views for a child (unless it is the last child within a group, in which case the lastChildLayout is used). The layout file should include at least those named views defined in &amp;quot;childTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>lastChildLayout</name>
 <description>int: resource identifier of a view layout that defines the views for the last child within each group. The layout file should include at least those named views defined in &amp;quot;childTo&amp;quot;</description>
 </parameter>
 <parameter>
 <name>childFrom</name>
 <description>String: A list of keys that will be fetched from the Map associated with each child.</description>
 </parameter>
 <parameter>
 <name>childTo</name>
 <description>int: The child views that should display column in the &amp;quot;childFrom&amp;quot; parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the childFrom parameter.</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getChild</name>
 <api_level>API level 1</api_level>
 <api_signature>public Object getChild (int groupPosition, 
                int childPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>childPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>Object</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getChildId</name>
 <api_level>API level 1</api_level>
 <api_signature>public long getChildId (int groupPosition, 
                int childPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>childPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>long</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getChildView</name>
 <api_level>API level 1</api_level>
 <api_signature>public View getChildView (int groupPosition, 
                int childPosition, 
                boolean isLastChild, 
                View convertView, 
                ViewGroup parent)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>childPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>isLastChild</name>
 <description>boolean</description>
 </parameter>
 <parameter>
 <name>convertView</name>
 <description>View</description>
 </parameter>
 <parameter>
 <name>parent</name>
 <description>ViewGroup</description>
 </parameter>
 <parameter>
 <name>View</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getChildrenCount</name>
 <api_level>API level 1</api_level>
 <api_signature>public int getChildrenCount (int groupPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>int</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getGroup</name>
 <api_level>API level 1</api_level>
 <api_signature>public Object getGroup (int groupPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>Object</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getGroupCount</name>
 <api_level>API level 1</api_level>
 <api_signature>public int getGroupCount ()</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>int</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getGroupId</name>
 <api_level>API level 1</api_level>
 <api_signature>public long getGroupId (int groupPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>long</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>getGroupView</name>
 <api_level>API level 1</api_level>
 <api_signature>public View getGroupView (int groupPosition, 
                boolean isExpanded, 
                View convertView, 
                ViewGroup parent)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>isExpanded</name>
 <description>boolean</description>
 </parameter>
 <parameter>
 <name>convertView</name>
 <description>View</description>
 </parameter>
 <parameter>
 <name>parent</name>
 <description>ViewGroup</description>
 </parameter>
 <parameter>
 <name>View</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>hasStableIds</name>
 <api_level>API level 1</api_level>
 <api_signature>public boolean hasStableIds ()</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>boolean</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>isChildSelectable</name>
 <api_level>API level 1</api_level>
 <api_signature>public boolean isChildSelectable (int groupPosition, 
                int childPosition)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>groupPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>childPosition</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>boolean</name>
 <description></description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>newChildView</name>
 <api_level>API level 1</api_level>
 <api_signature>public View newChildView (boolean isLastChild, 
                ViewGroup parent)</api_signature>
 <description>Instantiates a new View for a child.</description>
 <parameters>
 <parameter>
 <name>isLastChild</name>
 <description>boolean: Whether the child is the last child within its group.</description>
 </parameter>
 <parameter>
 <name>parent</name>
 <description>ViewGroup: The eventual parent of this new View.</description>
 </parameter>
 <parameter>
 <name>View</name>
 <description>A new child View</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>newGroupView</name>
 <api_level>API level 1</api_level>
 <api_signature>public View newGroupView (boolean isExpanded, 
                ViewGroup parent)</api_signature>
 <description>Instantiates a new View for a group.</description>
 <parameters>
 <parameter>
 <name>isExpanded</name>
 <description>boolean: Whether the group is currently expanded.</description>
 </parameter>
 <parameter>
 <name>parent</name>
 <description>ViewGroup: The eventual parent of this new View.</description>
 </parameter>
 <parameter>
 <name>View</name>
 <description>A new group View</description>
 </parameter>
 </parameters>
 </api>
 </api-section>
 </api>