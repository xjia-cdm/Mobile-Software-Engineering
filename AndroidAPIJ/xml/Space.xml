<api>
 <title>Space</title>
 <api-signature>public final class Space extends View</api-signature>
 <inheritance>java.lang.Object ↳ android.view.View ↳ android.widget.Space</inheritance>
 <subclasses-direct-summary>
 </subclasses-direct-summary>
 <subclasses-indirect-summary>
 </subclasses-indirect-summary>
 <inherited_xml_attributes>
 <class>
 <name>android.view.View</name>
 <attirbute>
 <name>android:accessibilityHeading</name>
 </attirbute>
 <attirbute>
 <name>android:accessibilityLiveRegion</name>
 </attirbute>
 <attirbute>
 <name>android:accessibilityTraversalAfter</name>
 </attirbute>
 <attirbute>
 <name>android:accessibilityTraversalBefore</name>
 </attirbute>
 <attirbute>
 <name>android:alpha</name>
 </attirbute>
 <attirbute>
 <name>android:autofillHints</name>
 </attirbute>
 <attirbute>
 <name>android:autofilledHighlight</name>
 </attirbute>
 <attirbute>
 <name>android:background</name>
 </attirbute>
 <attirbute>
 <name>android:backgroundTint</name>
 </attirbute>
 <attirbute>
 <name>android:backgroundTintMode</name>
 </attirbute>
 <attirbute>
 <name>android:clickable</name>
 </attirbute>
 <attirbute>
 <name>android:contentDescription</name>
 </attirbute>
 <attirbute>
 <name>android:contextClickable</name>
 </attirbute>
 <attirbute>
 <name>android:defaultFocusHighlightEnabled</name>
 </attirbute>
 <attirbute>
 <name>android:drawingCacheQuality</name>
 </attirbute>
 <attirbute>
 <name>android:duplicateParentState</name>
 </attirbute>
 <attirbute>
 <name>android:elevation</name>
 </attirbute>
 <attirbute>
 <name>android:fadeScrollbars</name>
 </attirbute>
 <attirbute>
 <name>android:fadingEdgeLength</name>
 </attirbute>
 <attirbute>
 <name>android:filterTouchesWhenObscured</name>
 </attirbute>
 <attirbute>
 <name>android:fitsSystemWindows</name>
 </attirbute>
 <attirbute>
 <name>android:focusable</name>
 </attirbute>
 <attirbute>
 <name>android:focusableInTouchMode</name>
 </attirbute>
 <attirbute>
 <name>android:focusedByDefault</name>
 </attirbute>
 <attirbute>
 <name>android:forceHasOverlappingRendering</name>
 </attirbute>
 <attirbute>
 <name>android:foreground</name>
 </attirbute>
 <attirbute>
 <name>android:foregroundGravity</name>
 </attirbute>
 <attirbute>
 <name>android:foregroundTint</name>
 </attirbute>
 <attirbute>
 <name>android:foregroundTintMode</name>
 </attirbute>
 <attirbute>
 <name>android:hapticFeedbackEnabled</name>
 </attirbute>
 <attirbute>
 <name>android:id</name>
 <description>Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById().</description>
 </attirbute>
 <attirbute>
 <name>android:importantForAccessibility</name>
 </attirbute>
 <attirbute>
 <name>android:importantForAutofill</name>
 </attirbute>
 <attirbute>
 <name>android:isScrollContainer</name>
 </attirbute>
 <attirbute>
 <name>android:keepScreenOn</name>
 </attirbute>
 <attirbute>
 <name>android:keyboardNavigationCluster</name>
 </attirbute>
 <attirbute>
 <name>android:layerType</name>
 </attirbute>
 <attirbute>
 <name>android:layoutDirection</name>
 </attirbute>
 <attirbute>
 <name>android:longClickable</name>
 </attirbute>
 <attirbute>
 <name>android:minHeight</name>
 </attirbute>
 <attirbute>
 <name>android:minWidth</name>
 </attirbute>
 <attirbute>
 <name>android:nextClusterForward</name>
 </attirbute>
 <attirbute>
 <name>android:nextFocusDown</name>
 <description>Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.</description>
 </attirbute>
 <attirbute>
 <name>android:nextFocusForward</name>
 <description>Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.</description>
 </attirbute>
 <attirbute>
 <name>android:nextFocusLeft</name>
 </attirbute>
 <attirbute>
 <name>android:nextFocusRight</name>
 <description>Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.</description>
 </attirbute>
 <attirbute>
 <name>android:nextFocusUp</name>
 <description>Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.</description>
 </attirbute>
 <attirbute>
 <name>android:onClick</name>
 </attirbute>
 <attirbute>
 <name>android:outlineAmbientShadowColor</name>
 </attirbute>
 <attirbute>
 <name>android:outlineSpotShadowColor</name>
 </attirbute>
 <attirbute>
 <name>android:padding</name>
 </attirbute>
 <attirbute>
 <name>android:paddingBottom</name>
 </attirbute>
 <attirbute>
 <name>android:paddingEnd</name>
 </attirbute>
 <attirbute>
 <name>android:paddingHorizontal</name>
 </attirbute>
 <attirbute>
 <name>android:paddingLeft</name>
 </attirbute>
 <attirbute>
 <name>android:paddingRight</name>
 </attirbute>
 <attirbute>
 <name>android:paddingStart</name>
 </attirbute>
 <attirbute>
 <name>android:paddingTop</name>
 </attirbute>
 <attirbute>
 <name>android:paddingVertical</name>
 </attirbute>
 <attirbute>
 <name>android:requiresFadingEdge</name>
 </attirbute>
 <attirbute>
 <name>android:rotation</name>
 </attirbute>
 <attirbute>
 <name>android:rotationX</name>
 </attirbute>
 <attirbute>
 <name>android:rotationY</name>
 </attirbute>
 <attirbute>
 <name>android:saveEnabled</name>
 </attirbute>
 <attirbute>
 <name>android:scaleX</name>
 </attirbute>
 <attirbute>
 <name>android:scaleY</name>
 </attirbute>
 <attirbute>
 <name>android:scrollIndicators</name>
 </attirbute>
 <attirbute>
 <name>android:scrollX</name>
 </attirbute>
 <attirbute>
 <name>android:scrollY</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarAlwaysDrawHorizontalTrack</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarAlwaysDrawVerticalTrack</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarDefaultDelayBeforeFade</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarFadeDuration</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarSize</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarStyle</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarThumbHorizontal</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarThumbVertical</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarTrackHorizontal</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbarTrackVertical</name>
 </attirbute>
 <attirbute>
 <name>android:scrollbars</name>
 </attirbute>
 <attirbute>
 <name>android:soundEffectsEnabled</name>
 </attirbute>
 <attirbute>
 <name>android:stateListAnimator</name>
 </attirbute>
 <attirbute>
 <name>android:tag</name>
 <description>Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag().</description>
 </attirbute>
 <attirbute>
 <name>android:textAlignment</name>
 </attirbute>
 <attirbute>
 <name>android:textDirection</name>
 </attirbute>
 <attirbute>
 <name>android:theme</name>
 </attirbute>
 <attirbute>
 <name>android:tooltipText</name>
 </attirbute>
 <attirbute>
 <name>android:transformPivotX</name>
 </attirbute>
 <attirbute>
 <name>android:transformPivotY</name>
 </attirbute>
 <attirbute>
 <name>android:transitionName</name>
 </attirbute>
 <attirbute>
 <name>android:translationX</name>
 </attirbute>
 <attirbute>
 <name>android:translationY</name>
 </attirbute>
 <attirbute>
 <name>android:translationZ</name>
 </attirbute>
 <attirbute>
 <name>android:visibility</name>
 </attirbute>
 </class>
 </inherited_xml_attributes>
 <inherited_constants>
 <class>
 <name>android.view.View</name>
 <constant>
 <type>int</type>
 <name>ACCESSIBILITY_LIVE_REGION_ASSERTIVE</name>
 <description>Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>ACCESSIBILITY_LIVE_REGION_NONE</name>
 <description>Live region mode specifying that accessibility services should not automatically announce changes to this view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>ACCESSIBILITY_LIVE_REGION_POLITE</name>
 <description>Live region mode specifying that accessibility services should announce changes to this view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS</name>
 <description>Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE</name>
 <description>Hint indicating that this view can be autofilled with a credit card expiration date.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY</name>
 <description>Hint indicating that this view can be autofilled with a credit card expiration day.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH</name>
 <description>Hint indicating that this view can be autofilled with a credit card expiration month.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR</name>
 <description>Hint indicating that this view can be autofilled with a credit card expiration year.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_NUMBER</name>
 <description>Hint indicating that this view can be autofilled with a credit card number.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE</name>
 <description>Hint indicating that this view can be autofilled with a credit card security code.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_EMAIL_ADDRESS</name>
 <description>Hint indicating that this view can be autofilled with an email address.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_NAME</name>
 <description>Hint indicating that this view can be autofilled with a user&amp;apos;s real name.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_PASSWORD</name>
 <description>Hint indicating that this view can be autofilled with a password.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_PHONE</name>
 <description>Hint indicating that this view can be autofilled with a phone number.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_POSTAL_ADDRESS</name>
 <description>Hint indicating that this view can be autofilled with a postal address.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_POSTAL_CODE</name>
 <description>Hint indicating that this view can be autofilled with a postal code.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>AUTOFILL_HINT_USERNAME</name>
 <description>Hint indicating that this view can be autofilled with a username.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_TYPE_DATE</name>
 <description>Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as &amp;quot;the epoch&amp;quot;, namely January 1, 1970, 00:00:00 GMT (see Date.getTime().</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_TYPE_LIST</name>
 <description>Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_TYPE_NONE</name>
 <description>Autofill type for views that cannot be autofilled.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_TYPE_TEXT</name>
 <description>Autofill type for a text field, which is filled by a CharSequence.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>AUTOFILL_TYPE_TOGGLE</name>
 <description>Autofill type for a togglable field, which is filled by a boolean.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_GLOBAL</name>
 <description>Flag indicating that a drag can cross window boundaries.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION</name>
 <description>When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION</name>
 <description>When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_GLOBAL_URI_READ</name>
 <description>When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_GLOBAL_URI_WRITE</name>
 <description>When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAG_FLAG_OPAQUE</name>
 <description>Flag indicating that the drag shadow will be opaque.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAWING_CACHE_QUALITY_AUTO</name>
 <description>This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAWING_CACHE_QUALITY_HIGH</name>
 <description>This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>DRAWING_CACHE_QUALITY_LOW</name>
 <description>This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FIND_VIEWS_WITH_CONTENT_DESCRIPTION</name>
 <description>Find find views that contain the specified content description.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FIND_VIEWS_WITH_TEXT</name>
 <description>Find views that render the specified text.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUSABLE</name>
 <description>This view wants keystrokes.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUSABLES_ALL</name>
 <description>View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUSABLES_TOUCH_MODE</name>
 <description>View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUSABLE_AUTO</name>
 <description>This view determines focusability automatically.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_BACKWARD</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_DOWN</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_FORWARD</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_LEFT</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_RIGHT</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>FOCUS_UP</name>
 <description>Use with focusSearch(int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>GONE</name>
 <description>This view is invisible, and it doesn&amp;apos;t take any space for layout purposes.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>HAPTIC_FEEDBACK_ENABLED</name>
 <description>View flag indicating whether this view should have haptic feedback enabled for events such as long presses.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_ACCESSIBILITY_AUTO</name>
 <description>Automatically determine whether a view is important for accessibility.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_ACCESSIBILITY_NO</name>
 <description>The view is not important for accessibility.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS</name>
 <description>The view is not important for accessibility, nor are any of its descendant views.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_ACCESSIBILITY_YES</name>
 <description>The view is important for accessibility.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_AUTOFILL_AUTO</name>
 <description>Automatically determine whether a view is important for autofill.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_AUTOFILL_NO</name>
 <description>The view is not important for autofill, but its children (if any) will be traversed.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS</name>
 <description>The view is not important for autofill, and its children (if any) will not be traversed.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_AUTOFILL_YES</name>
 <description>The view is important for autofill, and its children (if any) will be traversed.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS</name>
 <description>The view is important for autofill, but its children (if any) will not be traversed.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>INVISIBLE</name>
 <description>This view is invisible, but it still takes up space for layout purposes.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>KEEP_SCREEN_ON</name>
 <description>View flag indicating that the screen should remain on while the window containing this view is visible to the user.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYER_TYPE_HARDWARE</name>
 <description></description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYER_TYPE_NONE</name>
 <description>Indicates that the view does not have a layer.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYER_TYPE_SOFTWARE</name>
 <description></description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYOUT_DIRECTION_INHERIT</name>
 <description>Horizontal layout direction of this view is inherited from its parent.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYOUT_DIRECTION_LOCALE</name>
 <description>Horizontal layout direction of this view is from deduced from the default language script for the locale.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYOUT_DIRECTION_LTR</name>
 <description>Horizontal layout direction of this view is from Left to Right.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>LAYOUT_DIRECTION_RTL</name>
 <description>Horizontal layout direction of this view is from Right to Left.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>MEASURED_HEIGHT_STATE_SHIFT</name>
 <description>Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>MEASURED_SIZE_MASK</name>
 <description>Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>MEASURED_STATE_MASK</name>
 <description>Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>MEASURED_STATE_TOO_SMALL</name>
 <description>Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>NOT_FOCUSABLE</name>
 <description>This view does not want keystrokes.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>NO_ID</name>
 <description>Used to mark a View that has no ID.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>OVER_SCROLL_ALWAYS</name>
 <description>Always allow a user to over-scroll this view, provided it is a view that can scroll.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>OVER_SCROLL_IF_CONTENT_SCROLLS</name>
 <description>Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>OVER_SCROLL_NEVER</name>
 <description>Never allow a user to over-scroll this view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCREEN_STATE_OFF</name>
 <description>Indicates that the screen has changed state and is now off.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCREEN_STATE_ON</name>
 <description>Indicates that the screen has changed state and is now on.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBARS_INSIDE_INSET</name>
 <description>The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBARS_INSIDE_OVERLAY</name>
 <description>The scrollbar style to display the scrollbars inside the content area, without increasing the padding.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBARS_OUTSIDE_INSET</name>
 <description>The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBARS_OUTSIDE_OVERLAY</name>
 <description>The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBAR_POSITION_DEFAULT</name>
 <description>Position the scroll bar at the default position as determined by the system.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBAR_POSITION_LEFT</name>
 <description>Position the scroll bar along the left edge.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLLBAR_POSITION_RIGHT</name>
 <description>Position the scroll bar along the right edge.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_AXIS_HORIZONTAL</name>
 <description>Indicates scrolling along the horizontal axis.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_AXIS_NONE</name>
 <description>Indicates no axis of view scrolling.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_AXIS_VERTICAL</name>
 <description>Indicates scrolling along the vertical axis.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_BOTTOM</name>
 <description>Scroll indicator direction for the bottom edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_END</name>
 <description>Scroll indicator direction for the ending edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_LEFT</name>
 <description>Scroll indicator direction for the left edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_RIGHT</name>
 <description>Scroll indicator direction for the right edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_START</name>
 <description>Scroll indicator direction for the starting edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SCROLL_INDICATOR_TOP</name>
 <description>Scroll indicator direction for the top edge of the view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SOUND_EFFECTS_ENABLED</name>
 <description>View flag indicating whether this view should have sound effects enabled for events such as clicking and touching.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>STATUS_BAR_HIDDEN</name>
 <description>This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>STATUS_BAR_VISIBLE</name>
 <description>This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_FULLSCREEN</name>
 <description>Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_HIDE_NAVIGATION</name>
 <description>Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_IMMERSIVE</name>
 <description>Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_IMMERSIVE_STICKY</name>
 <description>Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</name>
 <description>Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn&amp;apos;t.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</name>
 <description>Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn&amp;apos;t.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LAYOUT_STABLE</name>
 <description>Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR</name>
 <description>Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LIGHT_STATUS_BAR</name>
 <description>Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_LOW_PROFILE</name>
 <description>Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive &amp;quot;low profile&amp;quot; mode.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_FLAG_VISIBLE</name>
 <description>Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default).</description>
 </constant>
 <constant>
 <type>int</type>
 <name>SYSTEM_UI_LAYOUT_FLAGS</name>
 <description>Flags that can impact the layout in relation to system UI.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_CENTER</name>
 <description>Center the paragraph, e.g.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_GRAVITY</name>
 <description>Default for the root view.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_INHERIT</name>
 <description>Default text alignment.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_TEXT_END</name>
 <description>Align to the end of the paragraph, e.g.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_TEXT_START</name>
 <description>Align to the start of the paragraph, e.g.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_VIEW_END</name>
 <description>Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_ALIGNMENT_VIEW_START</name>
 <description>Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_ANY_RTL</name>
 <description>Text direction is using &amp;quot;any-RTL&amp;quot; algorithm.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_FIRST_STRONG</name>
 <description>Text direction is using &amp;quot;first strong algorithm&amp;quot;.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_FIRST_STRONG_LTR</name>
 <description>Text direction is using &amp;quot;first strong algorithm&amp;quot;.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_FIRST_STRONG_RTL</name>
 <description>Text direction is using &amp;quot;first strong algorithm&amp;quot;.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_INHERIT</name>
 <description>Text direction is inherited through ViewGroup</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_LOCALE</name>
 <description>Text direction is coming from the system Locale.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_LTR</name>
 <description>Text direction is forced to LTR.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>TEXT_DIRECTION_RTL</name>
 <description>Text direction is forced to RTL.</description>
 </constant>
 <constant>
 <type>String</type>
 <name>VIEW_LOG_TAG</name>
 <description>The logging tag used by this class with android.util.Log.</description>
 </constant>
 <constant>
 <type>int</type>
 <name>VISIBLE</name>
 <description>This view is visible.</description>
 </constant>
 </class>
 </inherited_constants>
 <inherited_fields>
 <class>
 <name>android.view.View</name>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>ALPHA</name>
 <description>A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>EMPTY_STATE_SET</name>
 <description>Indicates the view has no states set.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_FOCUSED_SELECTED_STATE_SET</name>
 <description>Indicates the view is enabled, focused and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is enabled, focused, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_FOCUSED_STATE_SET</name>
 <description>Indicates the view is enabled and has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is enabled, focused and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_SELECTED_STATE_SET</name>
 <description>Indicates the view is enabled and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is enabled, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_STATE_SET</name>
 <description>Indicates the view is enabled.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>ENABLED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is enabled and that its window has focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>FOCUSED_SELECTED_STATE_SET</name>
 <description>Indicates the view is focused and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is focused, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>FOCUSED_STATE_SET</name>
 <description>Indicates the view is focused.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>FOCUSED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view has the focus and that its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled, focused and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled, focused, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled and focused.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled, focused and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_SELECTED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_STATE_SET</name>
 <description>Indicates the view is pressed and enabled.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, enabled and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_FOCUSED_SELECTED_STATE_SET</name>
 <description>Indicates the view is pressed, focused and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, focused, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed and focused.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, focused and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_SELECTED_STATE_SET</name>
 <description>Indicates the view is pressed and selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed, selected and its window has the focus.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_STATE_SET</name>
 <description>Indicates the view is pressed.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>PRESSED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is pressed and its window has the focus.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>ROTATION</name>
 <description>A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>ROTATION_X</name>
 <description>A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>ROTATION_Y</name>
 <description>A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>SCALE_X</name>
 <description>A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>SCALE_Y</name>
 <description>A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>SELECTED_STATE_SET</name>
 <description>Indicates the view is selected.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>SELECTED_WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view is selected and that its window has the focus.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>TRANSLATION_X</name>
 <description>A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>TRANSLATION_Y</name>
 <description>A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>TRANSLATION_Z</name>
 <description>A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods.</description>
 </field>
 <field>
 <type>protected static final int[]</type>
 <name>WINDOW_FOCUSED_STATE_SET</name>
 <description>Indicates the view&amp;apos;s window has focus.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>X</name>
 <description>A Property wrapper around the x functionality handled by the setX(float) and getX() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>Y</name>
 <description>A Property wrapper around the y functionality handled by the setY(float) and getY() methods.</description>
 </field>
 <field>
 <type>public static final Property&amp;lt;View, Float&amp;gt;</type>
 <name>Z</name>
 <description>A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods.</description>
 </field>
 </class>
 </inherited_fields>
 <inherited_methods>
 <name>android.view.View</name>
 <class>
 <method>
 <return-value>void</return-value>
 <name>addChildrenForAccessibility(ArrayList&amp;lt;View&amp;gt; outChildren)</name>
 <description>Adds the children of this View relevant for accessibility to the given list as output.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)</name>
 <description>Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addFocusables(ArrayList&amp;lt;View&amp;gt; views, int direction)</name>
 <description>Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addFocusables(ArrayList&amp;lt;View&amp;gt; views, int direction, int focusableMode)</name>
 <description>Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addKeyboardNavigationClusters(Collection&amp;lt;View&amp;gt; views, int direction)</name>
 <description>Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)</name>
 <description>Add a listener for attach state changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addOnLayoutChangeListener(View.OnLayoutChangeListener listener)</name>
 <description>Add a listener that will be called when the bounds of the view change due to layout processing.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)</name>
 <description>Adds a listener which will receive unhandled KeyEvents.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>addTouchables(ArrayList&amp;lt;View&amp;gt; views)</name>
 <description>Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.</description>
 </method>
 <method>
 <return-value>ViewPropertyAnimator</return-value>
 <name>animate()</name>
 <description>This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>announceForAccessibility(CharSequence text)</name>
 <description>Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>autofill(AutofillValue value)</name>
 <description>Automatically fills the content of this view with the value.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>autofill(SparseArray&amp;lt;AutofillValue&amp;gt; values)</name>
 <description>Automatically fills the content of the virtual children within this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>awakenScrollBars(int startDelay, boolean invalidate)</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>awakenScrollBars(int startDelay)</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>awakenScrollBars()</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>bringToFront()</name>
 <description>Change the view&amp;apos;s z order in the tree, so it&amp;apos;s on top of other sibling views.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>buildDrawingCache(boolean autoScale)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>buildDrawingCache()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>buildLayer()</name>
 <description>Forces this view&amp;apos;s layer to be created and this view to be rendered into its layer.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>callOnClick()</name>
 <description>Directly call any attached OnClickListener.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>canResolveLayoutDirection()</name>
 <description>Check if layout direction resolution can be done.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>canResolveTextAlignment()</name>
 <description>Check if text alignment resolution can be done.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>canResolveTextDirection()</name>
 <description>Check if text direction resolution can be done.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>canScrollHorizontally(int direction)</name>
 <description>Check if this view can be scrolled horizontally in a certain direction.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>canScrollVertically(int direction)</name>
 <description>Check if this view can be scrolled vertically in a certain direction.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>cancelDragAndDrop()</name>
 <description>Cancels an ongoing drag and drop operation.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>cancelLongPress()</name>
 <description>Cancels a pending long press.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>cancelPendingInputEvents()</name>
 <description>Cancel any deferred high-level input events that were previously posted to the event queue.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>checkInputConnectionProxy(View view)</name>
 <description>Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>clearAnimation()</name>
 <description>Cancels any animations for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>clearFocus()</name>
 <description>Called when this view wants to give up focus.</description>
 </method>
 <method>
 <return-value>static int</return-value>
 <name>combineMeasuredStates(int curState, int newState)</name>
 <description>Merge two states as returned by getMeasuredState().</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeHorizontalScrollExtent()</name>
 <description></description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeHorizontalScrollOffset()</name>
 <description></description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeHorizontalScrollRange()</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>computeScroll()</name>
 <description>Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.</description>
 </method>
 <method>
 <return-value>WindowInsets</return-value>
 <name>computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)</name>
 <description>Compute insets that should be consumed by this view and the ones that should propagate to those under it.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeVerticalScrollExtent()</name>
 <description></description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeVerticalScrollOffset()</name>
 <description></description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>computeVerticalScrollRange()</name>
 <description></description>
 </method>
 <method>
 <return-value>AccessibilityNodeInfo</return-value>
 <name>createAccessibilityNodeInfo()</name>
 <description>Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>createContextMenu(ContextMenu menu)</name>
 <description>Show the context menu for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>destroyDrawingCache()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>WindowInsets</return-value>
 <name>dispatchApplyWindowInsets(WindowInsets insets)</name>
 <description>Request to apply the given window insets to this view or another view in its subtree.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchCapturedPointerEvent(MotionEvent event)</name>
 <description>Pass a captured pointer event down to the focused view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchConfigurationChanged(Configuration newConfig)</name>
 <description>Dispatch a notification about a resource configuration change down the view hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchDisplayHint(int hint)</name>
 <description>Dispatch a hint about whether this view is displayed.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchDragEvent(DragEvent event)</name>
 <description>Detects if this View is enabled and has a drag event listener.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchDraw(Canvas canvas)</name>
 <description>Called by draw to draw the child views.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchDrawableHotspotChanged(float x, float y)</name>
 <description>Dispatches drawableHotspotChanged to all of this View&amp;apos;s children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchFinishTemporaryDetach()</name>
 <description>Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchGenericFocusedEvent(MotionEvent event)</name>
 <description>Dispatch a generic motion event to the currently focused view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchGenericMotionEvent(MotionEvent event)</name>
 <description>Dispatch a generic motion event.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchGenericPointerEvent(MotionEvent event)</name>
 <description>Dispatch a generic motion event to the view under the first pointer.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchHoverEvent(MotionEvent event)</name>
 <description>Dispatch a hover event.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchKeyEvent(KeyEvent event)</name>
 <description>Dispatch a key event to the next view on the focus path.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchKeyEventPreIme(KeyEvent event)</name>
 <description>Dispatch a key event before it is processed by any input method associated with the view hierarchy.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchKeyShortcutEvent(KeyEvent event)</name>
 <description>Dispatches a key shortcut event.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchNestedFling(float velocityX, float velocityY, boolean consumed)</name>
 <description>Dispatch a fling to a nested scrolling parent.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchNestedPreFling(float velocityX, float velocityY)</name>
 <description>Dispatch a fling to a nested scrolling parent before it is processed by this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)</name>
 <description>Report an accessibility action to this view&amp;apos;s parents for delegated processing.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow)</name>
 <description>Dispatch one step of a nested scroll in progress before this view consumes any portion of it.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow)</name>
 <description>Dispatch one step of a nested scroll in progress.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchPointerCaptureChanged(boolean hasCapture)</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchPopulateAccessibilityEvent(AccessibilityEvent event)</name>
 <description>Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchProvideAutofillStructure(ViewStructure structure, int flags)</name>
 <description>Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchProvideStructure(ViewStructure structure)</name>
 <description>Dispatch creation of ViewStructure down the hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchRestoreInstanceState(SparseArray&amp;lt;Parcelable&amp;gt; container)</name>
 <description>Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchSaveInstanceState(SparseArray&amp;lt;Parcelable&amp;gt; container)</name>
 <description>Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchSetActivated(boolean activated)</name>
 <description>Dispatch setActivated to all of this View&amp;apos;s children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchSetPressed(boolean pressed)</name>
 <description>Dispatch setPressed to all of this View&amp;apos;s children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchSetSelected(boolean selected)</name>
 <description>Dispatch setSelected to all of this View&amp;apos;s children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchStartTemporaryDetach()</name>
 <description>Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchSystemUiVisibilityChanged(int visibility)</name>
 <description>Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchTouchEvent(MotionEvent event)</name>
 <description>Pass the touch screen motion event down to the target view, or this view if it is the target.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchTrackballEvent(MotionEvent event)</name>
 <description>Pass a trackball motion event down to the focused view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>dispatchUnhandledMove(View focused, int direction)</name>
 <description>This method is the last chance for the focused view and its ancestors to respond to an arrow key.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchVisibilityChanged(View changedView, int visibility)</name>
 <description>Dispatch a view visibility change down the view hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchWindowFocusChanged(boolean hasFocus)</name>
 <description>Called when the window containing this view gains or loses window focus.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchWindowSystemUiVisiblityChanged(int visible)</name>
 <description>Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>dispatchWindowVisibilityChanged(int visibility)</name>
 <description>Dispatch a window visibility change down the view hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>draw(Canvas canvas)</name>
 <description>Manually render this view (and all of its children) to the given Canvas.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>drawableHotspotChanged(float x, float y)</name>
 <description>This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>drawableStateChanged()</name>
 <description>This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.</description>
 </method>
 <method>
 <return-value>View</return-value>
 <name>findFocus()</name>
 <description>Find the view in the hierarchy rooted at this view that currently has focus.</description>
 </method>
 <method>
 <return-value>final &amp;lt;T extends View&amp;gt; T</return-value>
 <name>findViewById(int id)</name>
 <description>Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (&amp;lt; 0) or there is no matching view in the hierarchy.</description>
 </method>
 <method>
 <return-value>final &amp;lt;T extends View&amp;gt; T</return-value>
 <name>findViewWithTag(Object tag)</name>
 <description>Look for a child view with the given tag.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>findViewsWithText(ArrayList&amp;lt;View&amp;gt; outViews, CharSequence searched, int flags)</name>
 <description>Finds the Views that contain given text.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>fitSystemWindows(Rect insets)</name>
 <description>This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets.</description>
 </method>
 <method>
 <return-value>View</return-value>
 <name>focusSearch(int direction)</name>
 <description>Find the nearest view in the specified direction that can take focus.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>forceHasOverlappingRendering(boolean hasOverlappingRendering)</name>
 <description>Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>forceLayout()</name>
 <description>Forces this view to be laid out during the next layout pass.</description>
 </method>
 <method>
 <return-value>static int</return-value>
 <name>generateViewId()</name>
 <description>Generate a value suitable for use in setId(int).</description>
 </method>
 <method>
 <return-value>CharSequence</return-value>
 <name>getAccessibilityClassName()</name>
 <description>Return the class name of this object to be used for accessibility purposes.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getAccessibilityLiveRegion()</name>
 <description>Gets the live region mode for this View.</description>
 </method>
 <method>
 <return-value>AccessibilityNodeProvider</return-value>
 <name>getAccessibilityNodeProvider()</name>
 <description>Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.</description>
 </method>
 <method>
 <return-value>CharSequence</return-value>
 <name>getAccessibilityPaneTitle()</name>
 <description>Get the title of the pane for purposes of accessibility.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getAccessibilityTraversalAfter()</name>
 <description>Gets the id of a view after which this one is visited in accessibility traversal.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getAccessibilityTraversalBefore()</name>
 <description>Gets the id of a view before which this one is visited in accessibility traversal.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getAlpha()</name>
 <description>The opacity of the view.</description>
 </method>
 <method>
 <return-value>Animation</return-value>
 <name>getAnimation()</name>
 <description>Get the animation currently associated with this view.</description>
 </method>
 <method>
 <return-value>IBinder</return-value>
 <name>getApplicationWindowToken()</name>
 <description>Retrieve a unique token identifying the top-level &amp;quot;real&amp;quot; window of the window that this view is attached to.</description>
 </method>
 <method>
 <return-value>String[]</return-value>
 <name>getAutofillHints()</name>
 <description>Gets the hints that help an AutofillService determine how to autofill the view with the user&amp;apos;s data.</description>
 </method>
 <method>
 <return-value>final AutofillId</return-value>
 <name>getAutofillId()</name>
 <description>Gets the unique, logical identifier of this view in the activity, for autofill purposes.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getAutofillType()</name>
 <description>Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view.</description>
 </method>
 <method>
 <return-value>AutofillValue</return-value>
 <name>getAutofillValue()</name>
 <description>Gets the View&amp;apos;s current autofill value.</description>
 </method>
 <method>
 <return-value>Drawable</return-value>
 <name>getBackground()</name>
 <description>Gets the background drawable</description>
 </method>
 <method>
 <return-value>ColorStateList</return-value>
 <name>getBackgroundTintList()</name>
 <description>Return the tint applied to the background drawable, if specified.</description>
 </method>
 <method>
 <return-value>PorterDuff.Mode</return-value>
 <name>getBackgroundTintMode()</name>
 <description>Return the blending mode used to apply the tint to the background drawable, if specified.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getBaseline()</name>
 <description></description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getBottom()</name>
 <description>Bottom position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getBottomFadingEdgeStrength()</name>
 <description>Returns the strength, or intensity, of the bottom faded edge.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getBottomPaddingOffset()</name>
 <description>Amount by which to extend the bottom fading region.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getCameraDistance()</name>
 <description>Gets the distance along the Z axis from the camera to this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>getClipBounds(Rect outRect)</name>
 <description>Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view&amp;apos;s clip bounds are null.</description>
 </method>
 <method>
 <return-value>Rect</return-value>
 <name>getClipBounds()</name>
 <description>Returns a copy of the current clipBounds.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getClipToOutline()</name>
 <description>Returns whether the Outline should be used to clip the contents of the View.</description>
 </method>
 <method>
 <return-value>CharSequence</return-value>
 <name>getContentDescription()</name>
 <description>Returns the View&amp;apos;s content description.</description>
 </method>
 <method>
 <return-value>final Context</return-value>
 <name>getContext()</name>
 <description>Returns the context the view is running in, through which it can access the current theme, resources, etc.</description>
 </method>
 <method>
 <return-value>ContextMenu.ContextMenuInfo</return-value>
 <name>getContextMenuInfo()</name>
 <description>Views should implement this if they have extra information to associate with the context menu.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getDefaultFocusHighlightEnabled()</name>
 <description>/** Returns whether this View should use a default focus highlight when it gets focused but doesn&amp;apos;t have R.attr.state_focused defined in its background.</description>
 </method>
 <method>
 <return-value>static int</return-value>
 <name>getDefaultSize(int size, int measureSpec)</name>
 <description>Utility to return a default size.</description>
 </method>
 <method>
 <return-value>Display</return-value>
 <name>getDisplay()</name>
 <description>Gets the logical display to which the view&amp;apos;s window has been attached.</description>
 </method>
 <method>
 <return-value>final int[]</return-value>
 <name>getDrawableState()</name>
 <description>Return an array of resource IDs of the drawable states representing the current state of the view.</description>
 </method>
 <method>
 <return-value>Bitmap</return-value>
 <name>getDrawingCache()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>Bitmap</return-value>
 <name>getDrawingCache(boolean autoScale)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getDrawingCacheBackgroundColor()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getDrawingCacheQuality()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getDrawingRect(Rect outRect)</name>
 <description>Return the visible drawing bounds of your view.</description>
 </method>
 <method>
 <return-value>long</return-value>
 <name>getDrawingTime()</name>
 <description></description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getElevation()</name>
 <description>The base elevation of this view relative to its parent, in pixels.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>getFilterTouchesWhenObscured()</name>
 <description>Gets whether the framework should discard touches when the view&amp;apos;s window is obscured by another visible window.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>getFitsSystemWindows()</name>
 <description>Check for state of setFitsSystemWindows(boolean).</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getFocusable()</name>
 <description>Returns the focusable setting for this view.</description>
 </method>
 <method>
 <return-value>ArrayList&amp;lt;View&amp;gt;</return-value>
 <name>getFocusables(int direction)</name>
 <description>Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getFocusedRect(Rect r)</name>
 <description>When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.</description>
 </method>
 <method>
 <return-value>Drawable</return-value>
 <name>getForeground()</name>
 <description>Returns the drawable used as the foreground of this View.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getForegroundGravity()</name>
 <description>Describes how the foreground is positioned.</description>
 </method>
 <method>
 <return-value>ColorStateList</return-value>
 <name>getForegroundTintList()</name>
 <description>Return the tint applied to the foreground drawable, if specified.</description>
 </method>
 <method>
 <return-value>PorterDuff.Mode</return-value>
 <name>getForegroundTintMode()</name>
 <description>Return the blending mode used to apply the tint to the foreground drawable, if specified.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getGlobalVisibleRect(Rect r)</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>getGlobalVisibleRect(Rect r, Point globalOffset)</name>
 <description>If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates.</description>
 </method>
 <method>
 <return-value>Handler</return-value>
 <name>getHandler()</name>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getHasOverlappingRendering()</name>
 <description>Returns the value for overlapping rendering that is used internally.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getHeight()</name>
 <description>Return the height of your view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getHitRect(Rect outRect)</name>
 <description>Hit rectangle in parent&amp;apos;s coordinates</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getHorizontalFadingEdgeLength()</name>
 <description>Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getHorizontalScrollbarHeight()</name>
 <description>Returns the height of the horizontal scrollbar.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getId()</name>
 <description>Returns this view&amp;apos;s identifier.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getImportantForAccessibility()</name>
 <description>Gets the mode for determining whether this View is important for accessibility.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getImportantForAutofill()</name>
 <description>Gets the mode for determining whether this view is important for autofill.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>getKeepScreenOn()</name>
 <description>Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON.</description>
 </method>
 <method>
 <return-value>KeyEvent.DispatcherState</return-value>
 <name>getKeyDispatcherState()</name>
 <description>Return the global KeyEvent.DispatcherState for this view&amp;apos;s window.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getLabelFor()</name>
 <description>Gets the id of a view for which this view serves as a label for accessibility purposes.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getLayerType()</name>
 <description>Indicates what type of layer is currently associated with this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getLayoutDirection()</name>
 <description>Returns the resolved layout direction for this view.</description>
 </method>
 <method>
 <return-value>ViewGroup.LayoutParams</return-value>
 <name>getLayoutParams()</name>
 <description>Get the LayoutParams associated with this view.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getLeft()</name>
 <description>Left position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getLeftFadingEdgeStrength()</name>
 <description>Returns the strength, or intensity, of the left faded edge.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getLeftPaddingOffset()</name>
 <description>Amount by which to extend the left fading region.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getLocalVisibleRect(Rect r)</name>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getLocationInWindow(int[] outLocation)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getLocationOnScreen(int[] outLocation)</name>
 <description></description>
 </method>
 <method>
 <return-value>Matrix</return-value>
 <name>getMatrix()</name>
 <description>The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getMeasuredHeight()</name>
 <description>Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK).</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getMeasuredHeightAndState()</name>
 <description>Return the full height measurement information for this view as computed by the most recent call to measure(int, int).</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getMeasuredState()</name>
 <description>Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getMeasuredWidth()</name>
 <description>Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK).</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getMeasuredWidthAndState()</name>
 <description>Return the full width measurement information for this view as computed by the most recent call to measure(int, int).</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getMinimumHeight()</name>
 <description>Returns the minimum height of the view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getMinimumWidth()</name>
 <description>Returns the minimum width of the view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextClusterForwardId()</name>
 <description>Gets the id of the root of the next keyboard navigation cluster.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextFocusDownId()</name>
 <description>Gets the id of the view to use when the next focus is FOCUS_DOWN.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextFocusForwardId()</name>
 <description>Gets the id of the view to use when the next focus is FOCUS_FORWARD.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextFocusLeftId()</name>
 <description>Gets the id of the view to use when the next focus is FOCUS_LEFT.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextFocusRightId()</name>
 <description>Gets the id of the view to use when the next focus is FOCUS_RIGHT.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getNextFocusUpId()</name>
 <description>Gets the id of the view to use when the next focus is FOCUS_UP.</description>
 </method>
 <method>
 <return-value>View.OnFocusChangeListener</return-value>
 <name>getOnFocusChangeListener()</name>
 <description>Returns the focus-change callback registered for this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getOutlineAmbientShadowColor()</name>
 </method>
 <method>
 <return-value>ViewOutlineProvider</return-value>
 <name>getOutlineProvider()</name>
 <description>Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getOutlineSpotShadowColor()</name>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getOverScrollMode()</name>
 <description>Returns the over-scroll mode for this view.</description>
 </method>
 <method>
 <return-value>ViewOverlay</return-value>
 <name>getOverlay()</name>
 <description>Returns the overlay for this view, creating it if it does not yet exist.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingBottom()</name>
 <description>Returns the bottom padding of this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingEnd()</name>
 <description>Returns the end padding of this view depending on its resolved layout direction.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingLeft()</name>
 <description>Returns the left padding of this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingRight()</name>
 <description>Returns the right padding of this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingStart()</name>
 <description>Returns the start padding of this view depending on its resolved layout direction.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getPaddingTop()</name>
 <description>Returns the top padding of this view.</description>
 </method>
 <method>
 <return-value>final ViewParent</return-value>
 <name>getParent()</name>
 <description>Gets the parent of this view.</description>
 </method>
 <method>
 <return-value>ViewParent</return-value>
 <name>getParentForAccessibility()</name>
 <description>Gets the parent for accessibility purposes.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getPivotX()</name>
 <description>The x location of the point around which the view is rotated and scaled.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getPivotY()</name>
 <description>The y location of the point around which the view is rotated and scaled.</description>
 </method>
 <method>
 <return-value>PointerIcon</return-value>
 <name>getPointerIcon()</name>
 <description>Gets the pointer icon for the current view.</description>
 </method>
 <method>
 <return-value>Resources</return-value>
 <name>getResources()</name>
 <description>Returns the resources associated with this view.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>getRevealOnFocusHint()</name>
 <description>Returns this view&amp;apos;s preference for reveal behavior when it gains focus.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getRight()</name>
 <description>Right position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getRightFadingEdgeStrength()</name>
 <description>Returns the strength, or intensity, of the right faded edge.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getRightPaddingOffset()</name>
 <description>Amount by which to extend the right fading region.</description>
 </method>
 <method>
 <return-value>View</return-value>
 <name>getRootView()</name>
 <description></description>
 </method>
 <method>
 <return-value>WindowInsets</return-value>
 <name>getRootWindowInsets()</name>
 <description>Provide original WindowInsets that are dispatched to the view hierarchy.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getRotation()</name>
 <description>The degrees that the view is rotated around the pivot point.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getRotationX()</name>
 <description>The degrees that the view is rotated around the horizontal axis through the pivot point.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getRotationY()</name>
 <description>The degrees that the view is rotated around the vertical axis through the pivot point.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getScaleX()</name>
 <description>The amount that the view is scaled in x around the pivot point, as a proportion of the view&amp;apos;s unscaled width.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getScaleY()</name>
 <description>The amount that the view is scaled in y around the pivot point, as a proportion of the view&amp;apos;s unscaled height.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getScrollBarDefaultDelayBeforeFade()</name>
 <description>Returns the delay before scrollbars fade.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getScrollBarFadeDuration()</name>
 <description>Returns the scrollbar fade duration.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getScrollBarSize()</name>
 <description>Returns the scrollbar size.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getScrollBarStyle()</name>
 <description></description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getScrollIndicators()</name>
 <description>Returns a bitmask representing the enabled scroll indicators.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getScrollX()</name>
 <description>Return the scrolled left position of this view.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getScrollY()</name>
 <description>Return the scrolled top position of this view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getSolidColor()</name>
 <description>Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.</description>
 </method>
 <method>
 <return-value>StateListAnimator</return-value>
 <name>getStateListAnimator()</name>
 <description>Returns the current StateListAnimator if exists.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getSuggestedMinimumHeight()</name>
 <description>Returns the suggested minimum height that the view should use.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getSuggestedMinimumWidth()</name>
 <description>Returns the suggested minimum width that the view should use.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getSystemUiVisibility()</name>
 <description>Returns the last setSystemUiVisibility(int) that this view has requested.</description>
 </method>
 <method>
 <return-value>Object</return-value>
 <name>getTag()</name>
 <description>Returns this view&amp;apos;s tag.</description>
 </method>
 <method>
 <return-value>Object</return-value>
 <name>getTag(int key)</name>
 <description>Returns the tag associated with this view and the specified key.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getTextAlignment()</name>
 <description>Return the resolved text alignment.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getTextDirection()</name>
 <description>Return the resolved text direction.</description>
 </method>
 <method>
 <return-value>CharSequence</return-value>
 <name>getTooltipText()</name>
 <description>Returns the view&amp;apos;s tooltip text.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getTop()</name>
 <description>Top position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getTopFadingEdgeStrength()</name>
 <description>Returns the strength, or intensity, of the top faded edge.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getTopPaddingOffset()</name>
 <description>Amount by which to extend the top fading region.</description>
 </method>
 <method>
 <return-value>TouchDelegate</return-value>
 <name>getTouchDelegate()</name>
 <description>Gets the TouchDelegate for this View.</description>
 </method>
 <method>
 <return-value>ArrayList&amp;lt;View&amp;gt;</return-value>
 <name>getTouchables()</name>
 <description>Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.</description>
 </method>
 <method>
 <return-value>String</return-value>
 <name>getTransitionName()</name>
 <description>Returns the name of the View to be used to identify Views in Transitions.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getTranslationX()</name>
 <description>The horizontal location of this view relative to its left position.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getTranslationY()</name>
 <description>The vertical location of this view relative to its top position.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getTranslationZ()</name>
 <description>The depth location of this view relative to its elevation.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getVerticalFadingEdgeLength()</name>
 <description>Returns the size of the vertical faded edges used to indicate that more content in this view is visible.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getVerticalScrollbarPosition()</name>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getVerticalScrollbarWidth()</name>
 <description>Returns the width of the vertical scrollbar.</description>
 </method>
 <method>
 <return-value>ViewTreeObserver</return-value>
 <name>getViewTreeObserver()</name>
 <description>Returns the ViewTreeObserver for this view&amp;apos;s hierarchy.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getVisibility()</name>
 <description>Returns the visibility status for this view.</description>
 </method>
 <method>
 <return-value>final int</return-value>
 <name>getWidth()</name>
 <description>Return the width of your view.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getWindowAttachCount()</name>
 </method>
 <method>
 <return-value>WindowId</return-value>
 <name>getWindowId()</name>
 <description>Retrieve the WindowId for the window this view is currently attached to.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getWindowSystemUiVisibility()</name>
 <description>Returns the current system UI visibility that is currently set for the entire window.</description>
 </method>
 <method>
 <return-value>IBinder</return-value>
 <name>getWindowToken()</name>
 <description>Retrieve a unique token identifying the window this view is attached to.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>getWindowVisibility()</name>
 <description>Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>getWindowVisibleDisplayFrame(Rect outRect)</name>
 <description>Retrieve the overall visible display size in which the window this view is attached to has been positioned in.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getX()</name>
 <description>The visual x position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getY()</name>
 <description>The visual y position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>float</return-value>
 <name>getZ()</name>
 <description>The visual z position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasExplicitFocusable()</name>
 <description>Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasFocus()</name>
 <description>Returns true if this view has focus itself, or is the ancestor of the view that has focus.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasFocusable()</name>
 <description>Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasNestedScrollingParent()</name>
 <description>Returns true if this view has a nested scrolling parent.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasOnClickListeners()</name>
 <description>Return whether this view has an attached OnClickListener.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasOverlappingRendering()</name>
 <description>Returns whether this View has content which overlaps.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasPointerCapture()</name>
 <description>Checks pointer capture status.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasTransientState()</name>
 <description>Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>hasWindowFocus()</name>
 <description>Returns true if this view is in a window that currently has window focus.</description>
 </method>
 <method>
 <return-value>static View</return-value>
 <name>inflate(Context context, int resource, ViewGroup root)</name>
 <description>Inflate a view from an XML resource.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>invalidate()</name>
 <description>Invalidate the whole view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>invalidate(Rect dirty)</name>
 <description>This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>invalidate(int l, int t, int r, int b)</name>
 <description>This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>invalidateDrawable(Drawable drawable)</name>
 <description>Invalidates the specified Drawable.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>invalidateOutline()</name>
 <description>Called to rebuild this View&amp;apos;s Outline from its outline provider</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isAccessibilityFocused()</name>
 <description>Returns whether this View is accessibility focused.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isAccessibilityHeading()</name>
 <description>Gets whether this view is a heading for accessibility purposes.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isActivated()</name>
 <description>Indicates the activation state of this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isAttachedToWindow()</name>
 <description>Returns true if this view is currently attached to a window.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isClickable()</name>
 <description>Indicates whether this view reacts to click events or not.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isContextClickable()</name>
 <description>Indicates whether this view reacts to context clicks or not.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isDirty()</name>
 <description>True if this view has changed since the last time being drawn.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isDrawingCacheEnabled()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isDuplicateParentStateEnabled()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isEnabled()</name>
 <description>Returns the enabled status for this view.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isFocusable()</name>
 <description>Returns whether this View is currently able to take focus.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isFocusableInTouchMode()</name>
 <description>When a view is focusable, it may not want to take focus when in touch mode.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isFocused()</name>
 <description>Returns true if this view has focus</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isFocusedByDefault()</name>
 <description>Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isHapticFeedbackEnabled()</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isHardwareAccelerated()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isHorizontalFadingEdgeEnabled()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isHorizontalScrollBarEnabled()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isHovered()</name>
 <description>Returns true if the view is currently hovered.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isImportantForAccessibility()</name>
 <description>Computes whether this view should be exposed for accessibility.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isImportantForAutofill()</name>
 <description>Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isInEditMode()</name>
 <description>Indicates whether this View is currently in edit mode.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isInLayout()</name>
 <description>Returns whether the view hierarchy is currently undergoing a layout pass.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isInTouchMode()</name>
 <description>Returns whether the device is currently in touch mode.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isKeyboardNavigationCluster()</name>
 <description>Returns whether this View is a root of a keyboard navigation cluster.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isLaidOut()</name>
 <description>Returns true if this view has been through at least one layout since it was last attached to or detached from a window.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isLayoutDirectionResolved()</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isLayoutRequested()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isLongClickable()</name>
 <description>Indicates whether this view reacts to long click events or not.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isNestedScrollingEnabled()</name>
 <description>Returns true if nested scrolling is enabled for this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isOpaque()</name>
 <description>Indicates whether this View is opaque.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isPaddingOffsetRequired()</name>
 <description>If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isPaddingRelative()</name>
 <description>Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isPivotSet()</name>
 <description>Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isPressed()</name>
 <description>Indicates whether the view is currently in pressed state.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isSaveEnabled()</name>
 <description>Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isSaveFromParentEnabled()</name>
 <description>Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isScreenReaderFocusable()</name>
 <description>Returns whether the view should be treated as a focusable unit by screen reader accessibility tools.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isScrollContainer()</name>
 <description>Indicates whether this view is one of the set of scrollable containers in its window.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isScrollbarFadingEnabled()</name>
 <description>Returns true if scrollbars will fade when this view is not scrolling</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isSelected()</name>
 <description>Indicates the selection state of this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isShown()</name>
 <description>Returns the visibility of this view and all of its ancestors</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isSoundEffectsEnabled()</name>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>isTemporarilyDetached()</name>
 <description>Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach().</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isTextAlignmentResolved()</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isTextDirectionResolved()</name>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isVerticalFadingEdgeEnabled()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isVerticalScrollBarEnabled()</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>isVisibleToUserForAutofill(int virtualId)</name>
 <description>Computes whether this virtual autofill view is visible to the user.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>jumpDrawablesToCurrentState()</name>
 <description>Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.</description>
 </method>
 <method>
 <return-value>View</return-value>
 <name>keyboardNavigationClusterSearch(View currentCluster, int direction)</name>
 <description>Find the nearest keyboard navigation cluster in the specified direction.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>layout(int l, int t, int r, int b)</name>
 <description>Assign a size and position to a view and all of its descendants</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>measure(int widthMeasureSpec, int heightMeasureSpec)</name>
 <description></description>
 </method>
 <method>
 <return-value>static int[]</return-value>
 <name>mergeDrawableStates(int[] baseState, int[] additionalState)</name>
 <description>Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>offsetLeftAndRight(int offset)</name>
 <description>Offset this view&amp;apos;s horizontal location by the specified amount of pixels.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>offsetTopAndBottom(int offset)</name>
 <description>Offset this view&amp;apos;s vertical location by the specified number of pixels.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onAnimationEnd()</name>
 <description>Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onAnimationStart()</name>
 <description>Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.</description>
 </method>
 <method>
 <return-value>WindowInsets</return-value>
 <name>onApplyWindowInsets(WindowInsets insets)</name>
 <description>Called when the view should apply WindowInsets according to its internal policy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onAttachedToWindow()</name>
 <description>This is called when the view is attached to a window.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onCancelPendingInputEvents()</name>
 <description>Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onCapturedPointerEvent(MotionEvent event)</name>
 <description>Implement this method to handle captured pointer events</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onCheckIsTextEditor()</name>
 <description>Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onConfigurationChanged(Configuration newConfig)</name>
 <description>Called when the current configuration of the resources being used by the application have changed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onCreateContextMenu(ContextMenu menu)</name>
 <description>Views should implement this if the view itself is going to add items to the context menu.</description>
 </method>
 <method>
 <return-value>int[]</return-value>
 <name>onCreateDrawableState(int extraSpace)</name>
 <description>Generate the new Drawable state for this view.</description>
 </method>
 <method>
 <return-value>InputConnection</return-value>
 <name>onCreateInputConnection(EditorInfo outAttrs)</name>
 <description>Create a new InputConnection for an InputMethod to interact with the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onDetachedFromWindow()</name>
 <description>This is called when the view is detached from a window.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onDisplayHint(int hint)</name>
 <description>Gives this view a hint about whether is displayed or not.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onDragEvent(DragEvent event)</name>
 <description>Handles drag events sent by the system following a call to startDragAndDrop().</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onDraw(Canvas canvas)</name>
 <description>Implement this to do your drawing.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onDrawForeground(Canvas canvas)</name>
 <description>Draw any foreground content for this view.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>onDrawScrollBars(Canvas canvas)</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onFilterTouchEventForSecurity(MotionEvent event)</name>
 <description>Filter the touch event to apply security policies.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onFinishInflate()</name>
 <description>Finalize inflating a view from XML.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onFinishTemporaryDetach()</name>
 <description>Called after onStartTemporaryDetach() when the container is done changing the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)</name>
 <description>Called by the view system when the focus state of this view changes.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onGenericMotionEvent(MotionEvent event)</name>
 <description>Implement this method to handle generic motion events.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onHoverChanged(boolean hovered)</name>
 <description>Implement this method to handle hover state changes.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onHoverEvent(MotionEvent event)</name>
 <description>Implement this method to handle hover events.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onInitializeAccessibilityEvent(AccessibilityEvent event)</name>
 <description>Initializes an AccessibilityEvent with information about this View which is the event source.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)</name>
 <description>Initializes an AccessibilityNodeInfo with information about this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyDown(int keyCode, KeyEvent event)</name>
 <description>Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyLongPress(int keyCode, KeyEvent event)</name>
 <description>Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn&amp;apos;t handle the event).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)</name>
 <description>Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn&amp;apos;t handle the event).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyPreIme(int keyCode, KeyEvent event)</name>
 <description>Handle a key event before it is processed by any input method associated with the view hierarchy.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyShortcut(int keyCode, KeyEvent event)</name>
 <description>Called on the focused view when a key shortcut event is not handled.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onKeyUp(int keyCode, KeyEvent event)</name>
 <description>Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onLayout(boolean changed, int left, int top, int right, int bottom)</name>
 <description>Called from layout when this view should assign a size and position to each of its children.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)</name>
 <description>Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onPointerCaptureChange(boolean hasCapture)</name>
 <description>Called when the window has just acquired or lost pointer capture.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onPopulateAccessibilityEvent(AccessibilityEvent event)</name>
 <description>Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onProvideAutofillStructure(ViewStructure structure, int flags)</name>
 <description>Populates a ViewStructure to fullfil an autofill request.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onProvideAutofillVirtualStructure(ViewStructure structure, int flags)</name>
 <description>Populates a ViewStructure containing virtual children to fullfil an autofill request.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onProvideStructure(ViewStructure structure)</name>
 <description>Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onProvideVirtualStructure(ViewStructure structure)</name>
 <description>Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.</description>
 </method>
 <method>
 <return-value>PointerIcon</return-value>
 <name>onResolvePointerIcon(MotionEvent event, int pointerIndex)</name>
 <description>Returns the pointer icon for the motion event, or null if it doesn&amp;apos;t specify the icon.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onRestoreInstanceState(Parcelable state)</name>
 <description>Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onRtlPropertiesChanged(int layoutDirection)</name>
 <description>Called when any RTL property (layout direction or text direction or text alignment) has been changed.</description>
 </method>
 <method>
 <return-value>Parcelable</return-value>
 <name>onSaveInstanceState()</name>
 <description>Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onScreenStateChanged(int screenState)</name>
 <description>This method is called whenever the state of the screen this view is attached to changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onScrollChanged(int l, int t, int oldl, int oldt)</name>
 <description>This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onSetAlpha(int alpha)</name>
 <description>Invoked if there is a Transform that involves alpha.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onSizeChanged(int w, int h, int oldw, int oldh)</name>
 <description>This is called during layout when the size of this view has changed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onStartTemporaryDetach()</name>
 <description>This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onTouchEvent(MotionEvent event)</name>
 <description>Implement this method to handle touch screen motion events.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>onTrackballEvent(MotionEvent event)</name>
 <description>Implement this method to handle trackball motion events.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onVisibilityAggregated(boolean isVisible)</name>
 <description>Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onVisibilityChanged(View changedView, int visibility)</name>
 <description>Called when the visibility of the view or an ancestor of the view has changed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onWindowFocusChanged(boolean hasWindowFocus)</name>
 <description>Called when the window containing this view gains or loses focus.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onWindowSystemUiVisibilityChanged(int visible)</name>
 <description>Override to find out when the window&amp;apos;s requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility().</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>onWindowVisibilityChanged(int visibility)</name>
 <description>Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE).</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent)</name>
 <description>Scroll the view with standard behavior for scrolling beyond the normal content boundaries.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performAccessibilityAction(int action, Bundle arguments)</name>
 <description>Performs the specified accessibility action on the view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performClick()</name>
 <description>Call this view&amp;apos;s OnClickListener, if it is defined.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performContextClick(float x, float y)</name>
 <description>Call this view&amp;apos;s OnContextClickListener, if it is defined.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performContextClick()</name>
 <description>Call this view&amp;apos;s OnContextClickListener, if it is defined.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performHapticFeedback(int feedbackConstant)</name>
 <description>BZZZTT!!1!</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performHapticFeedback(int feedbackConstant, int flags)</name>
 <description>BZZZTT!!1!</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performLongClick(float x, float y)</name>
 <description>Calls this view&amp;apos;s OnLongClickListener, if it is defined.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>performLongClick()</name>
 <description>Calls this view&amp;apos;s OnLongClickListener, if it is defined.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>playSoundEffect(int soundConstant)</name>
 <description>Play a sound effect for this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>post(Runnable action)</name>
 <description></description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>postDelayed(Runnable action, long delayMillis)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidate()</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidate(int left, int top, int right, int bottom)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidateDelayed(long delayMilliseconds)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidateOnAnimation(int left, int top, int right, int bottom)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postInvalidateOnAnimation()</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postOnAnimation(Runnable action)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>postOnAnimationDelayed(Runnable action, long delayMillis)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>refreshDrawableState()</name>
 <description>Call this to force a view to update its drawable state.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>releasePointerCapture()</name>
 <description>Releases the pointer capture.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>removeCallbacks(Runnable action)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)</name>
 <description>Remove a listener for attach state changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>removeOnLayoutChangeListener(View.OnLayoutChangeListener listener)</name>
 <description>Remove a listener for layout changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)</name>
 <description>Removes a listener which will receive unhandled KeyEvents.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>requestApplyInsets()</name>
 <description>Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>requestFitSystemWindows()</name>
 <description>This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>requestFocus(int direction)</name>
 <description>Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>requestFocus()</name>
 <description>Call this to try to give focus to a specific view or to one of its descendants.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>requestFocus(int direction, Rect previouslyFocusedRect)</name>
 <description>Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>requestFocusFromTouch()</name>
 <description>Call this to try to give focus to a specific view or to one of its descendants.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>requestLayout()</name>
 <description>Call this when something has changed which has invalidated the layout of this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>requestPointerCapture()</name>
 <description>Requests pointer capture mode.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>requestRectangleOnScreen(Rect rectangle)</name>
 <description>Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>requestRectangleOnScreen(Rect rectangle, boolean immediate)</name>
 <description>Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>requestUnbufferedDispatch(MotionEvent event)</name>
 <description>Request unbuffered dispatch of the given stream of MotionEvents to this View.</description>
 </method>
 <method>
 <return-value>final &amp;lt;T extends View&amp;gt; T</return-value>
 <name>requireViewById(int id)</name>
 <description>Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>resetPivot()</name>
 <description>Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float).</description>
 </method>
 <method>
 <return-value>static int</return-value>
 <name>resolveSize(int size, int measureSpec)</name>
 <description>Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result.</description>
 </method>
 <method>
 <return-value>static int</return-value>
 <name>resolveSizeAndState(int size, int measureSpec, int childMeasuredState)</name>
 <description>Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>restoreDefaultFocus()</name>
 <description>Gives focus to the default-focus view in the view hierarchy that has this view as a root.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>restoreHierarchyState(SparseArray&amp;lt;Parcelable&amp;gt; container)</name>
 <description>Restore this view hierarchy&amp;apos;s frozen state from the given container.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>saveHierarchyState(SparseArray&amp;lt;Parcelable&amp;gt; container)</name>
 <description>Store this view hierarchy&amp;apos;s frozen state into the given container.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>scheduleDrawable(Drawable who, Runnable what, long when)</name>
 <description>Schedules an action on a drawable to occur at a specified time.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>scrollBy(int x, int y)</name>
 <description>Move the scrolled position of your view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>scrollTo(int x, int y)</name>
 <description>Set the scrolled position of your view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>sendAccessibilityEvent(int eventType)</name>
 <description>Sends an accessibility event of the given type.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>sendAccessibilityEventUnchecked(AccessibilityEvent event)</name>
 <description>This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityDelegate(View.AccessibilityDelegate delegate)</name>
 <description>Sets a delegate for implementing accessibility support via composition (as opposed to inheritance).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityHeading(boolean isHeading)</name>
 <description>Set if view is a heading for a section of content for accessibility purposes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityLiveRegion(int mode)</name>
 <description>Sets the live region mode for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle)</name>
 <description>Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityTraversalAfter(int afterId)</name>
 <description>Sets the id of a view after which this one is visited in accessibility traversal.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAccessibilityTraversalBefore(int beforeId)</name>
 <description>Sets the id of a view before which this one is visited in accessibility traversal.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setActivated(boolean activated)</name>
 <description>Changes the activated state of this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAlpha(float alpha)</name>
 <description>Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAnimation(Animation animation)</name>
 <description>Sets the next animation to play for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAutofillHints(String... autofillHints)</name>
 <description>Sets the hints that help an AutofillService determine how to autofill the view with the user&amp;apos;s data.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setAutofillId(AutofillId id)</name>
 <description>Sets the unique, logical identifier of this view in the activity, for autofill purposes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackground(Drawable background)</name>
 <description>Set the background to a given Drawable, or remove the background.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackgroundColor(int color)</name>
 <description>Sets the background color for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackgroundDrawable(Drawable background)</name>
 <description>This method was deprecated in API level 16. use setBackground(Drawable) instead</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackgroundResource(int resid)</name>
 <description>Set the background to a given resource.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackgroundTintList(ColorStateList tint)</name>
 <description>Applies a tint to the background drawable.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setBackgroundTintMode(PorterDuff.Mode tintMode)</name>
 <description>Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setBottom(int bottom)</name>
 <description>Sets the bottom position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setCameraDistance(float distance)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setClickable(boolean clickable)</name>
 <description>Enables or disables click events for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setClipBounds(Rect clipBounds)</name>
 <description>Sets a rectangular area on this view to which the view will be clipped when it is drawn.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setClipToOutline(boolean clipToOutline)</name>
 <description>Sets whether the View&amp;apos;s Outline should be used to clip the contents of the View.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setContentDescription(CharSequence contentDescription)</name>
 <description>Sets the View&amp;apos;s content description.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setContextClickable(boolean contextClickable)</name>
 <description>Enables or disables context clicking for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled)</name>
 <description>Sets whether this View should use a default focus highlight when it gets focused but doesn&amp;apos;t have R.attr.state_focused defined in its background.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setDrawingCacheBackgroundColor(int color)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setDrawingCacheEnabled(boolean enabled)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setDrawingCacheQuality(int quality)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setDuplicateParentStateEnabled(boolean enabled)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setElevation(float elevation)</name>
 <description>Sets the base elevation of this view, in pixels.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setEnabled(boolean enabled)</name>
 <description>Set the enabled state of this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFadingEdgeLength(int length)</name>
 <description>Set the size of the faded edge used to indicate that more content in this view is available.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFilterTouchesWhenObscured(boolean enabled)</name>
 <description>Sets whether the framework should discard touches when the view&amp;apos;s window is obscured by another visible window.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFitsSystemWindows(boolean fitSystemWindows)</name>
 <description>Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFocusable(boolean focusable)</name>
 <description>Set whether this view can receive the focus.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFocusable(int focusable)</name>
 <description>Sets whether this view can receive focus.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFocusableInTouchMode(boolean focusableInTouchMode)</name>
 <description>Set whether this view can receive focus while in touch mode.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setFocusedByDefault(boolean isFocusedByDefault)</name>
 <description>Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setForeground(Drawable foreground)</name>
 <description>Supply a Drawable that is to be rendered on top of all of the content in the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setForegroundGravity(int gravity)</name>
 <description>Describes how the foreground is positioned.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setForegroundTintList(ColorStateList tint)</name>
 <description>Applies a tint to the foreground drawable.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setForegroundTintMode(PorterDuff.Mode tintMode)</name>
 <description>Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setHapticFeedbackEnabled(boolean hapticFeedbackEnabled)</name>
 <description>Set whether this view should have haptic feedback for events such as long presses.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setHasTransientState(boolean hasTransientState)</name>
 <description>Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setHovered(boolean hovered)</name>
 <description>Sets whether the view is currently hovered.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setId(int id)</name>
 <description>Sets the identifier for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setImportantForAccessibility(int mode)</name>
 <description>Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setImportantForAutofill(int mode)</name>
 <description>Sets the mode for determining whether this view is considered important for autofill.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setKeepScreenOn(boolean keepScreenOn)</name>
 <description>Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setKeyboardNavigationCluster(boolean isCluster)</name>
 <description>Set whether this view is a root of a keyboard navigation cluster.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLabelFor(int id)</name>
 <description>Sets the id of a view for which this view serves as a label for accessibility purposes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLayerPaint(Paint paint)</name>
 <description>Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLayerType(int layerType, Paint paint)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLayoutDirection(int layoutDirection)</name>
 <description>Set the layout direction for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLayoutParams(ViewGroup.LayoutParams params)</name>
 <description>Set the layout parameters associated with this view.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setLeft(int left)</name>
 <description>Sets the left position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setLongClickable(boolean longClickable)</name>
 <description>Enables or disables long click events for this view.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setMeasuredDimension(int measuredWidth, int measuredHeight)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setMinimumHeight(int minHeight)</name>
 <description>Sets the minimum height of the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setMinimumWidth(int minWidth)</name>
 <description>Sets the minimum width of the view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNestedScrollingEnabled(boolean enabled)</name>
 <description>Enable or disable nested scrolling for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextClusterForwardId(int nextClusterForwardId)</name>
 <description>Sets the id of the view to use as the root of the next keyboard navigation cluster.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextFocusDownId(int nextFocusDownId)</name>
 <description>Sets the id of the view to use when the next focus is FOCUS_DOWN.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextFocusForwardId(int nextFocusForwardId)</name>
 <description>Sets the id of the view to use when the next focus is FOCUS_FORWARD.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextFocusLeftId(int nextFocusLeftId)</name>
 <description>Sets the id of the view to use when the next focus is FOCUS_LEFT.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextFocusRightId(int nextFocusRightId)</name>
 <description>Sets the id of the view to use when the next focus is FOCUS_RIGHT.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setNextFocusUpId(int nextFocusUpId)</name>
 <description>Sets the id of the view to use when the next focus is FOCUS_UP.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener)</name>
 <description>Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnCapturedPointerListener(View.OnCapturedPointerListener l)</name>
 <description>Set a listener to receive callbacks when the pointer capture state of a view changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnClickListener(View.OnClickListener l)</name>
 <description>Register a callback to be invoked when this view is clicked.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnContextClickListener(View.OnContextClickListener l)</name>
 <description>Register a callback to be invoked when this view is context clicked.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnCreateContextMenuListener(View.OnCreateContextMenuListener l)</name>
 <description>Register a callback to be invoked when the context menu for this view is being built.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnDragListener(View.OnDragListener l)</name>
 <description>Register a drag event listener callback object for this View.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnFocusChangeListener(View.OnFocusChangeListener l)</name>
 <description>Register a callback to be invoked when focus of this view changed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnGenericMotionListener(View.OnGenericMotionListener l)</name>
 <description>Register a callback to be invoked when a generic motion event is sent to this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnHoverListener(View.OnHoverListener l)</name>
 <description>Register a callback to be invoked when a hover event is sent to this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnKeyListener(View.OnKeyListener l)</name>
 <description>Register a callback to be invoked when a hardware key is pressed in this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnLongClickListener(View.OnLongClickListener l)</name>
 <description>Register a callback to be invoked when this view is clicked and held.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnScrollChangeListener(View.OnScrollChangeListener l)</name>
 <description>Register a callback to be invoked when the scroll X or Y positions of this view change.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l)</name>
 <description>Set a listener to receive callbacks when the visibility of the system bar changes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOnTouchListener(View.OnTouchListener l)</name>
 <description>Register a callback to be invoked when a touch event is sent to this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOutlineAmbientShadowColor(int color)</name>
 <description>Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOutlineProvider(ViewOutlineProvider provider)</name>
 <description>Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOutlineSpotShadowColor(int color)</name>
 <description>Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setOverScrollMode(int overScrollMode)</name>
 <description>Set the over-scroll mode for this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPadding(int left, int top, int right, int bottom)</name>
 <description>Sets the padding.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPaddingRelative(int start, int top, int end, int bottom)</name>
 <description>Sets the relative padding.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPivotX(float pivotX)</name>
 <description>Sets the x location of the point around which the view is rotated and scaled.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPivotY(float pivotY)</name>
 <description>Sets the y location of the point around which the view is rotated and scaled.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPointerIcon(PointerIcon pointerIcon)</name>
 <description>Set the pointer icon for the current view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setPressed(boolean pressed)</name>
 <description>Sets the pressed state for this view.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setRevealOnFocusHint(boolean revealOnFocus)</name>
 <description>Sets this view&amp;apos;s preference for reveal behavior when it gains focus.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setRight(int right)</name>
 <description>Sets the right position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setRotation(float rotation)</name>
 <description>Sets the degrees that the view is rotated around the pivot point.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setRotationX(float rotationX)</name>
 <description>Sets the degrees that the view is rotated around the horizontal axis through the pivot point.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setRotationY(float rotationY)</name>
 <description>Sets the degrees that the view is rotated around the vertical axis through the pivot point.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setSaveEnabled(boolean enabled)</name>
 <description>Controls whether the saving of this view&amp;apos;s state is enabled (that is, whether its onSaveInstanceState() method will be called).</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setSaveFromParentEnabled(boolean enabled)</name>
 <description>Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScaleX(float scaleX)</name>
 <description>Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view&amp;apos;s unscaled width.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScaleY(float scaleY)</name>
 <description>Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view&amp;apos;s unscaled width.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScreenReaderFocusable(boolean screenReaderFocusable)</name>
 <description>When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade)</name>
 <description>Define the delay before scrollbars fade.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollBarFadeDuration(int scrollBarFadeDuration)</name>
 <description>Define the scrollbar fade duration.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollBarSize(int scrollBarSize)</name>
 <description>Define the scrollbar size.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollBarStyle(int style)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollContainer(boolean isScrollContainer)</name>
 <description>Change whether this view is one of the set of scrollable containers in its window.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollIndicators(int indicators, int mask)</name>
 <description>Sets the state of the scroll indicators specified by the mask.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollIndicators(int indicators)</name>
 <description>Sets the state of all scroll indicators.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollX(int value)</name>
 <description>Set the horizontal scrolled position of your view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollY(int value)</name>
 <description>Set the vertical scrolled position of your view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setScrollbarFadingEnabled(boolean fadeScrollbars)</name>
 <description>Define whether scrollbars will fade when the view is not scrolling.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setSelected(boolean selected)</name>
 <description>Changes the selection state of this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setSoundEffectsEnabled(boolean soundEffectsEnabled)</name>
 <description>Set whether this view should have sound effects enabled for events such as clicking and touching.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setStateListAnimator(StateListAnimator stateListAnimator)</name>
 <description>Attaches the provided StateListAnimator to this View.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setSystemUiVisibility(int visibility)</name>
 <description>Request that the visibility of the status bar or other screen/window decorations be changed.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTag(int key, Object tag)</name>
 <description>Sets a tag associated with this view and a key.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTag(Object tag)</name>
 <description>Sets the tag associated with this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTextAlignment(int textAlignment)</name>
 <description>Set the text alignment.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTextDirection(int textDirection)</name>
 <description>Set the text direction.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTooltipText(CharSequence tooltipText)</name>
 <description>Sets the tooltip text which will be displayed in a small popup next to the view.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setTop(int top)</name>
 <description>Sets the top position of this view relative to its parent.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTouchDelegate(TouchDelegate delegate)</name>
 <description>Sets the TouchDelegate for this View.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>setTransitionName(String transitionName)</name>
 <description>Sets the name of the View to be used to identify Views in Transitions.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTranslationX(float translationX)</name>
 <description>Sets the horizontal location of this view relative to its left position.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTranslationY(float translationY)</name>
 <description>Sets the vertical location of this view relative to its top position.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setTranslationZ(float translationZ)</name>
 <description>Sets the depth location of this view relative to its elevation.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled)</name>
 <description></description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setVerticalScrollbarPosition(int position)</name>
 <description>Set the position of the vertical scroll bar.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setVisibility(int visibility)</name>
 <description>Set the visibility state of this view.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setWillNotCacheDrawing(boolean willNotCacheDrawing)</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setWillNotDraw(boolean willNotDraw)</name>
 <description>If this view doesn&amp;apos;t do any drawing on its own, set this flag to allow further optimizations.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setX(float x)</name>
 <description>Sets the visual x position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setY(float y)</name>
 <description>Sets the visual y position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>setZ(float z)</name>
 <description>Sets the visual z position of this view, in pixels.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>showContextMenu()</name>
 <description>Shows the context menu for this view.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>showContextMenu(float x, float y)</name>
 <description>Shows the context menu for this view anchored to the specified view-relative coordinate.</description>
 </method>
 <method>
 <return-value>ActionMode</return-value>
 <name>startActionMode(ActionMode.Callback callback, int type)</name>
 <description>Start an action mode with the given type.</description>
 </method>
 <method>
 <return-value>ActionMode</return-value>
 <name>startActionMode(ActionMode.Callback callback)</name>
 <description>Start an action mode with the default type ActionMode.TYPE_PRIMARY.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>startAnimation(Animation animation)</name>
 <description>Start the specified animation now.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)</name>
 <description>This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions.</description>
 </method>
 <method>
 <return-value>final boolean</return-value>
 <name>startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)</name>
 <description>Starts a drag and drop operation.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>startNestedScroll(int axes)</name>
 <description>Begin a nestable scroll operation along the given axes.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>stopNestedScroll()</name>
 <description>Stop a nested scroll in progress.</description>
 </method>
 <method>
 <return-value>String</return-value>
 <name>toString()</name>
 <description>Returns a string representation of the object.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>unscheduleDrawable(Drawable who, Runnable what)</name>
 <description>Cancels a scheduled action on a drawable.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>unscheduleDrawable(Drawable who)</name>
 <description>Unschedule any events associated with the given Drawable.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>updateDragShadow(View.DragShadowBuilder shadowBuilder)</name>
 <description>Updates the drag shadow for the ongoing drag and drop operation.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>verifyDrawable(Drawable who)</name>
 <description>If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>willNotCacheDrawing()</name>
 <description>This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>willNotDraw()</name>
 <description>Returns whether or not this View draws on its own.</description>
 </method>
 </class>
 <name>java.lang.Object</name>
 <class>
 <method>
 <return-value>Object</return-value>
 <name>clone()</name>
 <description>Creates and returns a copy of this object.</description>
 </method>
 <method>
 <return-value>boolean</return-value>
 <name>equals(Object obj)</name>
 <description>Indicates whether some other object is &amp;quot;equal to&amp;quot; this one.</description>
 </method>
 <method>
 <return-value>void</return-value>
 <name>finalize()</name>
 <description>Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.</description>
 </method>
 <method>
 <return-value>final Class&amp;lt;?&amp;gt;</return-value>
 <name>getClass()</name>
 <description>Returns the runtime class of this Object.</description>
 </method>
 <method>
 <return-value>int</return-value>
 <name>hashCode()</name>
 <description>Returns a hash code value for the object.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>notify()</name>
 <description>Wakes up a single thread that is waiting on this object&amp;apos;s monitor.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>notifyAll()</name>
 <description>Wakes up all threads that are waiting on this object&amp;apos;s monitor.</description>
 </method>
 <method>
 <return-value>String</return-value>
 <name>toString()</name>
 <description>Returns a string representation of the object.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait(long millis, int nanos)</name>
 <description>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait(long millis)</name>
 <description>Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.</description>
 </method>
 <method>
 <return-value>final void</return-value>
 <name>wait()</name>
 <description>Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.</description>
 </method>
 </class>
 <name>android.graphics.drawable.Drawable.Callback</name>
 <class>
 <method>
 <return-value>abstract void</return-value>
 <name>invalidateDrawable(Drawable who)</name>
 <description>Called when the drawable needs to be redrawn.</description>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>scheduleDrawable(Drawable who, Runnable what, long when)</name>
 <description>A Drawable can call this to schedule the next frame of its animation.</description>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>unscheduleDrawable(Drawable who, Runnable what)</name>
 <description>A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long).</description>
 </method>
 </class>
 <name>android.view.KeyEvent.Callback</name>
 <class>
 <method>
 <return-value>abstract boolean</return-value>
 <name>onKeyDown(int keyCode, KeyEvent event)</name>
 <description>Called when a key down event has occurred.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>onKeyLongPress(int keyCode, KeyEvent event)</name>
 <description>Called when a long press has occurred.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>onKeyMultiple(int keyCode, int count, KeyEvent event)</name>
 <description>Called when a user&amp;apos;s interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession.</description>
 </method>
 <method>
 <return-value>abstract boolean</return-value>
 <name>onKeyUp(int keyCode, KeyEvent event)</name>
 <description>Called when a key up event has occurred.</description>
 </method>
 </class>
 <name>android.view.accessibility.AccessibilityEventSource</name>
 <class>
 <method>
 <return-value>abstract void</return-value>
 <name>sendAccessibilityEvent(int eventType)</name>
 <description>Handles the request for sending an AccessibilityEvent given the event type.</description>
 </method>
 <method>
 <return-value>abstract void</return-value>
 <name>sendAccessibilityEventUnchecked(AccessibilityEvent event)</name>
 <description>Handles the request for sending an AccessibilityEvent.</description>
 </method>
 </class>
 </inherited_methods>
 <public_constructors>
 <method>
 <name>Space(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)</name>
 <description></description>
 </method>
 <method>
 <name>Space(Context context, AttributeSet attrs, int defStyleAttr)</name>
 <description></description>
 </method>
 <method>
 <name>Space(Context context, AttributeSet attrs)</name>
 <description></description>
 </method>
 <method>
 <name>Space(Context context)</name>
 <description></description>
 </method>
 </public_constructors>
 <public_methods>
 <method>
 <return-value>void</return-value>
 <name>draw(Canvas canvas)</name>
 <description>Draw nothing.</description>
 </method>
 </public_methods>
 <api-section>
 <api>
 <name>Space</name>
 <api_level>API level 21</api_level>
 <api_signature>public Space (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context</description>
 </parameter>
 <parameter>
 <name>attrs</name>
 <description>AttributeSet</description>
 </parameter>
 <parameter>
 <name>defStyleAttr</name>
 <description>int</description>
 </parameter>
 <parameter>
 <name>defStyleRes</name>
 <description>int</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>Space</name>
 <api_level>API level 14</api_level>
 <api_signature>public Space (Context context, 
                AttributeSet attrs, 
                int defStyleAttr)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context</description>
 </parameter>
 <parameter>
 <name>attrs</name>
 <description>AttributeSet</description>
 </parameter>
 <parameter>
 <name>defStyleAttr</name>
 <description>int</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>Space</name>
 <api_level>API level 14</api_level>
 <api_signature>public Space (Context context, 
                AttributeSet attrs)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context</description>
 </parameter>
 <parameter>
 <name>attrs</name>
 <description>AttributeSet</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>Space</name>
 <api_level>API level 14</api_level>
 <api_signature>public Space (Context context)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>context</name>
 <description>Context</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>draw</name>
 <api_level>API level 14</api_level>
 <api_signature>public void draw (Canvas canvas)</api_signature>
 <description>Draw nothing.</description>
 <parameters>
 <parameter>
 <name>canvas</name>
 <description>Canvas: an unused parameter.</description>
 </parameter>
 </parameters>
 </api>
 <api>
 <name>onMeasure</name>
 <api_level>API level 14</api_level>
 <api_signature>protected void onMeasure (int widthMeasureSpec, 
                int heightMeasureSpec)</api_signature>
 <description></description>
 <parameters>
 <parameter>
 <name>widthMeasureSpec</name>
 <description>int: horizontal space requirements as imposed by the parent. The requirements are encoded with View.MeasureSpec.</description>
 </parameter>
 <parameter>
 <name>heightMeasureSpec</name>
 <description>int: vertical space requirements as imposed by the parent. The requirements are encoded with View.MeasureSpec.</description>
 </parameter>
 </parameters>
 </api>
 </api-section>
 </api>