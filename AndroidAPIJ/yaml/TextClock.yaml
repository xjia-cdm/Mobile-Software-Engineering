api:
 title: TextClock
 api-signature: public class TextClock extends TextView
 inheritance: java.lang.Object ↳ android.view.View ↳ android.widget.TextView ↳ android.widget.TextClock
 subclasses-direct-summary: 
 subclasses-indirect-summary: 
 inherited_xml_attributes: 
  class: 
   - 
    name: android.widget.TextView
     class: 
      - 
       attirbute: 
        name: android:autoLink
      - 
       attirbute: 
        name: android:autoSizeMaxTextSize
      - 
       attirbute: 
        name: android:autoSizeMinTextSize
      - 
       attirbute: 
        name: android:autoSizePresetSizes
        description: Resource array of dimensions to be used in conjunction with autoSizeTextType set to uniform.
      - 
       attirbute: 
        name: android:autoSizeStepGranularity
        description: Specify the auto-size step size if autoSizeTextType is set to uniform.
      - 
       attirbute: 
        name: android:autoSizeTextType
      - 
       attirbute: 
        name: android:autoText
      - 
       attirbute: 
        name: android:breakStrategy
      - 
       attirbute: 
        name: android:bufferType
      - 
       attirbute: 
        name: android:capitalize
      - 
       attirbute: 
        name: android:cursorVisible
      - 
       attirbute: 
        name: android:digits
      - 
       attirbute: 
        name: android:drawableBottom
      - 
       attirbute: 
        name: android:drawableEnd
      - 
       attirbute: 
        name: android:drawableLeft
      - 
       attirbute: 
        name: android:drawablePadding
      - 
       attirbute: 
        name: android:drawableRight
      - 
       attirbute: 
        name: android:drawableStart
      - 
       attirbute: 
        name: android:drawableTint
      - 
       attirbute: 
        name: android:drawableTintMode
      - 
       attirbute: 
        name: android:drawableTop
      - 
       attirbute: 
        name: android:editable
      - 
       attirbute: 
        name: android:editorExtras
      - 
       attirbute: 
        name: android:elegantTextHeight
      - 
       attirbute: 
        name: android:ellipsize
      - 
       attirbute: 
        name: android:ems
      - 
       attirbute: 
        name: android:fallbackLineSpacing
      - 
       attirbute: 
        name: android:firstBaselineToTopHeight
      - 
       attirbute: 
        name: android:fontFamily
      - 
       attirbute: 
        name: android:fontFeatureSettings
      - 
       attirbute: 
        name: android:freezesText
      - 
       attirbute: 
        name: android:gravity
      - 
       attirbute: 
        name: android:height
      - 
       attirbute: 
        name: android:hint
      - 
       attirbute: 
        name: android:hyphenationFrequency
      - 
       attirbute: 
        name: android:imeActionId
      - 
       attirbute: 
        name: android:imeActionLabel
      - 
       attirbute: 
        name: android:imeOptions
      - 
       attirbute: 
        name: android:includeFontPadding
      - 
       attirbute: 
        name: android:inputMethod
      - 
       attirbute: 
        name: android:inputType
      - 
       attirbute: 
        name: android:justificationMode
      - 
       attirbute: 
        name: android:lastBaselineToBottomHeight
      - 
       attirbute: 
        name: android:letterSpacing
      - 
       attirbute: 
        name: android:lineHeight
      - 
       attirbute: 
        name: android:lineSpacingExtra
      - 
       attirbute: 
        name: android:lineSpacingMultiplier
      - 
       attirbute: 
        name: android:lines
      - 
       attirbute: 
        name: android:linksClickable
      - 
       attirbute: 
        name: android:marqueeRepeatLimit
      - 
       attirbute: 
        name: android:maxEms
      - 
       attirbute: 
        name: android:maxHeight
      - 
       attirbute: 
        name: android:maxLength
      - 
       attirbute: 
        name: android:maxLines
      - 
       attirbute: 
        name: android:maxWidth
      - 
       attirbute: 
        name: android:minEms
      - 
       attirbute: 
        name: android:minHeight
      - 
       attirbute: 
        name: android:minLines
      - 
       attirbute: 
        name: android:minWidth
      - 
       attirbute: 
        name: android:numeric
      - 
       attirbute: 
        name: android:password
      - 
       attirbute: 
        name: android:phoneNumber
      - 
       attirbute: 
        name: android:privateImeOptions
      - 
       attirbute: 
        name: android:scrollHorizontally
      - 
       attirbute: 
        name: android:selectAllOnFocus
      - 
       attirbute: 
        name: android:shadowColor
      - 
       attirbute: 
        name: android:shadowDx
      - 
       attirbute: 
        name: android:shadowDy
      - 
       attirbute: 
        name: android:shadowRadius
      - 
       attirbute: 
        name: android:singleLine
      - 
       attirbute: 
        name: android:text
      - 
       attirbute: 
        name: android:textAllCaps
      - 
       attirbute: 
        name: android:textAppearance
      - 
       attirbute: 
        name: android:textColor
      - 
       attirbute: 
        name: android:textColorHighlight
      - 
       attirbute: 
        name: android:textColorHint
      - 
       attirbute: 
        name: android:textColorLink
      - 
       attirbute: 
        name: android:textIsSelectable
      - 
       attirbute: 
        name: android:textScaleX
      - 
       attirbute: 
        name: android:textSize
      - 
       attirbute: 
        name: android:textStyle
      - 
       attirbute: 
        name: android:typeface
      - 
       attirbute: 
        name: android:width
   - 
    name: android.view.View
     class: 
      - 
       attirbute: 
        name: android:accessibilityHeading
      - 
       attirbute: 
        name: android:accessibilityLiveRegion
      - 
       attirbute: 
        name: android:accessibilityTraversalAfter
      - 
       attirbute: 
        name: android:accessibilityTraversalBefore
      - 
       attirbute: 
        name: android:alpha
      - 
       attirbute: 
        name: android:autofillHints
      - 
       attirbute: 
        name: android:autofilledHighlight
      - 
       attirbute: 
        name: android:background
      - 
       attirbute: 
        name: android:backgroundTint
      - 
       attirbute: 
        name: android:backgroundTintMode
      - 
       attirbute: 
        name: android:clickable
      - 
       attirbute: 
        name: android:contentDescription
      - 
       attirbute: 
        name: android:contextClickable
      - 
       attirbute: 
        name: android:defaultFocusHighlightEnabled
      - 
       attirbute: 
        name: android:drawingCacheQuality
      - 
       attirbute: 
        name: android:duplicateParentState
      - 
       attirbute: 
        name: android:elevation
      - 
       attirbute: 
        name: android:fadeScrollbars
      - 
       attirbute: 
        name: android:fadingEdgeLength
      - 
       attirbute: 
        name: android:filterTouchesWhenObscured
      - 
       attirbute: 
        name: android:fitsSystemWindows
      - 
       attirbute: 
        name: android:focusable
      - 
       attirbute: 
        name: android:focusableInTouchMode
      - 
       attirbute: 
        name: android:focusedByDefault
      - 
       attirbute: 
        name: android:forceHasOverlappingRendering
      - 
       attirbute: 
        name: android:foreground
      - 
       attirbute: 
        name: android:foregroundGravity
      - 
       attirbute: 
        name: android:foregroundTint
      - 
       attirbute: 
        name: android:foregroundTintMode
      - 
       attirbute: 
        name: android:hapticFeedbackEnabled
      - 
       attirbute: 
        name: android:id
        description: Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById().
      - 
       attirbute: 
        name: android:importantForAccessibility
      - 
       attirbute: 
        name: android:importantForAutofill
      - 
       attirbute: 
        name: android:isScrollContainer
      - 
       attirbute: 
        name: android:keepScreenOn
      - 
       attirbute: 
        name: android:keyboardNavigationCluster
      - 
       attirbute: 
        name: android:layerType
      - 
       attirbute: 
        name: android:layoutDirection
      - 
       attirbute: 
        name: android:longClickable
      - 
       attirbute: 
        name: android:minHeight
      - 
       attirbute: 
        name: android:minWidth
      - 
       attirbute: 
        name: android:nextClusterForward
      - 
       attirbute: 
        name: android:nextFocusDown
        description: Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusForward
        description: Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusLeft
      - 
       attirbute: 
        name: android:nextFocusRight
        description: Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusUp
        description: Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:onClick
      - 
       attirbute: 
        name: android:outlineAmbientShadowColor
      - 
       attirbute: 
        name: android:outlineSpotShadowColor
      - 
       attirbute: 
        name: android:padding
      - 
       attirbute: 
        name: android:paddingBottom
      - 
       attirbute: 
        name: android:paddingEnd
      - 
       attirbute: 
        name: android:paddingHorizontal
      - 
       attirbute: 
        name: android:paddingLeft
      - 
       attirbute: 
        name: android:paddingRight
      - 
       attirbute: 
        name: android:paddingStart
      - 
       attirbute: 
        name: android:paddingTop
      - 
       attirbute: 
        name: android:paddingVertical
      - 
       attirbute: 
        name: android:requiresFadingEdge
      - 
       attirbute: 
        name: android:rotation
      - 
       attirbute: 
        name: android:rotationX
      - 
       attirbute: 
        name: android:rotationY
      - 
       attirbute: 
        name: android:saveEnabled
      - 
       attirbute: 
        name: android:scaleX
      - 
       attirbute: 
        name: android:scaleY
      - 
       attirbute: 
        name: android:scrollIndicators
      - 
       attirbute: 
        name: android:scrollX
      - 
       attirbute: 
        name: android:scrollY
      - 
       attirbute: 
        name: android:scrollbarAlwaysDrawHorizontalTrack
      - 
       attirbute: 
        name: android:scrollbarAlwaysDrawVerticalTrack
      - 
       attirbute: 
        name: android:scrollbarDefaultDelayBeforeFade
      - 
       attirbute: 
        name: android:scrollbarFadeDuration
      - 
       attirbute: 
        name: android:scrollbarSize
      - 
       attirbute: 
        name: android:scrollbarStyle
      - 
       attirbute: 
        name: android:scrollbarThumbHorizontal
      - 
       attirbute: 
        name: android:scrollbarThumbVertical
      - 
       attirbute: 
        name: android:scrollbarTrackHorizontal
      - 
       attirbute: 
        name: android:scrollbarTrackVertical
      - 
       attirbute: 
        name: android:scrollbars
      - 
       attirbute: 
        name: android:soundEffectsEnabled
      - 
       attirbute: 
        name: android:stateListAnimator
      - 
       attirbute: 
        name: android:tag
        description: Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag().
      - 
       attirbute: 
        name: android:textAlignment
      - 
       attirbute: 
        name: android:textDirection
      - 
       attirbute: 
        name: android:theme
      - 
       attirbute: 
        name: android:tooltipText
      - 
       attirbute: 
        name: android:transformPivotX
      - 
       attirbute: 
        name: android:transformPivotY
      - 
       attirbute: 
        name: android:transitionName
      - 
       attirbute: 
        name: android:translationX
      - 
       attirbute: 
        name: android:translationY
      - 
       attirbute: 
        name: android:translationZ
      - 
       attirbute: 
        name: android:visibility
 inherited_constants: 
  class: 
   - 
    name: android.widget.TextView
     conctant: 
      - 
       type: int
       name: AUTO_SIZE_TEXT_TYPE_NONE
       description:The TextView does not auto-size text (default).
      - 
       type: int
       name: AUTO_SIZE_TEXT_TYPE_UNIFORM
       description:The TextView scales text size both horizontally and vertically to fit within the container.
   - 
    name: android.view.View
     conctant: 
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_ASSERTIVE
       description:Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view.
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_NONE
       description:Live region mode specifying that accessibility services should not automatically announce changes to this view.
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_POLITE
       description:Live region mode specifying that accessibility services should announce changes to this view.
      - 
       type: int
       name: AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
       description:Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE
       description:Hint indicating that this view can be autofilled with a credit card expiration date.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY
       description:Hint indicating that this view can be autofilled with a credit card expiration day.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH
       description:Hint indicating that this view can be autofilled with a credit card expiration month.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR
       description:Hint indicating that this view can be autofilled with a credit card expiration year.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_NUMBER
       description:Hint indicating that this view can be autofilled with a credit card number.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE
       description:Hint indicating that this view can be autofilled with a credit card security code.
      - 
       type: String
       name: AUTOFILL_HINT_EMAIL_ADDRESS
       description:Hint indicating that this view can be autofilled with an email address.
      - 
       type: String
       name: AUTOFILL_HINT_NAME
       description:Hint indicating that this view can be autofilled with a user's real name.
      - 
       type: String
       name: AUTOFILL_HINT_PASSWORD
       description:Hint indicating that this view can be autofilled with a password.
      - 
       type: String
       name: AUTOFILL_HINT_PHONE
       description:Hint indicating that this view can be autofilled with a phone number.
      - 
       type: String
       name: AUTOFILL_HINT_POSTAL_ADDRESS
       description:Hint indicating that this view can be autofilled with a postal address.
      - 
       type: String
       name: AUTOFILL_HINT_POSTAL_CODE
       description:Hint indicating that this view can be autofilled with a postal code.
      - 
       type: String
       name: AUTOFILL_HINT_USERNAME
       description:Hint indicating that this view can be autofilled with a username.
      - 
       type: int
       name: AUTOFILL_TYPE_DATE
       description:Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime().
      - 
       type: int
       name: AUTOFILL_TYPE_LIST
       description:Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0).
      - 
       type: int
       name: AUTOFILL_TYPE_NONE
       description:Autofill type for views that cannot be autofilled.
      - 
       type: int
       name: AUTOFILL_TYPE_TEXT
       description:Autofill type for a text field, which is filled by a CharSequence.
      - 
       type: int
       name: AUTOFILL_TYPE_TOGGLE
       description:Autofill type for a togglable field, which is filled by a boolean.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL
       description:Flag indicating that a drag can cross window boundaries.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION
       description:When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION
       description:When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_URI_READ
       description:When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_URI_WRITE
       description:When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object.
      - 
       type: int
       name: DRAG_FLAG_OPAQUE
       description:Flag indicating that the drag shadow will be opaque.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_AUTO
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_HIGH
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_LOW
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: FIND_VIEWS_WITH_CONTENT_DESCRIPTION
       description:Find find views that contain the specified content description.
      - 
       type: int
       name: FIND_VIEWS_WITH_TEXT
       description:Find views that render the specified text.
      - 
       type: int
       name: FOCUSABLE
       description:This view wants keystrokes.
      - 
       type: int
       name: FOCUSABLES_ALL
       description:View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode.
      - 
       type: int
       name: FOCUSABLES_TOUCH_MODE
       description:View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode.
      - 
       type: int
       name: FOCUSABLE_AUTO
       description:This view determines focusability automatically.
      - 
       type: int
       name: FOCUS_BACKWARD
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_DOWN
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_FORWARD
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_LEFT
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_RIGHT
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_UP
       description:Use with focusSearch(int).
      - 
       type: int
       name: GONE
       description:This view is invisible, and it doesn't take any space for layout purposes.
      - 
       type: int
       name: HAPTIC_FEEDBACK_ENABLED
       description:View flag indicating whether this view should have haptic feedback enabled for events such as long presses.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_AUTO
       description:Automatically determine whether a view is important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_NO
       description:The view is not important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS
       description:The view is not important for accessibility, nor are any of its descendant views.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_YES
       description:The view is important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_AUTO
       description:Automatically determine whether a view is important for autofill.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_NO
       description:The view is not important for autofill, but its children (if any) will be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS
       description:The view is not important for autofill, and its children (if any) will not be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_YES
       description:The view is important for autofill, and its children (if any) will be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS
       description:The view is important for autofill, but its children (if any) will not be traversed.
      - 
       type: int
       name: INVISIBLE
       description:This view is invisible, but it still takes up space for layout purposes.
      - 
       type: int
       name: KEEP_SCREEN_ON
       description:View flag indicating that the screen should remain on while the window containing this view is visible to the user.
      - 
       type: int
       name: LAYER_TYPE_HARDWARE
       description:
      - 
       type: int
       name: LAYER_TYPE_NONE
       description:Indicates that the view does not have a layer.
      - 
       type: int
       name: LAYER_TYPE_SOFTWARE
       description:
      - 
       type: int
       name: LAYOUT_DIRECTION_INHERIT
       description:Horizontal layout direction of this view is inherited from its parent.
      - 
       type: int
       name: LAYOUT_DIRECTION_LOCALE
       description:Horizontal layout direction of this view is from deduced from the default language script for the locale.
      - 
       type: int
       name: LAYOUT_DIRECTION_LTR
       description:Horizontal layout direction of this view is from Left to Right.
      - 
       type: int
       name: LAYOUT_DIRECTION_RTL
       description:Horizontal layout direction of this view is from Right to Left.
      - 
       type: int
       name: MEASURED_HEIGHT_STATE_SHIFT
       description:Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int).
      - 
       type: int
       name: MEASURED_SIZE_MASK
       description:Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size.
      - 
       type: int
       name: MEASURED_STATE_MASK
       description:Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits.
      - 
       type: int
       name: MEASURED_STATE_TOO_SMALL
       description:Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have.
      - 
       type: int
       name: NOT_FOCUSABLE
       description:This view does not want keystrokes.
      - 
       type: int
       name: NO_ID
       description:Used to mark a View that has no ID.
      - 
       type: int
       name: OVER_SCROLL_ALWAYS
       description:Always allow a user to over-scroll this view, provided it is a view that can scroll.
      - 
       type: int
       name: OVER_SCROLL_IF_CONTENT_SCROLLS
       description:Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.
      - 
       type: int
       name: OVER_SCROLL_NEVER
       description:Never allow a user to over-scroll this view.
      - 
       type: int
       name: SCREEN_STATE_OFF
       description:Indicates that the screen has changed state and is now off.
      - 
       type: int
       name: SCREEN_STATE_ON
       description:Indicates that the screen has changed state and is now on.
      - 
       type: int
       name: SCROLLBARS_INSIDE_INSET
       description:The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view.
      - 
       type: int
       name: SCROLLBARS_INSIDE_OVERLAY
       description:The scrollbar style to display the scrollbars inside the content area, without increasing the padding.
      - 
       type: int
       name: SCROLLBARS_OUTSIDE_INSET
       description:The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view.
      - 
       type: int
       name: SCROLLBARS_OUTSIDE_OVERLAY
       description:The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding.
      - 
       type: int
       name: SCROLLBAR_POSITION_DEFAULT
       description:Position the scroll bar at the default position as determined by the system.
      - 
       type: int
       name: SCROLLBAR_POSITION_LEFT
       description:Position the scroll bar along the left edge.
      - 
       type: int
       name: SCROLLBAR_POSITION_RIGHT
       description:Position the scroll bar along the right edge.
      - 
       type: int
       name: SCROLL_AXIS_HORIZONTAL
       description:Indicates scrolling along the horizontal axis.
      - 
       type: int
       name: SCROLL_AXIS_NONE
       description:Indicates no axis of view scrolling.
      - 
       type: int
       name: SCROLL_AXIS_VERTICAL
       description:Indicates scrolling along the vertical axis.
      - 
       type: int
       name: SCROLL_INDICATOR_BOTTOM
       description:Scroll indicator direction for the bottom edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_END
       description:Scroll indicator direction for the ending edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_LEFT
       description:Scroll indicator direction for the left edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_RIGHT
       description:Scroll indicator direction for the right edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_START
       description:Scroll indicator direction for the starting edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_TOP
       description:Scroll indicator direction for the top edge of the view.
      - 
       type: int
       name: SOUND_EFFECTS_ENABLED
       description:View flag indicating whether this view should have sound effects enabled for events such as clicking and touching.
      - 
       type: int
       name: STATUS_BAR_HIDDEN
       description:This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead.
      - 
       type: int
       name: STATUS_BAR_VISIBLE
       description:This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead.
      - 
       type: int
       name: SYSTEM_UI_FLAG_FULLSCREEN
       description:Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application.
      - 
       type: int
       name: SYSTEM_UI_FLAG_HIDE_NAVIGATION
       description:Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden.
      - 
       type: int
       name: SYSTEM_UI_FLAG_IMMERSIVE
       description:Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.
      - 
       type: int
       name: SYSTEM_UI_FLAG_IMMERSIVE_STICKY
       description:Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
       description:Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
       description:Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_STABLE
       description:Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect).
      - 
       type: int
       name: SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR
       description:Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
       description:Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LOW_PROFILE
       description:Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode.
      - 
       type: int
       name: SYSTEM_UI_FLAG_VISIBLE
       description:Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default).
      - 
       type: int
       name: SYSTEM_UI_LAYOUT_FLAGS
       description:Flags that can impact the layout in relation to system UI.
      - 
       type: int
       name: TEXT_ALIGNMENT_CENTER
       description:Center the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_GRAVITY
       description:Default for the root view.
      - 
       type: int
       name: TEXT_ALIGNMENT_INHERIT
       description:Default text alignment.
      - 
       type: int
       name: TEXT_ALIGNMENT_TEXT_END
       description:Align to the end of the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_TEXT_START
       description:Align to the start of the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_VIEW_END
       description:Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise.
      - 
       type: int
       name: TEXT_ALIGNMENT_VIEW_START
       description:Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise.
      - 
       type: int
       name: TEXT_DIRECTION_ANY_RTL
       description:Text direction is using "any-RTL" algorithm.
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG_LTR
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG_RTL
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_INHERIT
       description:Text direction is inherited through ViewGroup
      - 
       type: int
       name: TEXT_DIRECTION_LOCALE
       description:Text direction is coming from the system Locale.
      - 
       type: int
       name: TEXT_DIRECTION_LTR
       description:Text direction is forced to LTR.
      - 
       type: int
       name: TEXT_DIRECTION_RTL
       description:Text direction is forced to RTL.
      - 
       type: String
       name: VIEW_LOG_TAG
       description:The logging tag used by this class with android.util.Log.
      - 
       type: int
       name: VISIBLE
       description:This view is visible.
 inherited_fields: 
  class: 
    name: android.view.View
     field: 
      - 
       type: public static final Property<View, Float>
       name: ALPHA
       description: A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods.
      - 
       type: protected static final int[]
       name: EMPTY_STATE_SET
       description: Indicates the view has no states set.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is enabled, focused and selected.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_STATE_SET
       description: Indicates the view is enabled and has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_SELECTED_STATE_SET
       description: Indicates the view is enabled and selected.
      - 
       type: protected static final int[]
       name: ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_STATE_SET
       description: Indicates the view is enabled.
      - 
       type: protected static final int[]
       name: ENABLED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled and that its window has focus.
      - 
       type: protected static final int[]
       name: FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is focused and selected.
      - 
       type: protected static final int[]
       name: FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: FOCUSED_STATE_SET
       description: Indicates the view is focused.
      - 
       type: protected static final int[]
       name: FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view has the focus and that its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is pressed, enabled, focused and selected.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled and focused.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_SELECTED_STATE_SET
       description: Indicates the view is pressed, enabled and selected.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_STATE_SET
       description: Indicates the view is pressed and enabled.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is pressed, focused and selected.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_STATE_SET
       description: Indicates the view is pressed and focused.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_SELECTED_STATE_SET
       description: Indicates the view is pressed and selected.
      - 
       type: protected static final int[]
       name: PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_STATE_SET
       description: Indicates the view is pressed.
      - 
       type: protected static final int[]
       name: PRESSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed and its window has the focus.
      - 
       type: public static final Property<View, Float>
       name: ROTATION
       description: A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods.
      - 
       type: public static final Property<View, Float>
       name: ROTATION_X
       description: A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods.
      - 
       type: public static final Property<View, Float>
       name: ROTATION_Y
       description: A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods.
      - 
       type: public static final Property<View, Float>
       name: SCALE_X
       description: A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods.
      - 
       type: public static final Property<View, Float>
       name: SCALE_Y
       description: A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods.
      - 
       type: protected static final int[]
       name: SELECTED_STATE_SET
       description: Indicates the view is selected.
      - 
       type: protected static final int[]
       name: SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is selected and that its window has the focus.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_X
       description: A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_Y
       description: A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_Z
       description: A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods.
      - 
       type: protected static final int[]
       name: WINDOW_FOCUSED_STATE_SET
       description: Indicates the view's window has focus.
      - 
       type: public static final Property<View, Float>
       name: X
       description: A Property wrapper around the x functionality handled by the setX(float) and getX() methods.
      - 
       type: public static final Property<View, Float>
       name: Y
       description: A Property wrapper around the y functionality handled by the setY(float) and getY() methods.
      - 
       type: public static final Property<View, Float>
       name: Z
       description: A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods.
 inherited_methods: 
  name: android.widget.TextView
   class: 
     method: 
      - 
       return-value: void
       name: addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)
       description: Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
      - 
       return-value: void
       name: addTextChangedListener(TextWatcher watcher)
       description: Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes.
      - 
       return-value: final void
       name: append(CharSequence text)
       description: Convenience method to append the specified text to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable.
      - 
       return-value: void
       name: append(CharSequence text, int start, int end)
       description: Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to TextView.BufferType.EDITABLE if it was not already editable.
      - 
       return-value: void
       name: autofill(AutofillValue value)
       description: Automatically fills the content of this view with the value.
      - 
       return-value: void
       name: beginBatchEdit()
      - 
       return-value: boolean
       name: bringPointIntoView(int offset)
       description: Move the point, specified by the offset, into the view if it is needed.
      - 
       return-value: void
       name: cancelLongPress()
       description: Cancels a pending long press.
      - 
       return-value: void
       name: clearComposingText()
       description: Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view.
      - 
       return-value: int
       name: computeHorizontalScrollRange()
       description: 
      - 
       return-value: void
       name: computeScroll()
       description: Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
      - 
       return-value: int
       name: computeVerticalScrollExtent()
       description: 
      - 
       return-value: int
       name: computeVerticalScrollRange()
       description: 
      - 
       return-value: void
       name: debug(int depth)
       description: Prints information about this view in the log output, with the tag VIEW_LOG_TAG.
      - 
       return-value: boolean
       name: didTouchFocusSelect()
       description: Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed.
      - 
       return-value: void
       name: drawableHotspotChanged(float x, float y)
       description: This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.
      - 
       return-value: void
       name: drawableStateChanged()
       description: This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.
      - 
       return-value: void
       name: endBatchEdit()
      - 
       return-value: boolean
       name: extractText(ExtractedTextRequest request, ExtractedText outText)
       description: If this TextView contains editable content, extract a portion of it based on the information in request in to outText.
      - 
       return-value: void
       name: findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags)
       description: Finds the Views that contain given text.
      - 
       return-value: CharSequence
       name: getAccessibilityClassName()
       description: Return the class name of this object to be used for accessibility purposes.
      - 
       return-value: final int
       name: getAutoLinkMask()
       description: Gets the autolink mask of the text.
      - 
       return-value: int
       name: getAutoSizeMaxTextSize()
      - 
       return-value: int
       name: getAutoSizeMinTextSize()
      - 
       return-value: int
       name: getAutoSizeStepGranularity()
      - 
       return-value: int[]
       name: getAutoSizeTextAvailableSizes()
      - 
       return-value: int
       name: getAutoSizeTextType()
       description: Returns the type of auto-size set for this widget.
      - 
       return-value: int
       name: getAutofillType()
       description: Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view.
      - 
       return-value: AutofillValue
       name: getAutofillValue()
       description: Gets the TextView's current text for AutoFill.
      - 
       return-value: int
       name: getBaseline()
       description: 
      - 
       return-value: int
       name: getBottomPaddingOffset()
       description: Amount by which to extend the bottom fading region.
      - 
       return-value: int
       name: getBreakStrategy()
       description: Gets the current strategy for breaking paragraphs into lines.
      - 
       return-value: int
       name: getCompoundDrawablePadding()
       description: Returns the padding between the compound drawables and the text.
      - 
       return-value: ColorStateList
       name: getCompoundDrawableTintList()
      - 
       return-value: PorterDuff.Mode
       name: getCompoundDrawableTintMode()
       description: Returns the blending mode used to apply the tint to the compound drawables, if specified.
      - 
       return-value: Drawable[]
       name: getCompoundDrawables()
       description: Returns drawables for the left, top, right, and bottom borders.
      - 
       return-value: Drawable[]
       name: getCompoundDrawablesRelative()
       description: Returns drawables for the start, top, end, and bottom borders.
      - 
       return-value: int
       name: getCompoundPaddingBottom()
       description: Returns the bottom padding of the view, plus space for the bottom Drawable if any.
      - 
       return-value: int
       name: getCompoundPaddingEnd()
       description: Returns the end padding of the view, plus space for the end Drawable if any.
      - 
       return-value: int
       name: getCompoundPaddingLeft()
       description: Returns the left padding of the view, plus space for the left Drawable if any.
      - 
       return-value: int
       name: getCompoundPaddingRight()
       description: Returns the right padding of the view, plus space for the right Drawable if any.
      - 
       return-value: int
       name: getCompoundPaddingStart()
       description: Returns the start padding of the view, plus space for the start Drawable if any.
      - 
       return-value: int
       name: getCompoundPaddingTop()
       description: Returns the top padding of the view, plus space for the top Drawable if any.
      - 
       return-value: final int
       name: getCurrentHintTextColor()
       description: 
      - 
       return-value: final int
       name: getCurrentTextColor()
       description: Return the current color selected for normal text.
      - 
       return-value: ActionMode.Callback
       name: getCustomInsertionActionModeCallback()
       description: Retrieves the value set in setCustomInsertionActionModeCallback(ActionMode.Callback).
      - 
       return-value: ActionMode.Callback
       name: getCustomSelectionActionModeCallback()
       description: Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback).
      - 
       return-value: boolean
       name: getDefaultEditable()
       description: Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options.
      - 
       return-value: MovementMethod
       name: getDefaultMovementMethod()
       description: Subclasses override this to specify a default movement method.
      - 
       return-value: Editable
       name: getEditableText()
       description: Return the text that TextView is displaying as an Editable object.
      - 
       return-value: TextUtils.TruncateAt
       name: getEllipsize()
       description: Returns where, if anywhere, words that are longer than the view is wide should be ellipsized.
      - 
       return-value: CharSequence
       name: getError()
       description: Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input.
      - 
       return-value: int
       name: getExtendedPaddingBottom()
       description: Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing.
      - 
       return-value: int
       name: getExtendedPaddingTop()
       description: Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing.
      - 
       return-value: InputFilter[]
       name: getFilters()
       description: Returns the current list of input filters.
      - 
       return-value: int
       name: getFirstBaselineToTopHeight()
       description: Returns the distance between the first text baseline and the top of this TextView.
      - 
       return-value: void
       name: getFocusedRect(Rect r)
       description: When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.
      - 
       return-value: String
       name: getFontFeatureSettings()
       description: Returns the font feature settings.
      - 
       return-value: String
       name: getFontVariationSettings()
       description: Returns the font variation settings.
      - 
       return-value: boolean
       name: getFreezesText()
       description: Return whether this text view is including its entire text contents in frozen icicles.
      - 
       return-value: int
       name: getGravity()
       description: Returns the horizontal and vertical alignment of this TextView.
      - 
       return-value: int
       name: getHighlightColor()
      - 
       return-value: CharSequence
       name: getHint()
       description: Returns the hint that is displayed when the text of the TextView is empty.
      - 
       return-value: final ColorStateList
       name: getHintTextColors()
      - 
       return-value: int
       name: getHyphenationFrequency()
       description: Gets the current frequency of automatic hyphenation to be used when determining word breaks.
      - 
       return-value: int
       name: getImeActionId()
       description: Get the IME action ID previous set with setImeActionLabel(CharSequence, int).
      - 
       return-value: CharSequence
       name: getImeActionLabel()
       description: Get the IME action label previous set with setImeActionLabel(CharSequence, int).
      - 
       return-value: LocaleList
       name: getImeHintLocales()
      - 
       return-value: int
       name: getImeOptions()
       description: Get the type of the Input Method Editor (IME).
      - 
       return-value: boolean
       name: getIncludeFontPadding()
       description: Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.
      - 
       return-value: Bundle
       name: getInputExtras(boolean create)
       description: Retrieve the input extras currently associated with the text view, which can be viewed as well as modified.
      - 
       return-value: int
       name: getInputType()
       description: Get the type of the editable content.
      - 
       return-value: int
       name: getJustificationMode()
      - 
       return-value: final KeyListener
       name: getKeyListener()
       description: Gets the current KeyListener for the TextView.
      - 
       return-value: int
       name: getLastBaselineToBottomHeight()
       description: Returns the distance between the last text baseline and the bottom of this TextView.
      - 
       return-value: final Layout
       name: getLayout()
       description: Gets the Layout that is currently being used to display the text.
      - 
       return-value: float
       name: getLeftFadingEdgeStrength()
       description: Returns the strength, or intensity, of the left faded edge.
      - 
       return-value: int
       name: getLeftPaddingOffset()
       description: Amount by which to extend the left fading region.
      - 
       return-value: float
       name: getLetterSpacing()
       description: Gets the text letter-space value, which determines the spacing between characters.
      - 
       return-value: int
       name: getLineBounds(int line, Rect bounds)
       description: Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.
      - 
       return-value: int
       name: getLineCount()
       description: Return the number of lines of text, or 0 if the internal Layout has not been built.
      - 
       return-value: int
       name: getLineHeight()
       description: Gets the vertical distance between lines of text, in pixels.
      - 
       return-value: float
       name: getLineSpacingExtra()
       description: Gets the line spacing extra space
      - 
       return-value: float
       name: getLineSpacingMultiplier()
       description: Gets the line spacing multiplier
      - 
       return-value: final ColorStateList
       name: getLinkTextColors()
      - 
       return-value: final boolean
       name: getLinksClickable()
       description: Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int).
      - 
       return-value: int
       name: getMarqueeRepeatLimit()
       description: Gets the number of times the marquee animation is repeated.
      - 
       return-value: int
       name: getMaxEms()
       description: Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using setMaxWidth(int) or setWidth(int).
      - 
       return-value: int
       name: getMaxHeight()
       description: Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using setMaxLines(int) or setLines(int).
      - 
       return-value: int
       name: getMaxLines()
       description: Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using setMaxHeight(int) or setHeight(int).
      - 
       return-value: int
       name: getMaxWidth()
       description: Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using setMaxEms(int) or setEms(int).
      - 
       return-value: int
       name: getMinEms()
       description: Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using setMinWidth(int) or setWidth(int).
      - 
       return-value: int
       name: getMinHeight()
       description: Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using setMinLines(int) or setLines(int).
      - 
       return-value: int
       name: getMinLines()
       description: Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using setMinHeight(int) or setHeight(int).
      - 
       return-value: int
       name: getMinWidth()
       description: Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using setMinEms(int) or setEms(int).
      - 
       return-value: final MovementMethod
       name: getMovementMethod()
       description: Gets the MovementMethod being used for this TextView, which provides positioning, scrolling, and text selection functionality.
      - 
       return-value: int
       name: getOffsetForPosition(float x, float y)
       description: Get the character offset closest to the specified absolute position.
      - 
       return-value: TextPaint
       name: getPaint()
       description: Gets the TextPaint used for the text.
      - 
       return-value: int
       name: getPaintFlags()
       description: Gets the flags on the Paint being used to display the text.
      - 
       return-value: String
       name: getPrivateImeOptions()
       description: Get the private type of the content.
      - 
       return-value: float
       name: getRightFadingEdgeStrength()
       description: Returns the strength, or intensity, of the right faded edge.
      - 
       return-value: int
       name: getRightPaddingOffset()
       description: Amount by which to extend the right fading region.
      - 
       return-value: int
       name: getSelectionEnd()
       description: Convenience for Selection.getSelectionEnd(CharSequence).
      - 
       return-value: int
       name: getSelectionStart()
       description: Convenience for Selection.getSelectionStart(CharSequence).
      - 
       return-value: int
       name: getShadowColor()
       description: Gets the color of the shadow layer.
      - 
       return-value: float
       name: getShadowDx()
      - 
       return-value: float
       name: getShadowDy()
       description: Gets the vertical offset of the shadow layer.
      - 
       return-value: float
       name: getShadowRadius()
       description: Gets the radius of the shadow layer.
      - 
       return-value: final boolean
       name: getShowSoftInputOnFocus()
       description: Returns whether the soft input method will be made visible when this TextView gets focused.
      - 
       return-value: CharSequence
       name: getText()
       description: Return the text that TextView is displaying.
      - 
       return-value: TextClassifier
       name: getTextClassifier()
       description: Returns the TextClassifier used by this TextView.
      - 
       return-value: final ColorStateList
       name: getTextColors()
       description: Gets the text colors for the different states (normal, selected, focused) of the TextView.
      - 
       return-value: Locale
       name: getTextLocale()
       description: Get the default primary Locale of the text in this TextView.
      - 
       return-value: LocaleList
       name: getTextLocales()
       description: Get the default LocaleList of the text in this TextView.
      - 
       return-value: PrecomputedText.Params
       name: getTextMetricsParams()
       description: Gets the parameters for text layout precomputation, for use with PrecomputedText.
      - 
       return-value: float
       name: getTextScaleX()
       description: Gets the extent by which text should be stretched horizontally.
      - 
       return-value: float
       name: getTextSize()
      - 
       return-value: int
       name: getTopPaddingOffset()
       description: Amount by which to extend the top fading region.
      - 
       return-value: int
       name: getTotalPaddingBottom()
       description: Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.
      - 
       return-value: int
       name: getTotalPaddingEnd()
       description: Returns the total end padding of the view, including the end Drawable if any.
      - 
       return-value: int
       name: getTotalPaddingLeft()
       description: Returns the total left padding of the view, including the left Drawable if any.
      - 
       return-value: int
       name: getTotalPaddingRight()
       description: Returns the total right padding of the view, including the right Drawable if any.
      - 
       return-value: int
       name: getTotalPaddingStart()
       description: Returns the total start padding of the view, including the start Drawable if any.
      - 
       return-value: int
       name: getTotalPaddingTop()
       description: Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.
      - 
       return-value: final TransformationMethod
       name: getTransformationMethod()
       description: Gets the current TransformationMethod for the TextView.
      - 
       return-value: Typeface
       name: getTypeface()
       description: Gets the current Typeface that is used to style the text.
      - 
       return-value: URLSpan[]
       name: getUrls()
       description: Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any.
      - 
       return-value: boolean
       name: hasOverlappingRendering()
       description: Returns whether this View has content which overlaps.
      - 
       return-value: boolean
       name: hasSelection()
       description: Return true iff there is a selection inside this text view.
      - 
       return-value: void
       name: invalidateDrawable(Drawable drawable)
       description: Invalidates the specified Drawable.
      - 
       return-value: boolean
       name: isAllCaps()
       description: Checks whether the transformation method applied to this TextView is set to ALL CAPS.
      - 
       return-value: boolean
       name: isCursorVisible()
      - 
       return-value: boolean
       name: isElegantTextHeight()
       description: Get the value of the TextView's elegant height metrics flag.
      - 
       return-value: boolean
       name: isFallbackLineSpacing()
      - 
       return-value: boolean
       name: isInputMethodTarget()
       description: Returns whether this text view is a current input method target.
      - 
       return-value: boolean
       name: isPaddingOffsetRequired()
       description: If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.
      - 
       return-value: boolean
       name: isSuggestionsEnabled()
       description: Return whether or not suggestions are enabled on this TextView.
      - 
       return-value: boolean
       name: isTextSelectable()
       description: Returns the state of the textIsSelectable flag (See setTextIsSelectable()).
      - 
       return-value: void
       name: jumpDrawablesToCurrentState()
       description: Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
      - 
       return-value: int
       name: length()
       description: Returns the length, in characters, of the text managed by this TextView
      - 
       return-value: boolean
       name: moveCursorToVisibleOffset()
       description: Move the cursor, if needed, so that it is at an offset that is visible to the user.
      - 
       return-value: void
       name: onAttachedToWindow()
       description: This is called when the view is attached to a window.
      - 
       return-value: void
       name: onBeginBatchEdit()
       description: Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit().
      - 
       return-value: boolean
       name: onCheckIsTextEditor()
       description: Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.
      - 
       return-value: void
       name: onCommitCompletion(CompletionInfo text)
       description: Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion().
      - 
       return-value: void
       name: onCommitCorrection(CorrectionInfo info)
       description: Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling InputConnection.commitCorrection().
      - 
       return-value: void
       name: onConfigurationChanged(Configuration newConfig)
       description: Called when the current configuration of the resources being used by the application have changed.
      - 
       return-value: void
       name: onCreateContextMenu(ContextMenu menu)
       description: Views should implement this if the view itself is going to add items to the context menu.
      - 
       return-value: int[]
       name: onCreateDrawableState(int extraSpace)
       description: Generate the new Drawable state for this view.
      - 
       return-value: InputConnection
       name: onCreateInputConnection(EditorInfo outAttrs)
       description: Create a new InputConnection for an InputMethod to interact with the view.
      - 
       return-value: boolean
       name: onDragEvent(DragEvent event)
       description: Handles drag events sent by the system following a call to startDragAndDrop().
      - 
       return-value: void
       name: onDraw(Canvas canvas)
       description: Implement this to do your drawing.
      - 
       return-value: void
       name: onEditorAction(int actionCode)
       description: Called when an attached input method calls InputConnection.performEditorAction() for this text view.
      - 
       return-value: void
       name: onEndBatchEdit()
       description: Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit().
      - 
       return-value: void
       name: onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)
       description: Called by the view system when the focus state of this view changes.
      - 
       return-value: boolean
       name: onGenericMotionEvent(MotionEvent event)
       description: Implement this method to handle generic motion events.
      - 
       return-value: boolean
       name: onKeyDown(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable.
      - 
       return-value: boolean
       name: onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
      - 
       return-value: boolean
       name: onKeyPreIme(int keyCode, KeyEvent event)
       description: Handle a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: onKeyShortcut(int keyCode, KeyEvent event)
       description: Called on the focused view when a key shortcut event is not handled.
      - 
       return-value: boolean
       name: onKeyUp(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released.
      - 
       return-value: void
       name: onLayout(boolean changed, int left, int top, int right, int bottom)
       description: Called from layout when this view should assign a size and position to each of its children.
      - 
       return-value: void
       name: onMeasure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: boolean
       name: onPreDraw()
       description: Callback method to be invoked when the view tree is about to be drawn.
      - 
       return-value: boolean
       name: onPrivateIMECommand(String action, Bundle data)
       description: Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand().
      - 
       return-value: void
       name: onProvideAutofillStructure(ViewStructure structure, int flags)
       description: Populates a ViewStructure to fullfil an autofill request.
      - 
       return-value: void
       name: onProvideStructure(ViewStructure structure)
       description: Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.
      - 
       return-value: PointerIcon
       name: onResolvePointerIcon(MotionEvent event, int pointerIndex)
       description: Returns the pointer icon for the motion event, or null if it doesn't specify the icon.
      - 
       return-value: void
       name: onRestoreInstanceState(Parcelable state)
       description: Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().
      - 
       return-value: void
       name: onRtlPropertiesChanged(int layoutDirection)
       description: Called when any RTL property (layout direction or text direction or text alignment) has been changed.
      - 
       return-value: Parcelable
       name: onSaveInstanceState()
       description: Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.
      - 
       return-value: void
       name: onScreenStateChanged(int screenState)
       description: This method is called whenever the state of the screen this view is attached to changes.
      - 
       return-value: void
       name: onScrollChanged(int horiz, int vert, int oldHoriz, int oldVert)
       description: This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).
      - 
       return-value: void
       name: onSelectionChanged(int selStart, int selEnd)
       description: This method is called when the selection has changed, in case any subclasses would like to know.
      - 
       return-value: void
       name: onTextChanged(CharSequence text, int start, int lengthBefore, int lengthAfter)
       description: This method is called when the text is changed, in case any subclasses would like to know.
      - 
       return-value: boolean
       name: onTextContextMenuItem(int id)
       description: Called when a context menu option for the text view is selected.
      - 
       return-value: boolean
       name: onTouchEvent(MotionEvent event)
       description: Implement this method to handle touch screen motion events.
      - 
       return-value: boolean
       name: onTrackballEvent(MotionEvent event)
       description: Implement this method to handle trackball motion events.
      - 
       return-value: void
       name: onVisibilityChanged(View changedView, int visibility)
       description: Called when the visibility of the view or an ancestor of the view has changed.
      - 
       return-value: void
       name: onWindowFocusChanged(boolean hasWindowFocus)
       description: Called when the window containing this view gains or loses focus.
      - 
       return-value: boolean
       name: performLongClick()
       description: Calls this view's OnLongClickListener, if it is defined.
      - 
       return-value: void
       name: removeTextChangedListener(TextWatcher watcher)
       description: Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes.
      - 
       return-value: void
       name: sendAccessibilityEventUnchecked(AccessibilityEvent event)
       description: This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
      - 
       return-value: void
       name: setAllCaps(boolean allCaps)
       description: Sets the properties of this field to transform input to ALL CAPS display.
      - 
       return-value: final void
       name: setAutoLinkMask(int mask)
       description: Sets the autolink mask of the text.
      - 
       return-value: void
       name: setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)
       description: Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds.
      - 
       return-value: void
       name: setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit)
       description: Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds.
      - 
       return-value: void
       name: setAutoSizeTextTypeWithDefaults(int autoSizeTextType)
       description: Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration.
      - 
       return-value: void
       name: setBreakStrategy(int breakStrategy)
       description: Sets the break strategy for breaking paragraphs into lines.
      - 
       return-value: void
       name: setCompoundDrawablePadding(int pad)
       description: Sets the size of the padding between the compound drawables and the text.
      - 
       return-value: void
       name: setCompoundDrawableTintList(ColorStateList tint)
       description: Applies a tint to the compound drawables.
      - 
       return-value: void
       name: setCompoundDrawableTintMode(PorterDuff.Mode tintMode)
       description: Specifies the blending mode used to apply the tint specified by setCompoundDrawableTintList(ColorStateList) to the compound drawables.
      - 
       return-value: void
       name: setCompoundDrawables(Drawable left, Drawable top, Drawable right, Drawable bottom)
       description: Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.
      - 
       return-value: void
       name: setCompoundDrawablesRelative(Drawable start, Drawable top, Drawable end, Drawable bottom)
       description: Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.
      - 
       return-value: void
       name: setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable start, Drawable top, Drawable end, Drawable bottom)
       description: Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.
      - 
       return-value: void
       name: setCompoundDrawablesRelativeWithIntrinsicBounds(int start, int top, int end, int bottom)
       description: Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text.
      - 
       return-value: void
       name: setCompoundDrawablesWithIntrinsicBounds(Drawable left, Drawable top, Drawable right, Drawable bottom)
       description: Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.
      - 
       return-value: void
       name: setCompoundDrawablesWithIntrinsicBounds(int left, int top, int right, int bottom)
       description: Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text.
      - 
       return-value: void
       name: setCursorVisible(boolean visible)
       description: Set whether the cursor is visible.
      - 
       return-value: void
       name: setCustomInsertionActionModeCallback(ActionMode.Callback actionModeCallback)
       description: If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View.
      - 
       return-value: void
       name: setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback)
       description: If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View.
      - 
       return-value: final void
       name: setEditableFactory(Editable.Factory factory)
       description: Sets the Factory used to create new Editables.
      - 
       return-value: void
       name: setElegantTextHeight(boolean elegant)
       description: Set the TextView's elegant height metrics flag.
      - 
       return-value: void
       name: setEllipsize(TextUtils.TruncateAt where)
       description: Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle.
      - 
       return-value: void
       name: setEms(int ems)
       description: Sets the width of the TextView to be exactly ems wide.
      - 
       return-value: void
       name: setEnabled(boolean enabled)
       description: Set the enabled state of this view.
      - 
       return-value: void
       name: setError(CharSequence error)
       description: Sets the right-hand compound drawable of the TextView to the "error" icon and sets an error message that will be displayed in a popup when the TextView has focus.
      - 
       return-value: void
       name: setError(CharSequence error, Drawable icon)
       description: Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus.
      - 
       return-value: void
       name: setExtractedText(ExtractedText text)
       description: Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText).
      - 
       return-value: void
       name: setFallbackLineSpacing(boolean enabled)
       description: Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other).
      - 
       return-value: void
       name: setFilters(InputFilter[] filters)
       description: Sets the list of input filters that will be used if the buffer is Editable.
      - 
       return-value: void
       name: setFirstBaselineToTopHeight(int firstBaselineToTopHeight)
       description: Updates the top padding of the TextView so that firstBaselineToTopHeight is equal to the distance between the firt text baseline and the top of this TextView.
      - 
       return-value: void
       name: setFontFeatureSettings(String fontFeatureSettings)
       description: Sets font feature settings.
      - 
       return-value: boolean
       name: setFontVariationSettings(String fontVariationSettings)
       description: Sets TrueType or OpenType font variation settings.
      - 
       return-value: boolean
       name: setFrame(int l, int t, int r, int b)
       description: Assign a size and position to this view.
      - 
       return-value: void
       name: setFreezesText(boolean freezesText)
       description: Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position.
      - 
       return-value: void
       name: setGravity(int gravity)
       description: Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself.
      - 
       return-value: void
       name: setHeight(int pixels)
       description: Sets the height of the TextView to be exactly pixels tall.
      - 
       return-value: void
       name: setHighlightColor(int color)
       description: Sets the color used to display the selection highlight.
      - 
       return-value: final void
       name: setHint(CharSequence hint)
       description: Sets the text to be displayed when the text of the TextView is empty.
      - 
       return-value: final void
       name: setHint(int resid)
       description: Sets the text to be displayed when the text of the TextView is empty, from a resource.
      - 
       return-value: final void
       name: setHintTextColor(ColorStateList colors)
       description: Sets the color of the hint text.
      - 
       return-value: final void
       name: setHintTextColor(int color)
       description: Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView.
      - 
       return-value: void
       name: setHorizontallyScrolling(boolean whether)
       description: Sets whether the text should be allowed to be wider than the View is.
      - 
       return-value: void
       name: setHyphenationFrequency(int hyphenationFrequency)
       description: Sets the frequency of automatic hyphenation to use when determining word breaks.
      - 
       return-value: void
       name: setImeActionLabel(CharSequence label, int actionId)
       description: Change the custom IME action associated with the text view, which will be reported to an IME with EditorInfo.actionLabel and EditorInfo.actionId when it has focus.
      - 
       return-value: void
       name: setImeHintLocales(LocaleList hintLocales)
       description: Change "hint" locales associated with the text view, which will be reported to an IME with EditorInfo.hintLocales when it has focus.
      - 
       return-value: void
       name: setImeOptions(int imeOptions)
       description: Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with EditorInfo.imeOptions when it has focus.
      - 
       return-value: void
       name: setIncludeFontPadding(boolean includepad)
       description: Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.
      - 
       return-value: void
       name: setInputExtras(int xmlResId)
       description: Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection.
      - 
       return-value: void
       name: setInputType(int type)
       description: Set the type of the content with a constant as defined for EditorInfo.inputType.
      - 
       return-value: void
       name: setJustificationMode(int justificationMode)
       description: Set justification mode.
      - 
       return-value: void
       name: setKeyListener(KeyListener input)
       description: Sets the key listener to be used with this TextView.
      - 
       return-value: void
       name: setLastBaselineToBottomHeight(int lastBaselineToBottomHeight)
       description: Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is equal to the distance between the last text baseline and the bottom of this TextView.
      - 
       return-value: void
       name: setLetterSpacing(float letterSpacing)
       description: Sets text letter-spacing in em units.
      - 
       return-value: void
       name: setLineHeight(int lineHeight)
       description: Sets an explicit line height for this TextView.
      - 
       return-value: void
       name: setLineSpacing(float add, float mult)
       description: Sets line spacing for this TextView.
      - 
       return-value: void
       name: setLines(int lines)
       description: Sets the height of the TextView to be exactly lines tall.
      - 
       return-value: final void
       name: setLinkTextColor(ColorStateList colors)
       description: Sets the color of links in the text.
      - 
       return-value: final void
       name: setLinkTextColor(int color)
       description: Sets the color of links in the text.
      - 
       return-value: final void
       name: setLinksClickable(boolean whether)
       description: Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int).
      - 
       return-value: void
       name: setMarqueeRepeatLimit(int marqueeLimit)
       description: Sets how many times to repeat the marquee animation.
      - 
       return-value: void
       name: setMaxEms(int maxEms)
       description: Sets the width of the TextView to be at most maxEms wide.
      - 
       return-value: void
       name: setMaxHeight(int maxPixels)
       description: Sets the height of the TextView to be at most maxPixels tall.
      - 
       return-value: void
       name: setMaxLines(int maxLines)
       description: Sets the height of the TextView to be at most maxLines tall.
      - 
       return-value: void
       name: setMaxWidth(int maxPixels)
       description: Sets the width of the TextView to be at most maxPixels wide.
      - 
       return-value: void
       name: setMinEms(int minEms)
       description: Sets the width of the TextView to be at least minEms wide.
      - 
       return-value: void
       name: setMinHeight(int minPixels)
       description: Sets the height of the TextView to be at least minPixels tall.
      - 
       return-value: void
       name: setMinLines(int minLines)
       description: Sets the height of the TextView to be at least minLines tall.
      - 
       return-value: void
       name: setMinWidth(int minPixels)
       description: Sets the width of the TextView to be at least minPixels wide.
      - 
       return-value: final void
       name: setMovementMethod(MovementMethod movement)
       description: Sets the MovementMethod for handling arrow key movement for this TextView.
      - 
       return-value: void
       name: setOnEditorActionListener(TextView.OnEditorActionListener l)
       description: Set a special listener to be called when an action is performed on the text view.
      - 
       return-value: void
       name: setPadding(int left, int top, int right, int bottom)
       description: Sets the padding.
      - 
       return-value: void
       name: setPaddingRelative(int start, int top, int end, int bottom)
       description: Sets the relative padding.
      - 
       return-value: void
       name: setPaintFlags(int flags)
       description: Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags.
      - 
       return-value: void
       name: setPrivateImeOptions(String type)
       description: Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection.
      - 
       return-value: void
       name: setRawInputType(int type)
       description: Directly change the content type integer of the text view, without modifying any other state.
      - 
       return-value: void
       name: setScroller(Scroller s)
       description: Sets the Scroller used for producing a scrolling animation
      - 
       return-value: void
       name: setSelectAllOnFocus(boolean selectAllOnFocus)
       description: Set the TextView so that when it takes focus, all the text is selected.
      - 
       return-value: void
       name: setSelected(boolean selected)
       description: Changes the selection state of this view.
      - 
       return-value: void
       name: setShadowLayer(float radius, float dx, float dy, int color)
       description: Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position.
      - 
       return-value: final void
       name: setShowSoftInputOnFocus(boolean show)
       description: Sets whether the soft input method will be made visible when this TextView gets focused.
      - 
       return-value: void
       name: setSingleLine(boolean singleLine)
       description: If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions.
      - 
       return-value: void
       name: setSingleLine()
       description: Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input.
      - 
       return-value: final void
       name: setSpannableFactory(Spannable.Factory factory)
       description: Sets the Factory used to create new Spannables.
      - 
       return-value: final void
       name: setText(int resid)
       description: Sets the text to be displayed using a string resource identifier.
      - 
       return-value: final void
       name: setText(CharSequence text)
       description: Sets the text to be displayed.
      - 
       return-value: void
       name: setText(CharSequence text, TextView.BufferType type)
       description: Sets the text to be displayed and the TextView.BufferType.
      - 
       return-value: final void
       name: setText(int resid, TextView.BufferType type)
       description: Sets the text to be displayed using a string resource identifier and the TextView.BufferType.
      - 
       return-value: final void
       name: setText(char[] text, int start, int len)
       description: Sets the TextView to display the specified slice of the specified char array.
      - 
       return-value: void
       name: setTextAppearance(Context context, int resId)
       description: This method was deprecated in API level 23. Use setTextAppearance(int) instead.
      - 
       return-value: void
       name: setTextAppearance(int resId)
       description: Sets the text appearance from the specified style resource.
      - 
       return-value: void
       name: setTextClassifier(TextClassifier textClassifier)
       description: Sets the TextClassifier for this TextView.
      - 
       return-value: void
       name: setTextColor(int color)
       description: Sets the text color for all the states (normal, selected, focused) to be this color.
      - 
       return-value: void
       name: setTextColor(ColorStateList colors)
       description: Sets the text color.
      - 
       return-value: void
       name: setTextIsSelectable(boolean selectable)
       description: Sets whether the content of this view is selectable by the user.
      - 
       return-value: final void
       name: setTextKeepState(CharSequence text)
       description: Sets the text to be displayed but retains the cursor position.
      - 
       return-value: final void
       name: setTextKeepState(CharSequence text, TextView.BufferType type)
       description: Sets the text to be displayed and the TextView.BufferType but retains the cursor position.
      - 
       return-value: void
       name: setTextLocale(Locale locale)
       description: Set the default Locale of the text in this TextView to a one-member LocaleList containing just the given Locale.
      - 
       return-value: void
       name: setTextLocales(LocaleList locales)
       description: Set the default LocaleList of the text in this TextView to the given value.
      - 
       return-value: void
       name: setTextMetricsParams(PrecomputedText.Params params)
       description: Apply the text layout parameter.
      - 
       return-value: void
       name: setTextScaleX(float size)
       description: Sets the horizontal scale factor for text.
      - 
       return-value: void
       name: setTextSize(int unit, float size)
       description: Set the default text size to a given unit and value.
      - 
       return-value: void
       name: setTextSize(float size)
       description: Set the default text size to the given value, interpreted as "scaled pixel" units.
      - 
       return-value: final void
       name: setTransformationMethod(TransformationMethod method)
       description: Sets the transformation that is applied to the text that this TextView is displaying.
      - 
       return-value: void
       name: setTypeface(Typeface tf)
       description: Sets the typeface and style in which the text should be displayed.
      - 
       return-value: void
       name: setTypeface(Typeface tf, int style)
       description: Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.
      - 
       return-value: void
       name: setWidth(int pixels)
       description: Sets the width of the TextView to be exactly pixels wide.
      - 
       return-value: boolean
       name: showContextMenu()
       description: Shows the context menu for this view.
      - 
       return-value: boolean
       name: showContextMenu(float x, float y)
       description: Shows the context menu for this view anchored to the specified view-relative coordinate.
      - 
       return-value: boolean
       name: verifyDrawable(Drawable who)
       description: If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.
  name: android.view.View
     method: 
      - 
       return-value: void
       name: addChildrenForAccessibility(ArrayList<View> outChildren)
       description: Adds the children of this View relevant for accessibility to the given list as output.
      - 
       return-value: void
       name: addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)
       description: Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
      - 
       return-value: void
       name: addFocusables(ArrayList<View> views, int direction)
       description: Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
      - 
       return-value: void
       name: addFocusables(ArrayList<View> views, int direction, int focusableMode)
       description: Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
      - 
       return-value: void
       name: addKeyboardNavigationClusters(Collection<View> views, int direction)
       description: Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.
      - 
       return-value: void
       name: addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)
       description: Add a listener for attach state changes.
      - 
       return-value: void
       name: addOnLayoutChangeListener(View.OnLayoutChangeListener listener)
       description: Add a listener that will be called when the bounds of the view change due to layout processing.
      - 
       return-value: void
       name: addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)
       description: Adds a listener which will receive unhandled KeyEvents.
      - 
       return-value: void
       name: addTouchables(ArrayList<View> views)
       description: Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
      - 
       return-value: ViewPropertyAnimator
       name: animate()
       description: This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.
      - 
       return-value: void
       name: announceForAccessibility(CharSequence text)
       description: Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.
      - 
       return-value: void
       name: autofill(AutofillValue value)
       description: Automatically fills the content of this view with the value.
      - 
       return-value: void
       name: autofill(SparseArray<AutofillValue> values)
       description: Automatically fills the content of the virtual children within this view.
      - 
       return-value: boolean
       name: awakenScrollBars(int startDelay, boolean invalidate)
       description: 
      - 
       return-value: boolean
       name: awakenScrollBars(int startDelay)
       description: 
      - 
       return-value: boolean
       name: awakenScrollBars()
       description: 
      - 
       return-value: void
       name: bringToFront()
       description: Change the view's z order in the tree, so it's on top of other sibling views.
      - 
       return-value: void
       name: buildDrawingCache(boolean autoScale)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: buildDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: buildLayer()
       description: Forces this view's layer to be created and this view to be rendered into its layer.
      - 
       return-value: boolean
       name: callOnClick()
       description: Directly call any attached OnClickListener.
      - 
       return-value: boolean
       name: canResolveLayoutDirection()
       description: Check if layout direction resolution can be done.
      - 
       return-value: boolean
       name: canResolveTextAlignment()
       description: Check if text alignment resolution can be done.
      - 
       return-value: boolean
       name: canResolveTextDirection()
       description: Check if text direction resolution can be done.
      - 
       return-value: boolean
       name: canScrollHorizontally(int direction)
       description: Check if this view can be scrolled horizontally in a certain direction.
      - 
       return-value: boolean
       name: canScrollVertically(int direction)
       description: Check if this view can be scrolled vertically in a certain direction.
      - 
       return-value: final void
       name: cancelDragAndDrop()
       description: Cancels an ongoing drag and drop operation.
      - 
       return-value: void
       name: cancelLongPress()
       description: Cancels a pending long press.
      - 
       return-value: final void
       name: cancelPendingInputEvents()
       description: Cancel any deferred high-level input events that were previously posted to the event queue.
      - 
       return-value: boolean
       name: checkInputConnectionProxy(View view)
       description: Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.
      - 
       return-value: void
       name: clearAnimation()
       description: Cancels any animations for this view.
      - 
       return-value: void
       name: clearFocus()
       description: Called when this view wants to give up focus.
      - 
       return-value: static int
       name: combineMeasuredStates(int curState, int newState)
       description: Merge two states as returned by getMeasuredState().
      - 
       return-value: int
       name: computeHorizontalScrollExtent()
       description: 
      - 
       return-value: int
       name: computeHorizontalScrollOffset()
       description: 
      - 
       return-value: int
       name: computeHorizontalScrollRange()
       description: 
      - 
       return-value: void
       name: computeScroll()
       description: Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
      - 
       return-value: WindowInsets
       name: computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)
       description: Compute insets that should be consumed by this view and the ones that should propagate to those under it.
      - 
       return-value: int
       name: computeVerticalScrollExtent()
       description: 
      - 
       return-value: int
       name: computeVerticalScrollOffset()
       description: 
      - 
       return-value: int
       name: computeVerticalScrollRange()
       description: 
      - 
       return-value: AccessibilityNodeInfo
       name: createAccessibilityNodeInfo()
       description: Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.
      - 
       return-value: void
       name: createContextMenu(ContextMenu menu)
       description: Show the context menu for this view.
      - 
       return-value: void
       name: destroyDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: WindowInsets
       name: dispatchApplyWindowInsets(WindowInsets insets)
       description: Request to apply the given window insets to this view or another view in its subtree.
      - 
       return-value: boolean
       name: dispatchCapturedPointerEvent(MotionEvent event)
       description: Pass a captured pointer event down to the focused view.
      - 
       return-value: void
       name: dispatchConfigurationChanged(Configuration newConfig)
       description: Dispatch a notification about a resource configuration change down the view hierarchy.
      - 
       return-value: void
       name: dispatchDisplayHint(int hint)
       description: Dispatch a hint about whether this view is displayed.
      - 
       return-value: boolean
       name: dispatchDragEvent(DragEvent event)
       description: Detects if this View is enabled and has a drag event listener.
      - 
       return-value: void
       name: dispatchDraw(Canvas canvas)
       description: Called by draw to draw the child views.
      - 
       return-value: void
       name: dispatchDrawableHotspotChanged(float x, float y)
       description: Dispatches drawableHotspotChanged to all of this View's children.
      - 
       return-value: void
       name: dispatchFinishTemporaryDetach()
       description: Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View.
      - 
       return-value: boolean
       name: dispatchGenericFocusedEvent(MotionEvent event)
       description: Dispatch a generic motion event to the currently focused view.
      - 
       return-value: boolean
       name: dispatchGenericMotionEvent(MotionEvent event)
       description: Dispatch a generic motion event.
      - 
       return-value: boolean
       name: dispatchGenericPointerEvent(MotionEvent event)
       description: Dispatch a generic motion event to the view under the first pointer.
      - 
       return-value: boolean
       name: dispatchHoverEvent(MotionEvent event)
       description: Dispatch a hover event.
      - 
       return-value: boolean
       name: dispatchKeyEvent(KeyEvent event)
       description: Dispatch a key event to the next view on the focus path.
      - 
       return-value: boolean
       name: dispatchKeyEventPreIme(KeyEvent event)
       description: Dispatch a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: dispatchKeyShortcutEvent(KeyEvent event)
       description: Dispatches a key shortcut event.
      - 
       return-value: boolean
       name: dispatchNestedFling(float velocityX, float velocityY, boolean consumed)
       description: Dispatch a fling to a nested scrolling parent.
      - 
       return-value: boolean
       name: dispatchNestedPreFling(float velocityX, float velocityY)
       description: Dispatch a fling to a nested scrolling parent before it is processed by this view.
      - 
       return-value: boolean
       name: dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)
       description: Report an accessibility action to this view's parents for delegated processing.
      - 
       return-value: boolean
       name: dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow)
       description: Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
      - 
       return-value: boolean
       name: dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow)
       description: Dispatch one step of a nested scroll in progress.
      - 
       return-value: void
       name: dispatchPointerCaptureChanged(boolean hasCapture)
      - 
       return-value: boolean
       name: dispatchPopulateAccessibilityEvent(AccessibilityEvent event)
       description: Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.
      - 
       return-value: void
       name: dispatchProvideAutofillStructure(ViewStructure structure, int flags)
       description: Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request.
      - 
       return-value: void
       name: dispatchProvideStructure(ViewStructure structure)
       description: Dispatch creation of ViewStructure down the hierarchy.
      - 
       return-value: void
       name: dispatchRestoreInstanceState(SparseArray<Parcelable> container)
       description: Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.
      - 
       return-value: void
       name: dispatchSaveInstanceState(SparseArray<Parcelable> container)
       description: Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.
      - 
       return-value: void
       name: dispatchSetActivated(boolean activated)
       description: Dispatch setActivated to all of this View's children.
      - 
       return-value: void
       name: dispatchSetPressed(boolean pressed)
       description: Dispatch setPressed to all of this View's children.
      - 
       return-value: void
       name: dispatchSetSelected(boolean selected)
       description: Dispatch setSelected to all of this View's children.
      - 
       return-value: void
       name: dispatchStartTemporaryDetach()
       description: Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View.
      - 
       return-value: void
       name: dispatchSystemUiVisibilityChanged(int visibility)
       description: Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.
      - 
       return-value: boolean
       name: dispatchTouchEvent(MotionEvent event)
       description: Pass the touch screen motion event down to the target view, or this view if it is the target.
      - 
       return-value: boolean
       name: dispatchTrackballEvent(MotionEvent event)
       description: Pass a trackball motion event down to the focused view.
      - 
       return-value: boolean
       name: dispatchUnhandledMove(View focused, int direction)
       description: This method is the last chance for the focused view and its ancestors to respond to an arrow key.
      - 
       return-value: void
       name: dispatchVisibilityChanged(View changedView, int visibility)
       description: Dispatch a view visibility change down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowFocusChanged(boolean hasFocus)
       description: Called when the window containing this view gains or loses window focus.
      - 
       return-value: void
       name: dispatchWindowSystemUiVisiblityChanged(int visible)
       description: Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowVisibilityChanged(int visibility)
       description: Dispatch a window visibility change down the view hierarchy.
      - 
       return-value: void
       name: draw(Canvas canvas)
       description: Manually render this view (and all of its children) to the given Canvas.
      - 
       return-value: void
       name: drawableHotspotChanged(float x, float y)
       description: This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.
      - 
       return-value: void
       name: drawableStateChanged()
       description: This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.
      - 
       return-value: View
       name: findFocus()
       description: Find the view in the hierarchy rooted at this view that currently has focus.
      - 
       return-value: final <T extends View> T
       name: findViewById(int id)
       description: Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy.
      - 
       return-value: final <T extends View> T
       name: findViewWithTag(Object tag)
       description: Look for a child view with the given tag.
      - 
       return-value: void
       name: findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags)
       description: Finds the Views that contain given text.
      - 
       return-value: boolean
       name: fitSystemWindows(Rect insets)
       description: This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets.
      - 
       return-value: View
       name: focusSearch(int direction)
       description: Find the nearest view in the specified direction that can take focus.
      - 
       return-value: void
       name: forceHasOverlappingRendering(boolean hasOverlappingRendering)
       description: Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior).
      - 
       return-value: void
       name: forceLayout()
       description: Forces this view to be laid out during the next layout pass.
      - 
       return-value: static int
       name: generateViewId()
       description: Generate a value suitable for use in setId(int).
      - 
       return-value: CharSequence
       name: getAccessibilityClassName()
       description: Return the class name of this object to be used for accessibility purposes.
      - 
       return-value: int
       name: getAccessibilityLiveRegion()
       description: Gets the live region mode for this View.
      - 
       return-value: AccessibilityNodeProvider
       name: getAccessibilityNodeProvider()
       description: Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.
      - 
       return-value: CharSequence
       name: getAccessibilityPaneTitle()
       description: Get the title of the pane for purposes of accessibility.
      - 
       return-value: int
       name: getAccessibilityTraversalAfter()
       description: Gets the id of a view after which this one is visited in accessibility traversal.
      - 
       return-value: int
       name: getAccessibilityTraversalBefore()
       description: Gets the id of a view before which this one is visited in accessibility traversal.
      - 
       return-value: float
       name: getAlpha()
       description: The opacity of the view.
      - 
       return-value: Animation
       name: getAnimation()
       description: Get the animation currently associated with this view.
      - 
       return-value: IBinder
       name: getApplicationWindowToken()
       description: Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to.
      - 
       return-value: String[]
       name: getAutofillHints()
       description: Gets the hints that help an AutofillService determine how to autofill the view with the user's data.
      - 
       return-value: final AutofillId
       name: getAutofillId()
       description: Gets the unique, logical identifier of this view in the activity, for autofill purposes.
      - 
       return-value: int
       name: getAutofillType()
       description: Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view.
      - 
       return-value: AutofillValue
       name: getAutofillValue()
       description: Gets the View's current autofill value.
      - 
       return-value: Drawable
       name: getBackground()
       description: Gets the background drawable
      - 
       return-value: ColorStateList
       name: getBackgroundTintList()
       description: Return the tint applied to the background drawable, if specified.
      - 
       return-value: PorterDuff.Mode
       name: getBackgroundTintMode()
       description: Return the blending mode used to apply the tint to the background drawable, if specified.
      - 
       return-value: int
       name: getBaseline()
       description: 
      - 
       return-value: final int
       name: getBottom()
       description: Bottom position of this view relative to its parent.
      - 
       return-value: float
       name: getBottomFadingEdgeStrength()
       description: Returns the strength, or intensity, of the bottom faded edge.
      - 
       return-value: int
       name: getBottomPaddingOffset()
       description: Amount by which to extend the bottom fading region.
      - 
       return-value: float
       name: getCameraDistance()
       description: Gets the distance along the Z axis from the camera to this view.
      - 
       return-value: boolean
       name: getClipBounds(Rect outRect)
       description: Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null.
      - 
       return-value: Rect
       name: getClipBounds()
       description: Returns a copy of the current clipBounds.
      - 
       return-value: final boolean
       name: getClipToOutline()
       description: Returns whether the Outline should be used to clip the contents of the View.
      - 
       return-value: CharSequence
       name: getContentDescription()
       description: Returns the View's content description.
      - 
       return-value: final Context
       name: getContext()
       description: Returns the context the view is running in, through which it can access the current theme, resources, etc.
      - 
       return-value: ContextMenu.ContextMenuInfo
       name: getContextMenuInfo()
       description: Views should implement this if they have extra information to associate with the context menu.
      - 
       return-value: final boolean
       name: getDefaultFocusHighlightEnabled()
       description: /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background.
      - 
       return-value: static int
       name: getDefaultSize(int size, int measureSpec)
       description: Utility to return a default size.
      - 
       return-value: Display
       name: getDisplay()
       description: Gets the logical display to which the view's window has been attached.
      - 
       return-value: final int[]
       name: getDrawableState()
       description: Return an array of resource IDs of the drawable states representing the current state of the view.
      - 
       return-value: Bitmap
       name: getDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: Bitmap
       name: getDrawingCache(boolean autoScale)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: int
       name: getDrawingCacheBackgroundColor()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: int
       name: getDrawingCacheQuality()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: getDrawingRect(Rect outRect)
       description: Return the visible drawing bounds of your view.
      - 
       return-value: long
       name: getDrawingTime()
       description: 
      - 
       return-value: float
       name: getElevation()
       description: The base elevation of this view relative to its parent, in pixels.
      - 
       return-value: boolean
       name: getFilterTouchesWhenObscured()
       description: Gets whether the framework should discard touches when the view's window is obscured by another visible window.
      - 
       return-value: boolean
       name: getFitsSystemWindows()
       description: Check for state of setFitsSystemWindows(boolean).
      - 
       return-value: int
       name: getFocusable()
       description: Returns the focusable setting for this view.
      - 
       return-value: ArrayList<View>
       name: getFocusables(int direction)
       description: Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.
      - 
       return-value: void
       name: getFocusedRect(Rect r)
       description: When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.
      - 
       return-value: Drawable
       name: getForeground()
       description: Returns the drawable used as the foreground of this View.
      - 
       return-value: int
       name: getForegroundGravity()
       description: Describes how the foreground is positioned.
      - 
       return-value: ColorStateList
       name: getForegroundTintList()
       description: Return the tint applied to the foreground drawable, if specified.
      - 
       return-value: PorterDuff.Mode
       name: getForegroundTintMode()
       description: Return the blending mode used to apply the tint to the foreground drawable, if specified.
      - 
       return-value: final boolean
       name: getGlobalVisibleRect(Rect r)
      - 
       return-value: boolean
       name: getGlobalVisibleRect(Rect r, Point globalOffset)
       description: If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates.
      - 
       return-value: Handler
       name: getHandler()
      - 
       return-value: final boolean
       name: getHasOverlappingRendering()
       description: Returns the value for overlapping rendering that is used internally.
      - 
       return-value: final int
       name: getHeight()
       description: Return the height of your view.
      - 
       return-value: void
       name: getHitRect(Rect outRect)
       description: Hit rectangle in parent's coordinates
      - 
       return-value: int
       name: getHorizontalFadingEdgeLength()
       description: Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.
      - 
       return-value: int
       name: getHorizontalScrollbarHeight()
       description: Returns the height of the horizontal scrollbar.
      - 
       return-value: int
       name: getId()
       description: Returns this view's identifier.
      - 
       return-value: int
       name: getImportantForAccessibility()
       description: Gets the mode for determining whether this View is important for accessibility.
      - 
       return-value: int
       name: getImportantForAutofill()
       description: Gets the mode for determining whether this view is important for autofill.
      - 
       return-value: boolean
       name: getKeepScreenOn()
       description: Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON.
      - 
       return-value: KeyEvent.DispatcherState
       name: getKeyDispatcherState()
       description: Return the global KeyEvent.DispatcherState for this view's window.
      - 
       return-value: int
       name: getLabelFor()
       description: Gets the id of a view for which this view serves as a label for accessibility purposes.
      - 
       return-value: int
       name: getLayerType()
       description: Indicates what type of layer is currently associated with this view.
      - 
       return-value: int
       name: getLayoutDirection()
       description: Returns the resolved layout direction for this view.
      - 
       return-value: ViewGroup.LayoutParams
       name: getLayoutParams()
       description: Get the LayoutParams associated with this view.
      - 
       return-value: final int
       name: getLeft()
       description: Left position of this view relative to its parent.
      - 
       return-value: float
       name: getLeftFadingEdgeStrength()
       description: Returns the strength, or intensity, of the left faded edge.
      - 
       return-value: int
       name: getLeftPaddingOffset()
       description: Amount by which to extend the left fading region.
      - 
       return-value: final boolean
       name: getLocalVisibleRect(Rect r)
      - 
       return-value: void
       name: getLocationInWindow(int[] outLocation)
       description: 
      - 
       return-value: void
       name: getLocationOnScreen(int[] outLocation)
       description: 
      - 
       return-value: Matrix
       name: getMatrix()
       description: The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.
      - 
       return-value: final int
       name: getMeasuredHeight()
       description: Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK).
      - 
       return-value: final int
       name: getMeasuredHeightAndState()
       description: Return the full height measurement information for this view as computed by the most recent call to measure(int, int).
      - 
       return-value: final int
       name: getMeasuredState()
       description: Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer.
      - 
       return-value: final int
       name: getMeasuredWidth()
       description: Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK).
      - 
       return-value: final int
       name: getMeasuredWidthAndState()
       description: Return the full width measurement information for this view as computed by the most recent call to measure(int, int).
      - 
       return-value: int
       name: getMinimumHeight()
       description: Returns the minimum height of the view.
      - 
       return-value: int
       name: getMinimumWidth()
       description: Returns the minimum width of the view.
      - 
       return-value: int
       name: getNextClusterForwardId()
       description: Gets the id of the root of the next keyboard navigation cluster.
      - 
       return-value: int
       name: getNextFocusDownId()
       description: Gets the id of the view to use when the next focus is FOCUS_DOWN.
      - 
       return-value: int
       name: getNextFocusForwardId()
       description: Gets the id of the view to use when the next focus is FOCUS_FORWARD.
      - 
       return-value: int
       name: getNextFocusLeftId()
       description: Gets the id of the view to use when the next focus is FOCUS_LEFT.
      - 
       return-value: int
       name: getNextFocusRightId()
       description: Gets the id of the view to use when the next focus is FOCUS_RIGHT.
      - 
       return-value: int
       name: getNextFocusUpId()
       description: Gets the id of the view to use when the next focus is FOCUS_UP.
      - 
       return-value: View.OnFocusChangeListener
       name: getOnFocusChangeListener()
       description: Returns the focus-change callback registered for this view.
      - 
       return-value: int
       name: getOutlineAmbientShadowColor()
      - 
       return-value: ViewOutlineProvider
       name: getOutlineProvider()
       description: Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
      - 
       return-value: int
       name: getOutlineSpotShadowColor()
      - 
       return-value: int
       name: getOverScrollMode()
       description: Returns the over-scroll mode for this view.
      - 
       return-value: ViewOverlay
       name: getOverlay()
       description: Returns the overlay for this view, creating it if it does not yet exist.
      - 
       return-value: int
       name: getPaddingBottom()
       description: Returns the bottom padding of this view.
      - 
       return-value: int
       name: getPaddingEnd()
       description: Returns the end padding of this view depending on its resolved layout direction.
      - 
       return-value: int
       name: getPaddingLeft()
       description: Returns the left padding of this view.
      - 
       return-value: int
       name: getPaddingRight()
       description: Returns the right padding of this view.
      - 
       return-value: int
       name: getPaddingStart()
       description: Returns the start padding of this view depending on its resolved layout direction.
      - 
       return-value: int
       name: getPaddingTop()
       description: Returns the top padding of this view.
      - 
       return-value: final ViewParent
       name: getParent()
       description: Gets the parent of this view.
      - 
       return-value: ViewParent
       name: getParentForAccessibility()
       description: Gets the parent for accessibility purposes.
      - 
       return-value: float
       name: getPivotX()
       description: The x location of the point around which the view is rotated and scaled.
      - 
       return-value: float
       name: getPivotY()
       description: The y location of the point around which the view is rotated and scaled.
      - 
       return-value: PointerIcon
       name: getPointerIcon()
       description: Gets the pointer icon for the current view.
      - 
       return-value: Resources
       name: getResources()
       description: Returns the resources associated with this view.
      - 
       return-value: final boolean
       name: getRevealOnFocusHint()
       description: Returns this view's preference for reveal behavior when it gains focus.
      - 
       return-value: final int
       name: getRight()
       description: Right position of this view relative to its parent.
      - 
       return-value: float
       name: getRightFadingEdgeStrength()
       description: Returns the strength, or intensity, of the right faded edge.
      - 
       return-value: int
       name: getRightPaddingOffset()
       description: Amount by which to extend the right fading region.
      - 
       return-value: View
       name: getRootView()
       description: 
      - 
       return-value: WindowInsets
       name: getRootWindowInsets()
       description: Provide original WindowInsets that are dispatched to the view hierarchy.
      - 
       return-value: float
       name: getRotation()
       description: The degrees that the view is rotated around the pivot point.
      - 
       return-value: float
       name: getRotationX()
       description: The degrees that the view is rotated around the horizontal axis through the pivot point.
      - 
       return-value: float
       name: getRotationY()
       description: The degrees that the view is rotated around the vertical axis through the pivot point.
      - 
       return-value: float
       name: getScaleX()
       description: The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: float
       name: getScaleY()
       description: The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height.
      - 
       return-value: int
       name: getScrollBarDefaultDelayBeforeFade()
       description: Returns the delay before scrollbars fade.
      - 
       return-value: int
       name: getScrollBarFadeDuration()
       description: Returns the scrollbar fade duration.
      - 
       return-value: int
       name: getScrollBarSize()
       description: Returns the scrollbar size.
      - 
       return-value: int
       name: getScrollBarStyle()
       description: 
      - 
       return-value: int
       name: getScrollIndicators()
       description: Returns a bitmask representing the enabled scroll indicators.
      - 
       return-value: final int
       name: getScrollX()
       description: Return the scrolled left position of this view.
      - 
       return-value: final int
       name: getScrollY()
       description: Return the scrolled top position of this view.
      - 
       return-value: int
       name: getSolidColor()
       description: Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.
      - 
       return-value: StateListAnimator
       name: getStateListAnimator()
       description: Returns the current StateListAnimator if exists.
      - 
       return-value: int
       name: getSuggestedMinimumHeight()
       description: Returns the suggested minimum height that the view should use.
      - 
       return-value: int
       name: getSuggestedMinimumWidth()
       description: Returns the suggested minimum width that the view should use.
      - 
       return-value: int
       name: getSystemUiVisibility()
       description: Returns the last setSystemUiVisibility(int) that this view has requested.
      - 
       return-value: Object
       name: getTag()
       description: Returns this view's tag.
      - 
       return-value: Object
       name: getTag(int key)
       description: Returns the tag associated with this view and the specified key.
      - 
       return-value: int
       name: getTextAlignment()
       description: Return the resolved text alignment.
      - 
       return-value: int
       name: getTextDirection()
       description: Return the resolved text direction.
      - 
       return-value: CharSequence
       name: getTooltipText()
       description: Returns the view's tooltip text.
      - 
       return-value: final int
       name: getTop()
       description: Top position of this view relative to its parent.
      - 
       return-value: float
       name: getTopFadingEdgeStrength()
       description: Returns the strength, or intensity, of the top faded edge.
      - 
       return-value: int
       name: getTopPaddingOffset()
       description: Amount by which to extend the top fading region.
      - 
       return-value: TouchDelegate
       name: getTouchDelegate()
       description: Gets the TouchDelegate for this View.
      - 
       return-value: ArrayList<View>
       name: getTouchables()
       description: Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.
      - 
       return-value: String
       name: getTransitionName()
       description: Returns the name of the View to be used to identify Views in Transitions.
      - 
       return-value: float
       name: getTranslationX()
       description: The horizontal location of this view relative to its left position.
      - 
       return-value: float
       name: getTranslationY()
       description: The vertical location of this view relative to its top position.
      - 
       return-value: float
       name: getTranslationZ()
       description: The depth location of this view relative to its elevation.
      - 
       return-value: int
       name: getVerticalFadingEdgeLength()
       description: Returns the size of the vertical faded edges used to indicate that more content in this view is visible.
      - 
       return-value: int
       name: getVerticalScrollbarPosition()
      - 
       return-value: int
       name: getVerticalScrollbarWidth()
       description: Returns the width of the vertical scrollbar.
      - 
       return-value: ViewTreeObserver
       name: getViewTreeObserver()
       description: Returns the ViewTreeObserver for this view's hierarchy.
      - 
       return-value: int
       name: getVisibility()
       description: Returns the visibility status for this view.
      - 
       return-value: final int
       name: getWidth()
       description: Return the width of your view.
      - 
       return-value: int
       name: getWindowAttachCount()
      - 
       return-value: WindowId
       name: getWindowId()
       description: Retrieve the WindowId for the window this view is currently attached to.
      - 
       return-value: int
       name: getWindowSystemUiVisibility()
       description: Returns the current system UI visibility that is currently set for the entire window.
      - 
       return-value: IBinder
       name: getWindowToken()
       description: Retrieve a unique token identifying the window this view is attached to.
      - 
       return-value: int
       name: getWindowVisibility()
       description: Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE).
      - 
       return-value: void
       name: getWindowVisibleDisplayFrame(Rect outRect)
       description: Retrieve the overall visible display size in which the window this view is attached to has been positioned in.
      - 
       return-value: float
       name: getX()
       description: The visual x position of this view, in pixels.
      - 
       return-value: float
       name: getY()
       description: The visual y position of this view, in pixels.
      - 
       return-value: float
       name: getZ()
       description: The visual z position of this view, in pixels.
      - 
       return-value: boolean
       name: hasExplicitFocusable()
       description: Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true.
      - 
       return-value: boolean
       name: hasFocus()
       description: Returns true if this view has focus itself, or is the ancestor of the view that has focus.
      - 
       return-value: boolean
       name: hasFocusable()
       description: Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.
      - 
       return-value: boolean
       name: hasNestedScrollingParent()
       description: Returns true if this view has a nested scrolling parent.
      - 
       return-value: boolean
       name: hasOnClickListeners()
       description: Return whether this view has an attached OnClickListener.
      - 
       return-value: boolean
       name: hasOverlappingRendering()
       description: Returns whether this View has content which overlaps.
      - 
       return-value: boolean
       name: hasPointerCapture()
       description: Checks pointer capture status.
      - 
       return-value: boolean
       name: hasTransientState()
       description: Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.
      - 
       return-value: boolean
       name: hasWindowFocus()
       description: Returns true if this view is in a window that currently has window focus.
      - 
       return-value: static View
       name: inflate(Context context, int resource, ViewGroup root)
       description: Inflate a view from an XML resource.
      - 
       return-value: void
       name: invalidate()
       description: Invalidate the whole view.
      - 
       return-value: void
       name: invalidate(Rect dirty)
       description: This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().
      - 
       return-value: void
       name: invalidate(int l, int t, int r, int b)
       description: This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().
      - 
       return-value: void
       name: invalidateDrawable(Drawable drawable)
       description: Invalidates the specified Drawable.
      - 
       return-value: void
       name: invalidateOutline()
       description: Called to rebuild this View's Outline from its outline provider
      - 
       return-value: boolean
       name: isAccessibilityFocused()
       description: Returns whether this View is accessibility focused.
      - 
       return-value: boolean
       name: isAccessibilityHeading()
       description: Gets whether this view is a heading for accessibility purposes.
      - 
       return-value: boolean
       name: isActivated()
       description: Indicates the activation state of this view.
      - 
       return-value: boolean
       name: isAttachedToWindow()
       description: Returns true if this view is currently attached to a window.
      - 
       return-value: boolean
       name: isClickable()
       description: Indicates whether this view reacts to click events or not.
      - 
       return-value: boolean
       name: isContextClickable()
       description: Indicates whether this view reacts to context clicks or not.
      - 
       return-value: boolean
       name: isDirty()
       description: True if this view has changed since the last time being drawn.
      - 
       return-value: boolean
       name: isDrawingCacheEnabled()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: boolean
       name: isDuplicateParentStateEnabled()
       description: 
      - 
       return-value: boolean
       name: isEnabled()
       description: Returns the enabled status for this view.
      - 
       return-value: final boolean
       name: isFocusable()
       description: Returns whether this View is currently able to take focus.
      - 
       return-value: final boolean
       name: isFocusableInTouchMode()
       description: When a view is focusable, it may not want to take focus when in touch mode.
      - 
       return-value: boolean
       name: isFocused()
       description: Returns true if this view has focus
      - 
       return-value: final boolean
       name: isFocusedByDefault()
       description: Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
      - 
       return-value: boolean
       name: isHapticFeedbackEnabled()
      - 
       return-value: boolean
       name: isHardwareAccelerated()
       description: 
      - 
       return-value: boolean
       name: isHorizontalFadingEdgeEnabled()
       description: 
      - 
       return-value: boolean
       name: isHorizontalScrollBarEnabled()
       description: 
      - 
       return-value: boolean
       name: isHovered()
       description: Returns true if the view is currently hovered.
      - 
       return-value: boolean
       name: isImportantForAccessibility()
       description: Computes whether this view should be exposed for accessibility.
      - 
       return-value: final boolean
       name: isImportantForAutofill()
       description: Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes.
      - 
       return-value: boolean
       name: isInEditMode()
       description: Indicates whether this View is currently in edit mode.
      - 
       return-value: boolean
       name: isInLayout()
       description: Returns whether the view hierarchy is currently undergoing a layout pass.
      - 
       return-value: boolean
       name: isInTouchMode()
       description: Returns whether the device is currently in touch mode.
      - 
       return-value: final boolean
       name: isKeyboardNavigationCluster()
       description: Returns whether this View is a root of a keyboard navigation cluster.
      - 
       return-value: boolean
       name: isLaidOut()
       description: Returns true if this view has been through at least one layout since it was last attached to or detached from a window.
      - 
       return-value: boolean
       name: isLayoutDirectionResolved()
      - 
       return-value: boolean
       name: isLayoutRequested()
       description: 
      - 
       return-value: boolean
       name: isLongClickable()
       description: Indicates whether this view reacts to long click events or not.
      - 
       return-value: boolean
       name: isNestedScrollingEnabled()
       description: Returns true if nested scrolling is enabled for this view.
      - 
       return-value: boolean
       name: isOpaque()
       description: Indicates whether this View is opaque.
      - 
       return-value: boolean
       name: isPaddingOffsetRequired()
       description: If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.
      - 
       return-value: boolean
       name: isPaddingRelative()
       description: Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through
      - 
       return-value: boolean
       name: isPivotSet()
       description: Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float).
      - 
       return-value: boolean
       name: isPressed()
       description: Indicates whether the view is currently in pressed state.
      - 
       return-value: boolean
       name: isSaveEnabled()
       description: Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called).
      - 
       return-value: boolean
       name: isSaveFromParentEnabled()
       description: Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
      - 
       return-value: boolean
       name: isScreenReaderFocusable()
       description: Returns whether the view should be treated as a focusable unit by screen reader accessibility tools.
      - 
       return-value: boolean
       name: isScrollContainer()
       description: Indicates whether this view is one of the set of scrollable containers in its window.
      - 
       return-value: boolean
       name: isScrollbarFadingEnabled()
       description: Returns true if scrollbars will fade when this view is not scrolling
      - 
       return-value: boolean
       name: isSelected()
       description: Indicates the selection state of this view.
      - 
       return-value: boolean
       name: isShown()
       description: Returns the visibility of this view and all of its ancestors
      - 
       return-value: boolean
       name: isSoundEffectsEnabled()
      - 
       return-value: final boolean
       name: isTemporarilyDetached()
       description: Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach().
      - 
       return-value: boolean
       name: isTextAlignmentResolved()
      - 
       return-value: boolean
       name: isTextDirectionResolved()
      - 
       return-value: boolean
       name: isVerticalFadingEdgeEnabled()
       description: 
      - 
       return-value: boolean
       name: isVerticalScrollBarEnabled()
       description: 
      - 
       return-value: boolean
       name: isVisibleToUserForAutofill(int virtualId)
       description: Computes whether this virtual autofill view is visible to the user.
      - 
       return-value: void
       name: jumpDrawablesToCurrentState()
       description: Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
      - 
       return-value: View
       name: keyboardNavigationClusterSearch(View currentCluster, int direction)
       description: Find the nearest keyboard navigation cluster in the specified direction.
      - 
       return-value: void
       name: layout(int l, int t, int r, int b)
       description: Assign a size and position to a view and all of its descendants
      - 
       return-value: final void
       name: measure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: static int[]
       name: mergeDrawableStates(int[] baseState, int[] additionalState)
       description: Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int).
      - 
       return-value: void
       name: offsetLeftAndRight(int offset)
       description: Offset this view's horizontal location by the specified amount of pixels.
      - 
       return-value: void
       name: offsetTopAndBottom(int offset)
       description: Offset this view's vertical location by the specified number of pixels.
      - 
       return-value: void
       name: onAnimationEnd()
       description: Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.
      - 
       return-value: void
       name: onAnimationStart()
       description: Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.
      - 
       return-value: WindowInsets
       name: onApplyWindowInsets(WindowInsets insets)
       description: Called when the view should apply WindowInsets according to its internal policy.
      - 
       return-value: void
       name: onAttachedToWindow()
       description: This is called when the view is attached to a window.
      - 
       return-value: void
       name: onCancelPendingInputEvents()
       description: Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.
      - 
       return-value: boolean
       name: onCapturedPointerEvent(MotionEvent event)
       description: Implement this method to handle captured pointer events
      - 
       return-value: boolean
       name: onCheckIsTextEditor()
       description: Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.
      - 
       return-value: void
       name: onConfigurationChanged(Configuration newConfig)
       description: Called when the current configuration of the resources being used by the application have changed.
      - 
       return-value: void
       name: onCreateContextMenu(ContextMenu menu)
       description: Views should implement this if the view itself is going to add items to the context menu.
      - 
       return-value: int[]
       name: onCreateDrawableState(int extraSpace)
       description: Generate the new Drawable state for this view.
      - 
       return-value: InputConnection
       name: onCreateInputConnection(EditorInfo outAttrs)
       description: Create a new InputConnection for an InputMethod to interact with the view.
      - 
       return-value: void
       name: onDetachedFromWindow()
       description: This is called when the view is detached from a window.
      - 
       return-value: void
       name: onDisplayHint(int hint)
       description: Gives this view a hint about whether is displayed or not.
      - 
       return-value: boolean
       name: onDragEvent(DragEvent event)
       description: Handles drag events sent by the system following a call to startDragAndDrop().
      - 
       return-value: void
       name: onDraw(Canvas canvas)
       description: Implement this to do your drawing.
      - 
       return-value: void
       name: onDrawForeground(Canvas canvas)
       description: Draw any foreground content for this view.
      - 
       return-value: final void
       name: onDrawScrollBars(Canvas canvas)
       description: 
      - 
       return-value: boolean
       name: onFilterTouchEventForSecurity(MotionEvent event)
       description: Filter the touch event to apply security policies.
      - 
       return-value: void
       name: onFinishInflate()
       description: Finalize inflating a view from XML.
      - 
       return-value: void
       name: onFinishTemporaryDetach()
       description: Called after onStartTemporaryDetach() when the container is done changing the view.
      - 
       return-value: void
       name: onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)
       description: Called by the view system when the focus state of this view changes.
      - 
       return-value: boolean
       name: onGenericMotionEvent(MotionEvent event)
       description: Implement this method to handle generic motion events.
      - 
       return-value: void
       name: onHoverChanged(boolean hovered)
       description: Implement this method to handle hover state changes.
      - 
       return-value: boolean
       name: onHoverEvent(MotionEvent event)
       description: Implement this method to handle hover events.
      - 
       return-value: void
       name: onInitializeAccessibilityEvent(AccessibilityEvent event)
       description: Initializes an AccessibilityEvent with information about this View which is the event source.
      - 
       return-value: void
       name: onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)
       description: Initializes an AccessibilityNodeInfo with information about this view.
      - 
       return-value: boolean
       name: onKeyDown(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable.
      - 
       return-value: boolean
       name: onKeyLongPress(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).
      - 
       return-value: boolean
       name: onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
      - 
       return-value: boolean
       name: onKeyPreIme(int keyCode, KeyEvent event)
       description: Handle a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: onKeyShortcut(int keyCode, KeyEvent event)
       description: Called on the focused view when a key shortcut event is not handled.
      - 
       return-value: boolean
       name: onKeyUp(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released.
      - 
       return-value: void
       name: onLayout(boolean changed, int left, int top, int right, int bottom)
       description: Called from layout when this view should assign a size and position to each of its children.
      - 
       return-value: void
       name: onMeasure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: void
       name: onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)
       description: Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation.
      - 
       return-value: void
       name: onPointerCaptureChange(boolean hasCapture)
       description: Called when the window has just acquired or lost pointer capture.
      - 
       return-value: void
       name: onPopulateAccessibilityEvent(AccessibilityEvent event)
       description: Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.
      - 
       return-value: void
       name: onProvideAutofillStructure(ViewStructure structure, int flags)
       description: Populates a ViewStructure to fullfil an autofill request.
      - 
       return-value: void
       name: onProvideAutofillVirtualStructure(ViewStructure structure, int flags)
       description: Populates a ViewStructure containing virtual children to fullfil an autofill request.
      - 
       return-value: void
       name: onProvideStructure(ViewStructure structure)
       description: Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.
      - 
       return-value: void
       name: onProvideVirtualStructure(ViewStructure structure)
       description: Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
      - 
       return-value: PointerIcon
       name: onResolvePointerIcon(MotionEvent event, int pointerIndex)
       description: Returns the pointer icon for the motion event, or null if it doesn't specify the icon.
      - 
       return-value: void
       name: onRestoreInstanceState(Parcelable state)
       description: Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().
      - 
       return-value: void
       name: onRtlPropertiesChanged(int layoutDirection)
       description: Called when any RTL property (layout direction or text direction or text alignment) has been changed.
      - 
       return-value: Parcelable
       name: onSaveInstanceState()
       description: Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.
      - 
       return-value: void
       name: onScreenStateChanged(int screenState)
       description: This method is called whenever the state of the screen this view is attached to changes.
      - 
       return-value: void
       name: onScrollChanged(int l, int t, int oldl, int oldt)
       description: This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).
      - 
       return-value: boolean
       name: onSetAlpha(int alpha)
       description: Invoked if there is a Transform that involves alpha.
      - 
       return-value: void
       name: onSizeChanged(int w, int h, int oldw, int oldh)
       description: This is called during layout when the size of this view has changed.
      - 
       return-value: void
       name: onStartTemporaryDetach()
       description: This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent.
      - 
       return-value: boolean
       name: onTouchEvent(MotionEvent event)
       description: Implement this method to handle touch screen motion events.
      - 
       return-value: boolean
       name: onTrackballEvent(MotionEvent event)
       description: Implement this method to handle trackball motion events.
      - 
       return-value: void
       name: onVisibilityAggregated(boolean isVisible)
       description: Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to.
      - 
       return-value: void
       name: onVisibilityChanged(View changedView, int visibility)
       description: Called when the visibility of the view or an ancestor of the view has changed.
      - 
       return-value: void
       name: onWindowFocusChanged(boolean hasWindowFocus)
       description: Called when the window containing this view gains or loses focus.
      - 
       return-value: void
       name: onWindowSystemUiVisibilityChanged(int visible)
       description: Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility().
      - 
       return-value: void
       name: onWindowVisibilityChanged(int visibility)
       description: Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE).
      - 
       return-value: boolean
       name: overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent)
       description: Scroll the view with standard behavior for scrolling beyond the normal content boundaries.
      - 
       return-value: boolean
       name: performAccessibilityAction(int action, Bundle arguments)
       description: Performs the specified accessibility action on the view.
      - 
       return-value: boolean
       name: performClick()
       description: Call this view's OnClickListener, if it is defined.
      - 
       return-value: boolean
       name: performContextClick(float x, float y)
       description: Call this view's OnContextClickListener, if it is defined.
      - 
       return-value: boolean
       name: performContextClick()
       description: Call this view's OnContextClickListener, if it is defined.
      - 
       return-value: boolean
       name: performHapticFeedback(int feedbackConstant)
       description: BZZZTT!!1!
      - 
       return-value: boolean
       name: performHapticFeedback(int feedbackConstant, int flags)
       description: BZZZTT!!1!
      - 
       return-value: boolean
       name: performLongClick(float x, float y)
       description: Calls this view's OnLongClickListener, if it is defined.
      - 
       return-value: boolean
       name: performLongClick()
       description: Calls this view's OnLongClickListener, if it is defined.
      - 
       return-value: void
       name: playSoundEffect(int soundConstant)
       description: Play a sound effect for this view.
      - 
       return-value: boolean
       name: post(Runnable action)
       description: 
      - 
       return-value: boolean
       name: postDelayed(Runnable action, long delayMillis)
       description: 
      - 
       return-value: void
       name: postInvalidate()
       description: 
      - 
       return-value: void
       name: postInvalidate(int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateDelayed(long delayMilliseconds)
       description: 
      - 
       return-value: void
       name: postInvalidateOnAnimation(int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateOnAnimation()
       description: 
      - 
       return-value: void
       name: postOnAnimation(Runnable action)
       description: 
      - 
       return-value: void
       name: postOnAnimationDelayed(Runnable action, long delayMillis)
       description: 
      - 
       return-value: void
       name: refreshDrawableState()
       description: Call this to force a view to update its drawable state.
      - 
       return-value: void
       name: releasePointerCapture()
       description: Releases the pointer capture.
      - 
       return-value: boolean
       name: removeCallbacks(Runnable action)
       description: 
      - 
       return-value: void
       name: removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)
       description: Remove a listener for attach state changes.
      - 
       return-value: void
       name: removeOnLayoutChangeListener(View.OnLayoutChangeListener listener)
       description: Remove a listener for layout changes.
      - 
       return-value: void
       name: removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)
       description: Removes a listener which will receive unhandled KeyEvents.
      - 
       return-value: void
       name: requestApplyInsets()
       description: Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed.
      - 
       return-value: void
       name: requestFitSystemWindows()
       description: This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions.
      - 
       return-value: final boolean
       name: requestFocus(int direction)
       description: Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.
      - 
       return-value: final boolean
       name: requestFocus()
       description: Call this to try to give focus to a specific view or to one of its descendants.
      - 
       return-value: boolean
       name: requestFocus(int direction, Rect previouslyFocusedRect)
       description: Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
      - 
       return-value: final boolean
       name: requestFocusFromTouch()
       description: Call this to try to give focus to a specific view or to one of its descendants.
      - 
       return-value: void
       name: requestLayout()
       description: Call this when something has changed which has invalidated the layout of this view.
      - 
       return-value: void
       name: requestPointerCapture()
       description: Requests pointer capture mode.
      - 
       return-value: boolean
       name: requestRectangleOnScreen(Rect rectangle)
       description: Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
      - 
       return-value: boolean
       name: requestRectangleOnScreen(Rect rectangle, boolean immediate)
       description: Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
      - 
       return-value: final void
       name: requestUnbufferedDispatch(MotionEvent event)
       description: Request unbuffered dispatch of the given stream of MotionEvents to this View.
      - 
       return-value: final <T extends View> T
       name: requireViewById(int id)
       description: Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy.
      - 
       return-value: void
       name: resetPivot()
       description: Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float).
      - 
       return-value: static int
       name: resolveSize(int size, int measureSpec)
       description: Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result.
      - 
       return-value: static int
       name: resolveSizeAndState(int size, int measureSpec, int childMeasuredState)
       description: Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.
      - 
       return-value: boolean
       name: restoreDefaultFocus()
       description: Gives focus to the default-focus view in the view hierarchy that has this view as a root.
      - 
       return-value: void
       name: restoreHierarchyState(SparseArray<Parcelable> container)
       description: Restore this view hierarchy's frozen state from the given container.
      - 
       return-value: void
       name: saveHierarchyState(SparseArray<Parcelable> container)
       description: Store this view hierarchy's frozen state into the given container.
      - 
       return-value: void
       name: scheduleDrawable(Drawable who, Runnable what, long when)
       description: Schedules an action on a drawable to occur at a specified time.
      - 
       return-value: void
       name: scrollBy(int x, int y)
       description: Move the scrolled position of your view.
      - 
       return-value: void
       name: scrollTo(int x, int y)
       description: Set the scrolled position of your view.
      - 
       return-value: void
       name: sendAccessibilityEvent(int eventType)
       description: Sends an accessibility event of the given type.
      - 
       return-value: void
       name: sendAccessibilityEventUnchecked(AccessibilityEvent event)
       description: This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
      - 
       return-value: void
       name: setAccessibilityDelegate(View.AccessibilityDelegate delegate)
       description: Sets a delegate for implementing accessibility support via composition (as opposed to inheritance).
      - 
       return-value: void
       name: setAccessibilityHeading(boolean isHeading)
       description: Set if view is a heading for a section of content for accessibility purposes.
      - 
       return-value: void
       name: setAccessibilityLiveRegion(int mode)
       description: Sets the live region mode for this view.
      - 
       return-value: void
       name: setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle)
       description: Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes.
      - 
       return-value: void
       name: setAccessibilityTraversalAfter(int afterId)
       description: Sets the id of a view after which this one is visited in accessibility traversal.
      - 
       return-value: void
       name: setAccessibilityTraversalBefore(int beforeId)
       description: Sets the id of a view before which this one is visited in accessibility traversal.
      - 
       return-value: void
       name: setActivated(boolean activated)
       description: Changes the activated state of this view.
      - 
       return-value: void
       name: setAlpha(float alpha)
       description: Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.
      - 
       return-value: void
       name: setAnimation(Animation animation)
       description: Sets the next animation to play for this view.
      - 
       return-value: void
       name: setAutofillHints(String... autofillHints)
       description: Sets the hints that help an AutofillService determine how to autofill the view with the user's data.
      - 
       return-value: void
       name: setAutofillId(AutofillId id)
       description: Sets the unique, logical identifier of this view in the activity, for autofill purposes.
      - 
       return-value: void
       name: setBackground(Drawable background)
       description: Set the background to a given Drawable, or remove the background.
      - 
       return-value: void
       name: setBackgroundColor(int color)
       description: Sets the background color for this view.
      - 
       return-value: void
       name: setBackgroundDrawable(Drawable background)
       description: This method was deprecated in API level 16. use setBackground(Drawable) instead
      - 
       return-value: void
       name: setBackgroundResource(int resid)
       description: Set the background to a given resource.
      - 
       return-value: void
       name: setBackgroundTintList(ColorStateList tint)
       description: Applies a tint to the background drawable.
      - 
       return-value: void
       name: setBackgroundTintMode(PorterDuff.Mode tintMode)
       description: Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable.
      - 
       return-value: final void
       name: setBottom(int bottom)
       description: Sets the bottom position of this view relative to its parent.
      - 
       return-value: void
       name: setCameraDistance(float distance)
       description: 
      - 
       return-value: void
       name: setClickable(boolean clickable)
       description: Enables or disables click events for this view.
      - 
       return-value: void
       name: setClipBounds(Rect clipBounds)
       description: Sets a rectangular area on this view to which the view will be clipped when it is drawn.
      - 
       return-value: void
       name: setClipToOutline(boolean clipToOutline)
       description: Sets whether the View's Outline should be used to clip the contents of the View.
      - 
       return-value: void
       name: setContentDescription(CharSequence contentDescription)
       description: Sets the View's content description.
      - 
       return-value: void
       name: setContextClickable(boolean contextClickable)
       description: Enables or disables context clicking for this view.
      - 
       return-value: void
       name: setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled)
       description: Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background.
      - 
       return-value: void
       name: setDrawingCacheBackgroundColor(int color)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDrawingCacheEnabled(boolean enabled)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDrawingCacheQuality(int quality)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDuplicateParentStateEnabled(boolean enabled)
       description: 
      - 
       return-value: void
       name: setElevation(float elevation)
       description: Sets the base elevation of this view, in pixels.
      - 
       return-value: void
       name: setEnabled(boolean enabled)
       description: Set the enabled state of this view.
      - 
       return-value: void
       name: setFadingEdgeLength(int length)
       description: Set the size of the faded edge used to indicate that more content in this view is available.
      - 
       return-value: void
       name: setFilterTouchesWhenObscured(boolean enabled)
       description: Sets whether the framework should discard touches when the view's window is obscured by another visible window.
      - 
       return-value: void
       name: setFitsSystemWindows(boolean fitSystemWindows)
       description: Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed.
      - 
       return-value: void
       name: setFocusable(boolean focusable)
       description: Set whether this view can receive the focus.
      - 
       return-value: void
       name: setFocusable(int focusable)
       description: Sets whether this view can receive focus.
      - 
       return-value: void
       name: setFocusableInTouchMode(boolean focusableInTouchMode)
       description: Set whether this view can receive focus while in touch mode.
      - 
       return-value: void
       name: setFocusedByDefault(boolean isFocusedByDefault)
       description: Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
      - 
       return-value: void
       name: setForeground(Drawable foreground)
       description: Supply a Drawable that is to be rendered on top of all of the content in the view.
      - 
       return-value: void
       name: setForegroundGravity(int gravity)
       description: Describes how the foreground is positioned.
      - 
       return-value: void
       name: setForegroundTintList(ColorStateList tint)
       description: Applies a tint to the foreground drawable.
      - 
       return-value: void
       name: setForegroundTintMode(PorterDuff.Mode tintMode)
       description: Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable.
      - 
       return-value: void
       name: setHapticFeedbackEnabled(boolean hapticFeedbackEnabled)
       description: Set whether this view should have haptic feedback for events such as long presses.
      - 
       return-value: void
       name: setHasTransientState(boolean hasTransientState)
       description: Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.
      - 
       return-value: void
       name: setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled)
       description: 
      - 
       return-value: void
       name: setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled)
       description: 
      - 
       return-value: void
       name: setHovered(boolean hovered)
       description: Sets whether the view is currently hovered.
      - 
       return-value: void
       name: setId(int id)
       description: Sets the identifier for this view.
      - 
       return-value: void
       name: setImportantForAccessibility(int mode)
       description: Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.
      - 
       return-value: void
       name: setImportantForAutofill(int mode)
       description: Sets the mode for determining whether this view is considered important for autofill.
      - 
       return-value: void
       name: setKeepScreenOn(boolean keepScreenOn)
       description: Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON.
      - 
       return-value: void
       name: setKeyboardNavigationCluster(boolean isCluster)
       description: Set whether this view is a root of a keyboard navigation cluster.
      - 
       return-value: void
       name: setLabelFor(int id)
       description: Sets the id of a view for which this view serves as a label for accessibility purposes.
      - 
       return-value: void
       name: setLayerPaint(Paint paint)
       description: Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).
      - 
       return-value: void
       name: setLayerType(int layerType, Paint paint)
       description: 
      - 
       return-value: void
       name: setLayoutDirection(int layoutDirection)
       description: Set the layout direction for this view.
      - 
       return-value: void
       name: setLayoutParams(ViewGroup.LayoutParams params)
       description: Set the layout parameters associated with this view.
      - 
       return-value: final void
       name: setLeft(int left)
       description: Sets the left position of this view relative to its parent.
      - 
       return-value: void
       name: setLongClickable(boolean longClickable)
       description: Enables or disables long click events for this view.
      - 
       return-value: final void
       name: setMeasuredDimension(int measuredWidth, int measuredHeight)
       description: 
      - 
       return-value: void
       name: setMinimumHeight(int minHeight)
       description: Sets the minimum height of the view.
      - 
       return-value: void
       name: setMinimumWidth(int minWidth)
       description: Sets the minimum width of the view.
      - 
       return-value: void
       name: setNestedScrollingEnabled(boolean enabled)
       description: Enable or disable nested scrolling for this view.
      - 
       return-value: void
       name: setNextClusterForwardId(int nextClusterForwardId)
       description: Sets the id of the view to use as the root of the next keyboard navigation cluster.
      - 
       return-value: void
       name: setNextFocusDownId(int nextFocusDownId)
       description: Sets the id of the view to use when the next focus is FOCUS_DOWN.
      - 
       return-value: void
       name: setNextFocusForwardId(int nextFocusForwardId)
       description: Sets the id of the view to use when the next focus is FOCUS_FORWARD.
      - 
       return-value: void
       name: setNextFocusLeftId(int nextFocusLeftId)
       description: Sets the id of the view to use when the next focus is FOCUS_LEFT.
      - 
       return-value: void
       name: setNextFocusRightId(int nextFocusRightId)
       description: Sets the id of the view to use when the next focus is FOCUS_RIGHT.
      - 
       return-value: void
       name: setNextFocusUpId(int nextFocusUpId)
       description: Sets the id of the view to use when the next focus is FOCUS_UP.
      - 
       return-value: void
       name: setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener)
       description: Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.
      - 
       return-value: void
       name: setOnCapturedPointerListener(View.OnCapturedPointerListener l)
       description: Set a listener to receive callbacks when the pointer capture state of a view changes.
      - 
       return-value: void
       name: setOnClickListener(View.OnClickListener l)
       description: Register a callback to be invoked when this view is clicked.
      - 
       return-value: void
       name: setOnContextClickListener(View.OnContextClickListener l)
       description: Register a callback to be invoked when this view is context clicked.
      - 
       return-value: void
       name: setOnCreateContextMenuListener(View.OnCreateContextMenuListener l)
       description: Register a callback to be invoked when the context menu for this view is being built.
      - 
       return-value: void
       name: setOnDragListener(View.OnDragListener l)
       description: Register a drag event listener callback object for this View.
      - 
       return-value: void
       name: setOnFocusChangeListener(View.OnFocusChangeListener l)
       description: Register a callback to be invoked when focus of this view changed.
      - 
       return-value: void
       name: setOnGenericMotionListener(View.OnGenericMotionListener l)
       description: Register a callback to be invoked when a generic motion event is sent to this view.
      - 
       return-value: void
       name: setOnHoverListener(View.OnHoverListener l)
       description: Register a callback to be invoked when a hover event is sent to this view.
      - 
       return-value: void
       name: setOnKeyListener(View.OnKeyListener l)
       description: Register a callback to be invoked when a hardware key is pressed in this view.
      - 
       return-value: void
       name: setOnLongClickListener(View.OnLongClickListener l)
       description: Register a callback to be invoked when this view is clicked and held.
      - 
       return-value: void
       name: setOnScrollChangeListener(View.OnScrollChangeListener l)
       description: Register a callback to be invoked when the scroll X or Y positions of this view change.
      - 
       return-value: void
       name: setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l)
       description: Set a listener to receive callbacks when the visibility of the system bar changes.
      - 
       return-value: void
       name: setOnTouchListener(View.OnTouchListener l)
       description: Register a callback to be invoked when a touch event is sent to this view.
      - 
       return-value: void
       name: setOutlineAmbientShadowColor(int color)
       description: Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value.
      - 
       return-value: void
       name: setOutlineProvider(ViewOutlineProvider provider)
       description: Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
      - 
       return-value: void
       name: setOutlineSpotShadowColor(int color)
       description: Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value.
      - 
       return-value: void
       name: setOverScrollMode(int overScrollMode)
       description: Set the over-scroll mode for this view.
      - 
       return-value: void
       name: setPadding(int left, int top, int right, int bottom)
       description: Sets the padding.
      - 
       return-value: void
       name: setPaddingRelative(int start, int top, int end, int bottom)
       description: Sets the relative padding.
      - 
       return-value: void
       name: setPivotX(float pivotX)
       description: Sets the x location of the point around which the view is rotated and scaled.
      - 
       return-value: void
       name: setPivotY(float pivotY)
       description: Sets the y location of the point around which the view is rotated and scaled.
      - 
       return-value: void
       name: setPointerIcon(PointerIcon pointerIcon)
       description: Set the pointer icon for the current view.
      - 
       return-value: void
       name: setPressed(boolean pressed)
       description: Sets the pressed state for this view.
      - 
       return-value: final void
       name: setRevealOnFocusHint(boolean revealOnFocus)
       description: Sets this view's preference for reveal behavior when it gains focus.
      - 
       return-value: final void
       name: setRight(int right)
       description: Sets the right position of this view relative to its parent.
      - 
       return-value: void
       name: setRotation(float rotation)
       description: Sets the degrees that the view is rotated around the pivot point.
      - 
       return-value: void
       name: setRotationX(float rotationX)
       description: Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
      - 
       return-value: void
       name: setRotationY(float rotationY)
       description: Sets the degrees that the view is rotated around the vertical axis through the pivot point.
      - 
       return-value: void
       name: setSaveEnabled(boolean enabled)
       description: Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called).
      - 
       return-value: void
       name: setSaveFromParentEnabled(boolean enabled)
       description: Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
      - 
       return-value: void
       name: setScaleX(float scaleX)
       description: Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: void
       name: setScaleY(float scaleY)
       description: Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: void
       name: setScreenReaderFocusable(boolean screenReaderFocusable)
       description: When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit.
      - 
       return-value: void
       name: setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade)
       description: Define the delay before scrollbars fade.
      - 
       return-value: void
       name: setScrollBarFadeDuration(int scrollBarFadeDuration)
       description: Define the scrollbar fade duration.
      - 
       return-value: void
       name: setScrollBarSize(int scrollBarSize)
       description: Define the scrollbar size.
      - 
       return-value: void
       name: setScrollBarStyle(int style)
       description: 
      - 
       return-value: void
       name: setScrollContainer(boolean isScrollContainer)
       description: Change whether this view is one of the set of scrollable containers in its window.
      - 
       return-value: void
       name: setScrollIndicators(int indicators, int mask)
       description: Sets the state of the scroll indicators specified by the mask.
      - 
       return-value: void
       name: setScrollIndicators(int indicators)
       description: Sets the state of all scroll indicators.
      - 
       return-value: void
       name: setScrollX(int value)
       description: Set the horizontal scrolled position of your view.
      - 
       return-value: void
       name: setScrollY(int value)
       description: Set the vertical scrolled position of your view.
      - 
       return-value: void
       name: setScrollbarFadingEnabled(boolean fadeScrollbars)
       description: Define whether scrollbars will fade when the view is not scrolling.
      - 
       return-value: void
       name: setSelected(boolean selected)
       description: Changes the selection state of this view.
      - 
       return-value: void
       name: setSoundEffectsEnabled(boolean soundEffectsEnabled)
       description: Set whether this view should have sound effects enabled for events such as clicking and touching.
      - 
       return-value: void
       name: setStateListAnimator(StateListAnimator stateListAnimator)
       description: Attaches the provided StateListAnimator to this View.
      - 
       return-value: void
       name: setSystemUiVisibility(int visibility)
       description: Request that the visibility of the status bar or other screen/window decorations be changed.
      - 
       return-value: void
       name: setTag(int key, Object tag)
       description: Sets a tag associated with this view and a key.
      - 
       return-value: void
       name: setTag(Object tag)
       description: Sets the tag associated with this view.
      - 
       return-value: void
       name: setTextAlignment(int textAlignment)
       description: Set the text alignment.
      - 
       return-value: void
       name: setTextDirection(int textDirection)
       description: Set the text direction.
      - 
       return-value: void
       name: setTooltipText(CharSequence tooltipText)
       description: Sets the tooltip text which will be displayed in a small popup next to the view.
      - 
       return-value: final void
       name: setTop(int top)
       description: Sets the top position of this view relative to its parent.
      - 
       return-value: void
       name: setTouchDelegate(TouchDelegate delegate)
       description: Sets the TouchDelegate for this View.
      - 
       return-value: final void
       name: setTransitionName(String transitionName)
       description: Sets the name of the View to be used to identify Views in Transitions.
      - 
       return-value: void
       name: setTranslationX(float translationX)
       description: Sets the horizontal location of this view relative to its left position.
      - 
       return-value: void
       name: setTranslationY(float translationY)
       description: Sets the vertical location of this view relative to its top position.
      - 
       return-value: void
       name: setTranslationZ(float translationZ)
       description: Sets the depth location of this view relative to its elevation.
      - 
       return-value: void
       name: setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled)
       description: 
      - 
       return-value: void
       name: setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled)
       description: 
      - 
       return-value: void
       name: setVerticalScrollbarPosition(int position)
       description: Set the position of the vertical scroll bar.
      - 
       return-value: void
       name: setVisibility(int visibility)
       description: Set the visibility state of this view.
      - 
       return-value: void
       name: setWillNotCacheDrawing(boolean willNotCacheDrawing)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setWillNotDraw(boolean willNotDraw)
       description: If this view doesn't do any drawing on its own, set this flag to allow further optimizations.
      - 
       return-value: void
       name: setX(float x)
       description: Sets the visual x position of this view, in pixels.
      - 
       return-value: void
       name: setY(float y)
       description: Sets the visual y position of this view, in pixels.
      - 
       return-value: void
       name: setZ(float z)
       description: Sets the visual z position of this view, in pixels.
      - 
       return-value: boolean
       name: showContextMenu()
       description: Shows the context menu for this view.
      - 
       return-value: boolean
       name: showContextMenu(float x, float y)
       description: Shows the context menu for this view anchored to the specified view-relative coordinate.
      - 
       return-value: ActionMode
       name: startActionMode(ActionMode.Callback callback, int type)
       description: Start an action mode with the given type.
      - 
       return-value: ActionMode
       name: startActionMode(ActionMode.Callback callback)
       description: Start an action mode with the default type ActionMode.TYPE_PRIMARY.
      - 
       return-value: void
       name: startAnimation(Animation animation)
       description: Start the specified animation now.
      - 
       return-value: final boolean
       name: startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)
       description: This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions.
      - 
       return-value: final boolean
       name: startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)
       description: Starts a drag and drop operation.
      - 
       return-value: boolean
       name: startNestedScroll(int axes)
       description: Begin a nestable scroll operation along the given axes.
      - 
       return-value: void
       name: stopNestedScroll()
       description: Stop a nested scroll in progress.
      - 
       return-value: String
       name: toString()
       description: Returns a string representation of the object.
      - 
       return-value: void
       name: unscheduleDrawable(Drawable who, Runnable what)
       description: Cancels a scheduled action on a drawable.
      - 
       return-value: void
       name: unscheduleDrawable(Drawable who)
       description: Unschedule any events associated with the given Drawable.
      - 
       return-value: final void
       name: updateDragShadow(View.DragShadowBuilder shadowBuilder)
       description: Updates the drag shadow for the ongoing drag and drop operation.
      - 
       return-value: boolean
       name: verifyDrawable(Drawable who)
       description: If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.
      - 
       return-value: boolean
       name: willNotCacheDrawing()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: boolean
       name: willNotDraw()
       description: Returns whether or not this View draws on its own.
  name: java.lang.Object
     method: 
      - 
       return-value: Object
       name: clone()
       description: Creates and returns a copy of this object.
      - 
       return-value: boolean
       name: equals(Object obj)
       description: Indicates whether some other object is "equal to" this one.
      - 
       return-value: void
       name: finalize()
       description: Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
      - 
       return-value: final Class<?>
       name: getClass()
       description: Returns the runtime class of this Object.
      - 
       return-value: int
       name: hashCode()
       description: Returns a hash code value for the object.
      - 
       return-value: final void
       name: notify()
       description: Wakes up a single thread that is waiting on this object's monitor.
      - 
       return-value: final void
       name: notifyAll()
       description: Wakes up all threads that are waiting on this object's monitor.
      - 
       return-value: String
       name: toString()
       description: Returns a string representation of the object.
      - 
       return-value: final void
       name: wait(long millis, int nanos)
       description: Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.
      - 
       return-value: final void
       name: wait(long millis)
       description: Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.
      - 
       return-value: final void
       name: wait()
       description: Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
  name: android.view.ViewTreeObserver.OnPreDrawListener
     method: 
       return-value: abstract boolean
       name: onPreDraw()
       description: Callback method to be invoked when the view tree is about to be drawn.
  name: android.graphics.drawable.Drawable.Callback
     method: 
      - 
       return-value: abstract void
       name: invalidateDrawable(Drawable who)
       description: Called when the drawable needs to be redrawn.
      - 
       return-value: abstract void
       name: scheduleDrawable(Drawable who, Runnable what, long when)
       description: A Drawable can call this to schedule the next frame of its animation.
      - 
       return-value: abstract void
       name: unscheduleDrawable(Drawable who, Runnable what)
       description: A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long).
  name: android.view.KeyEvent.Callback
     method: 
      - 
       return-value: abstract boolean
       name: onKeyDown(int keyCode, KeyEvent event)
       description: Called when a key down event has occurred.
      - 
       return-value: abstract boolean
       name: onKeyLongPress(int keyCode, KeyEvent event)
       description: Called when a long press has occurred.
      - 
       return-value: abstract boolean
       name: onKeyMultiple(int keyCode, int count, KeyEvent event)
       description: Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession.
      - 
       return-value: abstract boolean
       name: onKeyUp(int keyCode, KeyEvent event)
       description: Called when a key up event has occurred.
  name: android.view.accessibility.AccessibilityEventSource
     method: 
      - 
       return-value: abstract void
       name: sendAccessibilityEvent(int eventType)
       description: Handles the request for sending an AccessibilityEvent given the event type.
      - 
       return-value: abstract void
       name: sendAccessibilityEventUnchecked(AccessibilityEvent event)
       description: Handles the request for sending an AccessibilityEvent.
 public_constructors: 
  method: 
   - 
    name: TextClock(Context context)
    description: Creates a new clock using the default patterns for the current locale.
   - 
    name: TextClock(Context context, AttributeSet attrs)
    description: Creates a new clock inflated from XML.
   - 
    name: TextClock(Context context, AttributeSet attrs, int defStyleAttr)
    description: Creates a new clock inflated from XML.
   - 
    name: TextClock(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)
 public_methods: 
  method: 
   - 
    return-value: CharSequence
    name: getFormat12Hour()
    description: Returns the formatting pattern used to display the date and/or time in 12-hour mode.
   - 
    return-value: CharSequence
    name: getFormat24Hour()
    description: Returns the formatting pattern used to display the date and/or time in 24-hour mode.
   - 
    return-value: String
    name: getTimeZone()
    description: Indicates which time zone is currently used by this view.
   - 
    return-value: boolean
    name: is24HourModeEnabled()
    description: Indicates whether the system is currently using the 24-hour mode.
   - 
    return-value: void
    name: onVisibilityAggregated(boolean isVisible)
    description: Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to.
   - 
    return-value: void
    name: setFormat12Hour(CharSequence format)
    description: 
   - 
    return-value: void
    name: setFormat24Hour(CharSequence format)
    description: 
   - 
    return-value: void
    name: setTimeZone(String timeZone)
    description: Sets the specified time zone to use in this clock.
 api-section: 
  api: 
   - 
    name: DEFAULT_FORMAT_12_HOUR
    api_level: API level 17
    api_signature: public static final CharSequence DEFAULT_FORMAT_12_HOUR
    description: 
   - 
    name: DEFAULT_FORMAT_24_HOUR
    api_level: API level 17
    api_signature: public static final CharSequence DEFAULT_FORMAT_24_HOUR
    description: 
   - 
    name: TextClock
    api_level: API level 17
    api_signature: public TextClock (Context context)
    description: Creates a new clock using the default patterns for the current locale.
     parameters: 
      parameter: 
       - 
        name: context
        description: Context: The Context the view is running in, through which it can access the current theme, resources, etc.
   - 
    name: TextClock
    api_level: API level 17
    api_signature: public TextClock (Context context, 
                AttributeSet attrs)
    description: Creates a new clock inflated from XML. This object's properties are intialized from the attributes specified in XML. This constructor uses a default style of 0, so the only attribute values applied are those in the Context's Theme and the given AttributeSet.
     parameters: 
      parameter: 
       - 
        name: context
        description: Context: The Context the view is running in, through which it can access the current theme, resources, etc.
       - 
        name: attrs
        description: AttributeSet: The attributes of the XML tag that is inflating the view
   - 
    name: TextClock
    api_level: API level 17
    api_signature: public TextClock (Context context, 
                AttributeSet attrs, 
                int defStyleAttr)
    description: Creates a new clock inflated from XML. This object's properties are intialized from the attributes specified in XML.
     parameters: 
      parameter: 
       - 
        name: context
        description: Context: The Context the view is running in, through which it can access the current theme, resources, etc.
       - 
        name: attrs
        description: AttributeSet: The attributes of the XML tag that is inflating the view
       - 
        name: defStyleAttr
        description: int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults.
   - 
    name: TextClock
    api_level: API level 21
    api_signature: public TextClock (Context context, 
                AttributeSet attrs, 
                int defStyleAttr, 
                int defStyleRes)
    description: 
     parameters: 
      parameter: 
       - 
        name: context
        description: Context
       - 
        name: attrs
        description: AttributeSet
       - 
        name: defStyleAttr
        description: int
       - 
        name: defStyleRes
        description: int
   - 
    name: getFormat12Hour
    api_level: API level 17
    api_signature: public CharSequence getFormat12Hour ()
    description: Returns the formatting pattern used to display the date and/or time in 12-hour mode. The formatting pattern syntax is described in DateFormat.
     parameters: 
      parameter: 
       - 
        name: CharSequence
        description: A CharSequence or null.
   - 
    name: getFormat24Hour
    api_level: API level 17
    api_signature: public CharSequence getFormat24Hour ()
    description: Returns the formatting pattern used to display the date and/or time in 24-hour mode. The formatting pattern syntax is described in DateFormat.
     parameters: 
      parameter: 
       - 
        name: CharSequence
        description: A CharSequence or null.
   - 
    name: getTimeZone
    api_level: API level 17
    api_signature: public String getTimeZone ()
    description: Indicates which time zone is currently used by this view.
     parameters: 
      parameter: 
       - 
        name: String
        description: The ID of the current time zone or null if the default time zone, as set by the user, must be used
   - 
    name: is24HourModeEnabled
    api_level: API level 17
    api_signature: public boolean is24HourModeEnabled ()
    description: Indicates whether the system is currently using the 24-hour mode. When the system is in 24-hour mode, this view will use the pattern returned by getFormat24Hour(). In 12-hour mode, the pattern returned by getFormat12Hour() is used instead. If either one of the formats is null, the other format is used. If both formats are null, the default formats for the current locale are used.
     parameters: 
      parameter: 
       - 
        name: boolean
        description: true if time should be displayed in 24-hour format, false if it should be displayed in 12-hour format.
   - 
    name: onVisibilityAggregated
    api_level: API level 24
    api_signature: public void onVisibilityAggregated (boolean isVisible)
    description: Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to.
     parameters: 
      parameter: 
       - 
        name: isVisible
        description: boolean: true if this view and all of its ancestors are View.VISIBLE and this view's window is also visible
   - 
    name: setFormat12Hour
    api_level: API level 17
    api_signature: public void setFormat12Hour (CharSequence format)
    description: 
     parameters: 
      parameter: 
       - 
        name: format
        description: CharSequence: A date/time formatting pattern as described in DateFormat
   - 
    name: setFormat24Hour
    api_level: API level 17
    api_signature: public void setFormat24Hour (CharSequence format)
    description: 
     parameters: 
      parameter: 
       - 
        name: format
        description: CharSequence: A date/time formatting pattern as described in DateFormat
   - 
    name: setTimeZone
    api_level: API level 17
    api_signature: public void setTimeZone (String timeZone)
    description: Sets the specified time zone to use in this clock. When the time zone is set through this method, system time zone changes (when the user sets the time zone in settings for instance) will be ignored.
     parameters: 
      parameter: 
       - 
        name: timeZone
        description: String: The desired time zone's ID as specified in TimeZone or null to user the time zone specified by the user (system time zone)
   - 
    name: onAttachedToWindow
    api_level: API level 17
    api_signature: protected void onAttachedToWindow ()
    description: This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before onDraw(android.graphics.Canvas), however it may be called any time before the first onDraw -- including before or after onMeasure(int, int).
   - 
    name: onDetachedFromWindow
    api_level: API level 17
    api_signature: protected void onDetachedFromWindow ()
    description: This is called when the view is detached from a window. At this point it no longer has a surface for drawing.