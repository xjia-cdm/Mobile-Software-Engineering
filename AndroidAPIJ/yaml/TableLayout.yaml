api:
 title: TableLayout
 api-signature: public class TableLayout extends LinearLayout
 inheritance: java.lang.Object ↳ android.view.View ↳ android.view.ViewGroup ↳ android.widget.LinearLayout ↳ android.widget.TableLayout
 subclasses-direct-summary: 
 subclasses-indirect-summary: 
 inherited_xml_attributes: 
  class: 
   - 
    name: android.widget.LinearLayout
     class: 
      - 
       attirbute: 
        name: android:baselineAligned
      - 
       attirbute: 
        name: android:baselineAlignedChildIndex
      - 
       attirbute: 
        name: android:divider
      - 
       attirbute: 
        name: android:gravity
      - 
       attirbute: 
        name: android:measureWithLargestChild
      - 
       attirbute: 
        name: android:orientation
      - 
       attirbute: 
        name: android:weightSum
   - 
    name: android.view.ViewGroup
     class: 
      - 
       attirbute: 
        name: android:addStatesFromChildren
      - 
       attirbute: 
        name: android:alwaysDrawnWithCache
      - 
       attirbute: 
        name: android:animateLayoutChanges
      - 
       attirbute: 
        name: android:animationCache
      - 
       attirbute: 
        name: android:clipChildren
      - 
       attirbute: 
        name: android:clipToPadding
      - 
       attirbute: 
        name: android:descendantFocusability
      - 
       attirbute: 
        name: android:layoutAnimation
      - 
       attirbute: 
        name: android:layoutMode
      - 
       attirbute: 
        name: android:persistentDrawingCache
      - 
       attirbute: 
        name: android:splitMotionEvents
   - 
    name: android.view.View
     class: 
      - 
       attirbute: 
        name: android:accessibilityHeading
      - 
       attirbute: 
        name: android:accessibilityLiveRegion
      - 
       attirbute: 
        name: android:accessibilityTraversalAfter
      - 
       attirbute: 
        name: android:accessibilityTraversalBefore
      - 
       attirbute: 
        name: android:alpha
      - 
       attirbute: 
        name: android:autofillHints
      - 
       attirbute: 
        name: android:autofilledHighlight
      - 
       attirbute: 
        name: android:background
      - 
       attirbute: 
        name: android:backgroundTint
      - 
       attirbute: 
        name: android:backgroundTintMode
      - 
       attirbute: 
        name: android:clickable
      - 
       attirbute: 
        name: android:contentDescription
      - 
       attirbute: 
        name: android:contextClickable
      - 
       attirbute: 
        name: android:defaultFocusHighlightEnabled
      - 
       attirbute: 
        name: android:drawingCacheQuality
      - 
       attirbute: 
        name: android:duplicateParentState
      - 
       attirbute: 
        name: android:elevation
      - 
       attirbute: 
        name: android:fadeScrollbars
      - 
       attirbute: 
        name: android:fadingEdgeLength
      - 
       attirbute: 
        name: android:filterTouchesWhenObscured
      - 
       attirbute: 
        name: android:fitsSystemWindows
      - 
       attirbute: 
        name: android:focusable
      - 
       attirbute: 
        name: android:focusableInTouchMode
      - 
       attirbute: 
        name: android:focusedByDefault
      - 
       attirbute: 
        name: android:forceHasOverlappingRendering
      - 
       attirbute: 
        name: android:foreground
      - 
       attirbute: 
        name: android:foregroundGravity
      - 
       attirbute: 
        name: android:foregroundTint
      - 
       attirbute: 
        name: android:foregroundTintMode
      - 
       attirbute: 
        name: android:hapticFeedbackEnabled
      - 
       attirbute: 
        name: android:id
        description: Supply an identifier name for this view, to later retrieve it with View.findViewById() or Activity.findViewById().
      - 
       attirbute: 
        name: android:importantForAccessibility
      - 
       attirbute: 
        name: android:importantForAutofill
      - 
       attirbute: 
        name: android:isScrollContainer
      - 
       attirbute: 
        name: android:keepScreenOn
      - 
       attirbute: 
        name: android:keyboardNavigationCluster
      - 
       attirbute: 
        name: android:layerType
      - 
       attirbute: 
        name: android:layoutDirection
      - 
       attirbute: 
        name: android:longClickable
      - 
       attirbute: 
        name: android:minHeight
      - 
       attirbute: 
        name: android:minWidth
      - 
       attirbute: 
        name: android:nextClusterForward
      - 
       attirbute: 
        name: android:nextFocusDown
        description: Defines the next view to give focus to when the next focus is View.FOCUS_DOWN If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusForward
        description: Defines the next view to give focus to when the next focus is View.FOCUS_FORWARD If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusLeft
      - 
       attirbute: 
        name: android:nextFocusRight
        description: Defines the next view to give focus to when the next focus is View.FOCUS_RIGHT If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:nextFocusUp
        description: Defines the next view to give focus to when the next focus is View.FOCUS_UP If the reference refers to a view that does not exist or is part of a hierarchy that is invisible, a RuntimeException will result when the reference is accessed.
      - 
       attirbute: 
        name: android:onClick
      - 
       attirbute: 
        name: android:outlineAmbientShadowColor
      - 
       attirbute: 
        name: android:outlineSpotShadowColor
      - 
       attirbute: 
        name: android:padding
      - 
       attirbute: 
        name: android:paddingBottom
      - 
       attirbute: 
        name: android:paddingEnd
      - 
       attirbute: 
        name: android:paddingHorizontal
      - 
       attirbute: 
        name: android:paddingLeft
      - 
       attirbute: 
        name: android:paddingRight
      - 
       attirbute: 
        name: android:paddingStart
      - 
       attirbute: 
        name: android:paddingTop
      - 
       attirbute: 
        name: android:paddingVertical
      - 
       attirbute: 
        name: android:requiresFadingEdge
      - 
       attirbute: 
        name: android:rotation
      - 
       attirbute: 
        name: android:rotationX
      - 
       attirbute: 
        name: android:rotationY
      - 
       attirbute: 
        name: android:saveEnabled
      - 
       attirbute: 
        name: android:scaleX
      - 
       attirbute: 
        name: android:scaleY
      - 
       attirbute: 
        name: android:scrollIndicators
      - 
       attirbute: 
        name: android:scrollX
      - 
       attirbute: 
        name: android:scrollY
      - 
       attirbute: 
        name: android:scrollbarAlwaysDrawHorizontalTrack
      - 
       attirbute: 
        name: android:scrollbarAlwaysDrawVerticalTrack
      - 
       attirbute: 
        name: android:scrollbarDefaultDelayBeforeFade
      - 
       attirbute: 
        name: android:scrollbarFadeDuration
      - 
       attirbute: 
        name: android:scrollbarSize
      - 
       attirbute: 
        name: android:scrollbarStyle
      - 
       attirbute: 
        name: android:scrollbarThumbHorizontal
      - 
       attirbute: 
        name: android:scrollbarThumbVertical
      - 
       attirbute: 
        name: android:scrollbarTrackHorizontal
      - 
       attirbute: 
        name: android:scrollbarTrackVertical
      - 
       attirbute: 
        name: android:scrollbars
      - 
       attirbute: 
        name: android:soundEffectsEnabled
      - 
       attirbute: 
        name: android:stateListAnimator
      - 
       attirbute: 
        name: android:tag
        description: Supply a tag for this view containing a String, to be retrieved later with View.getTag() or searched for with View.findViewWithTag().
      - 
       attirbute: 
        name: android:textAlignment
      - 
       attirbute: 
        name: android:textDirection
      - 
       attirbute: 
        name: android:theme
      - 
       attirbute: 
        name: android:tooltipText
      - 
       attirbute: 
        name: android:transformPivotX
      - 
       attirbute: 
        name: android:transformPivotY
      - 
       attirbute: 
        name: android:transitionName
      - 
       attirbute: 
        name: android:translationX
      - 
       attirbute: 
        name: android:translationY
      - 
       attirbute: 
        name: android:translationZ
      - 
       attirbute: 
        name: android:visibility
 inherited_constants: 
  class: 
   - 
    name: android.widget.LinearLayout
     conctant: 
      - 
       type: int
       name: HORIZONTAL
       description:
      - 
       type: int
       name: SHOW_DIVIDER_BEGINNING
       description:Show a divider at the beginning of the group.
      - 
       type: int
       name: SHOW_DIVIDER_END
       description:Show a divider at the end of the group.
      - 
       type: int
       name: SHOW_DIVIDER_MIDDLE
       description:Show dividers between each item in the group.
      - 
       type: int
       name: SHOW_DIVIDER_NONE
       description:Don't show any dividers.
      - 
       type: int
       name: VERTICAL
       description:
   - 
    name: android.view.ViewGroup
     conctant: 
      - 
       type: int
       name: CLIP_TO_PADDING_MASK
       description:We clip to padding when FLAG_CLIP_TO_PADDING and FLAG_PADDING_NOT_NULL are set at the same time.
      - 
       type: int
       name: FOCUS_AFTER_DESCENDANTS
       description:This view will get focus only if none of its descendants want it.
      - 
       type: int
       name: FOCUS_BEFORE_DESCENDANTS
       description:This view will get focus before any of its descendants.
      - 
       type: int
       name: FOCUS_BLOCK_DESCENDANTS
       description:This view will block any of its descendants from getting focus, even if they are focusable.
      - 
       type: int
       name: LAYOUT_MODE_CLIP_BOUNDS
       description:This constant is a layoutMode.
      - 
       type: int
       name: LAYOUT_MODE_OPTICAL_BOUNDS
       description:This constant is a layoutMode.
      - 
       type: int
       name: PERSISTENT_ALL_CACHES
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: PERSISTENT_ANIMATION_CACHE
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: PERSISTENT_NO_CACHE
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: PERSISTENT_SCROLLING_CACHE
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
   - 
    name: android.view.View
     conctant: 
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_ASSERTIVE
       description:Live region mode specifying that accessibility services should interrupt ongoing speech to immediately announce changes to this view.
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_NONE
       description:Live region mode specifying that accessibility services should not automatically announce changes to this view.
      - 
       type: int
       name: ACCESSIBILITY_LIVE_REGION_POLITE
       description:Live region mode specifying that accessibility services should announce changes to this view.
      - 
       type: int
       name: AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS
       description:Flag requesting you to add views that are marked as not important for autofill (see setImportantForAutofill(int)) to a ViewStructure.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE
       description:Hint indicating that this view can be autofilled with a credit card expiration date.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY
       description:Hint indicating that this view can be autofilled with a credit card expiration day.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH
       description:Hint indicating that this view can be autofilled with a credit card expiration month.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR
       description:Hint indicating that this view can be autofilled with a credit card expiration year.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_NUMBER
       description:Hint indicating that this view can be autofilled with a credit card number.
      - 
       type: String
       name: AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE
       description:Hint indicating that this view can be autofilled with a credit card security code.
      - 
       type: String
       name: AUTOFILL_HINT_EMAIL_ADDRESS
       description:Hint indicating that this view can be autofilled with an email address.
      - 
       type: String
       name: AUTOFILL_HINT_NAME
       description:Hint indicating that this view can be autofilled with a user's real name.
      - 
       type: String
       name: AUTOFILL_HINT_PASSWORD
       description:Hint indicating that this view can be autofilled with a password.
      - 
       type: String
       name: AUTOFILL_HINT_PHONE
       description:Hint indicating that this view can be autofilled with a phone number.
      - 
       type: String
       name: AUTOFILL_HINT_POSTAL_ADDRESS
       description:Hint indicating that this view can be autofilled with a postal address.
      - 
       type: String
       name: AUTOFILL_HINT_POSTAL_CODE
       description:Hint indicating that this view can be autofilled with a postal code.
      - 
       type: String
       name: AUTOFILL_HINT_USERNAME
       description:Hint indicating that this view can be autofilled with a username.
      - 
       type: int
       name: AUTOFILL_TYPE_DATE
       description:Autofill type for a field that contains a date, which is represented by a long representing the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT (see Date.getTime().
      - 
       type: int
       name: AUTOFILL_TYPE_LIST
       description:Autofill type for a selection list field, which is filled by an int representing the element index inside the list (starting at 0).
      - 
       type: int
       name: AUTOFILL_TYPE_NONE
       description:Autofill type for views that cannot be autofilled.
      - 
       type: int
       name: AUTOFILL_TYPE_TEXT
       description:Autofill type for a text field, which is filled by a CharSequence.
      - 
       type: int
       name: AUTOFILL_TYPE_TOGGLE
       description:Autofill type for a togglable field, which is filled by a boolean.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL
       description:Flag indicating that a drag can cross window boundaries.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION
       description:When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant can be persisted across device reboots until explicitly revoked with Context.revokeUriPermission(Uri, int) Context.revokeUriPermission}.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION
       description:When this flag is used with DRAG_FLAG_GLOBAL_URI_READ and/or DRAG_FLAG_GLOBAL_URI_WRITE, the URI permission grant applies to any URI that is a prefix match against the original granted URI.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_URI_READ
       description:When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request read access to the content URI(s) contained in the ClipData object.
      - 
       type: int
       name: DRAG_FLAG_GLOBAL_URI_WRITE
       description:When this flag is used with DRAG_FLAG_GLOBAL, the drag recipient will be able to request write access to the content URI(s) contained in the ClipData object.
      - 
       type: int
       name: DRAG_FLAG_OPAQUE
       description:Flag indicating that the drag shadow will be opaque.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_AUTO
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_HIGH
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: DRAWING_CACHE_QUALITY_LOW
       description:This constant was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       type: int
       name: FIND_VIEWS_WITH_CONTENT_DESCRIPTION
       description:Find find views that contain the specified content description.
      - 
       type: int
       name: FIND_VIEWS_WITH_TEXT
       description:Find views that render the specified text.
      - 
       type: int
       name: FOCUSABLE
       description:This view wants keystrokes.
      - 
       type: int
       name: FOCUSABLES_ALL
       description:View flag indicating whether addFocusables(ArrayList, int, int) should add all focusable Views regardless if they are focusable in touch mode.
      - 
       type: int
       name: FOCUSABLES_TOUCH_MODE
       description:View flag indicating whether addFocusables(ArrayList, int, int) should add only Views focusable in touch mode.
      - 
       type: int
       name: FOCUSABLE_AUTO
       description:This view determines focusability automatically.
      - 
       type: int
       name: FOCUS_BACKWARD
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_DOWN
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_FORWARD
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_LEFT
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_RIGHT
       description:Use with focusSearch(int).
      - 
       type: int
       name: FOCUS_UP
       description:Use with focusSearch(int).
      - 
       type: int
       name: GONE
       description:This view is invisible, and it doesn't take any space for layout purposes.
      - 
       type: int
       name: HAPTIC_FEEDBACK_ENABLED
       description:View flag indicating whether this view should have haptic feedback enabled for events such as long presses.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_AUTO
       description:Automatically determine whether a view is important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_NO
       description:The view is not important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS
       description:The view is not important for accessibility, nor are any of its descendant views.
      - 
       type: int
       name: IMPORTANT_FOR_ACCESSIBILITY_YES
       description:The view is important for accessibility.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_AUTO
       description:Automatically determine whether a view is important for autofill.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_NO
       description:The view is not important for autofill, but its children (if any) will be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS
       description:The view is not important for autofill, and its children (if any) will not be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_YES
       description:The view is important for autofill, and its children (if any) will be traversed.
      - 
       type: int
       name: IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS
       description:The view is important for autofill, but its children (if any) will not be traversed.
      - 
       type: int
       name: INVISIBLE
       description:This view is invisible, but it still takes up space for layout purposes.
      - 
       type: int
       name: KEEP_SCREEN_ON
       description:View flag indicating that the screen should remain on while the window containing this view is visible to the user.
      - 
       type: int
       name: LAYER_TYPE_HARDWARE
       description:
      - 
       type: int
       name: LAYER_TYPE_NONE
       description:Indicates that the view does not have a layer.
      - 
       type: int
       name: LAYER_TYPE_SOFTWARE
       description:
      - 
       type: int
       name: LAYOUT_DIRECTION_INHERIT
       description:Horizontal layout direction of this view is inherited from its parent.
      - 
       type: int
       name: LAYOUT_DIRECTION_LOCALE
       description:Horizontal layout direction of this view is from deduced from the default language script for the locale.
      - 
       type: int
       name: LAYOUT_DIRECTION_LTR
       description:Horizontal layout direction of this view is from Left to Right.
      - 
       type: int
       name: LAYOUT_DIRECTION_RTL
       description:Horizontal layout direction of this view is from Right to Left.
      - 
       type: int
       name: MEASURED_HEIGHT_STATE_SHIFT
       description:Bit shift of MEASURED_STATE_MASK to get to the height bits for functions that combine both width and height into a single int, such as getMeasuredState() and the childState argument of resolveSizeAndState(int, int, int).
      - 
       type: int
       name: MEASURED_SIZE_MASK
       description:Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the actual measured size.
      - 
       type: int
       name: MEASURED_STATE_MASK
       description:Bits of getMeasuredWidthAndState() and getMeasuredWidthAndState() that provide the additional state bits.
      - 
       type: int
       name: MEASURED_STATE_TOO_SMALL
       description:Bit of getMeasuredWidthAndState() and getMeasuredWidthAndState() that indicates the measured size is smaller that the space the view would like to have.
      - 
       type: int
       name: NOT_FOCUSABLE
       description:This view does not want keystrokes.
      - 
       type: int
       name: NO_ID
       description:Used to mark a View that has no ID.
      - 
       type: int
       name: OVER_SCROLL_ALWAYS
       description:Always allow a user to over-scroll this view, provided it is a view that can scroll.
      - 
       type: int
       name: OVER_SCROLL_IF_CONTENT_SCROLLS
       description:Allow a user to over-scroll this view only if the content is large enough to meaningfully scroll, provided it is a view that can scroll.
      - 
       type: int
       name: OVER_SCROLL_NEVER
       description:Never allow a user to over-scroll this view.
      - 
       type: int
       name: SCREEN_STATE_OFF
       description:Indicates that the screen has changed state and is now off.
      - 
       type: int
       name: SCREEN_STATE_ON
       description:Indicates that the screen has changed state and is now on.
      - 
       type: int
       name: SCROLLBARS_INSIDE_INSET
       description:The scrollbar style to display the scrollbars inside the padded area, increasing the padding of the view.
      - 
       type: int
       name: SCROLLBARS_INSIDE_OVERLAY
       description:The scrollbar style to display the scrollbars inside the content area, without increasing the padding.
      - 
       type: int
       name: SCROLLBARS_OUTSIDE_INSET
       description:The scrollbar style to display the scrollbars at the edge of the view, increasing the padding of the view.
      - 
       type: int
       name: SCROLLBARS_OUTSIDE_OVERLAY
       description:The scrollbar style to display the scrollbars at the edge of the view, without increasing the padding.
      - 
       type: int
       name: SCROLLBAR_POSITION_DEFAULT
       description:Position the scroll bar at the default position as determined by the system.
      - 
       type: int
       name: SCROLLBAR_POSITION_LEFT
       description:Position the scroll bar along the left edge.
      - 
       type: int
       name: SCROLLBAR_POSITION_RIGHT
       description:Position the scroll bar along the right edge.
      - 
       type: int
       name: SCROLL_AXIS_HORIZONTAL
       description:Indicates scrolling along the horizontal axis.
      - 
       type: int
       name: SCROLL_AXIS_NONE
       description:Indicates no axis of view scrolling.
      - 
       type: int
       name: SCROLL_AXIS_VERTICAL
       description:Indicates scrolling along the vertical axis.
      - 
       type: int
       name: SCROLL_INDICATOR_BOTTOM
       description:Scroll indicator direction for the bottom edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_END
       description:Scroll indicator direction for the ending edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_LEFT
       description:Scroll indicator direction for the left edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_RIGHT
       description:Scroll indicator direction for the right edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_START
       description:Scroll indicator direction for the starting edge of the view.
      - 
       type: int
       name: SCROLL_INDICATOR_TOP
       description:Scroll indicator direction for the top edge of the view.
      - 
       type: int
       name: SOUND_EFFECTS_ENABLED
       description:View flag indicating whether this view should have sound effects enabled for events such as clicking and touching.
      - 
       type: int
       name: STATUS_BAR_HIDDEN
       description:This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_LOW_PROFILE instead.
      - 
       type: int
       name: STATUS_BAR_VISIBLE
       description:This constant was deprecated in API level 14. Use SYSTEM_UI_FLAG_VISIBLE instead.
      - 
       type: int
       name: SYSTEM_UI_FLAG_FULLSCREEN
       description:Flag for setSystemUiVisibility(int): View has requested to go into the normal fullscreen mode so that its content can take over the screen while still allowing the user to interact with the application.
      - 
       type: int
       name: SYSTEM_UI_FLAG_HIDE_NAVIGATION
       description:Flag for setSystemUiVisibility(int): View has requested that the system navigation be temporarily hidden.
      - 
       type: int
       name: SYSTEM_UI_FLAG_IMMERSIVE
       description:Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.
      - 
       type: int
       name: SYSTEM_UI_FLAG_IMMERSIVE_STICKY
       description:Flag for setSystemUiVisibility(int): View would like to remain interactive when hiding the status bar with SYSTEM_UI_FLAG_FULLSCREEN and/or hiding the navigation bar with SYSTEM_UI_FLAG_HIDE_NAVIGATION.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
       description:Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_FULLSCREEN, even if it currently hasn't.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
       description:Flag for setSystemUiVisibility(int): View would like its window to be laid out as if it has requested SYSTEM_UI_FLAG_HIDE_NAVIGATION, even if it currently hasn't.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LAYOUT_STABLE
       description:Flag for setSystemUiVisibility(int): When using other layout flags, we would like a stable view of the content insets given to fitSystemWindows(Rect).
      - 
       type: int
       name: SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR
       description:Flag for setSystemUiVisibility(int): Requests the navigation bar to draw in a mode that is compatible with light navigation bar backgrounds.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LIGHT_STATUS_BAR
       description:Flag for setSystemUiVisibility(int): Requests the status bar to draw in a mode that is compatible with light status bar backgrounds.
      - 
       type: int
       name: SYSTEM_UI_FLAG_LOW_PROFILE
       description:Flag for setSystemUiVisibility(int): View has requested the system UI to enter an unobtrusive "low profile" mode.
      - 
       type: int
       name: SYSTEM_UI_FLAG_VISIBLE
       description:Special constant for setSystemUiVisibility(int): View has requested the system UI (status bar) to be visible (the default).
      - 
       type: int
       name: SYSTEM_UI_LAYOUT_FLAGS
       description:Flags that can impact the layout in relation to system UI.
      - 
       type: int
       name: TEXT_ALIGNMENT_CENTER
       description:Center the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_GRAVITY
       description:Default for the root view.
      - 
       type: int
       name: TEXT_ALIGNMENT_INHERIT
       description:Default text alignment.
      - 
       type: int
       name: TEXT_ALIGNMENT_TEXT_END
       description:Align to the end of the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_TEXT_START
       description:Align to the start of the paragraph, e.g.
      - 
       type: int
       name: TEXT_ALIGNMENT_VIEW_END
       description:Align to the end of the view, which is ALIGN_RIGHT if the view’s resolved layoutDirection is LTR, and ALIGN_LEFT otherwise.
      - 
       type: int
       name: TEXT_ALIGNMENT_VIEW_START
       description:Align to the start of the view, which is ALIGN_LEFT if the view’s resolved layoutDirection is LTR, and ALIGN_RIGHT otherwise.
      - 
       type: int
       name: TEXT_DIRECTION_ANY_RTL
       description:Text direction is using "any-RTL" algorithm.
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG_LTR
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_FIRST_STRONG_RTL
       description:Text direction is using "first strong algorithm".
      - 
       type: int
       name: TEXT_DIRECTION_INHERIT
       description:Text direction is inherited through ViewGroup
      - 
       type: int
       name: TEXT_DIRECTION_LOCALE
       description:Text direction is coming from the system Locale.
      - 
       type: int
       name: TEXT_DIRECTION_LTR
       description:Text direction is forced to LTR.
      - 
       type: int
       name: TEXT_DIRECTION_RTL
       description:Text direction is forced to RTL.
      - 
       type: String
       name: VIEW_LOG_TAG
       description:The logging tag used by this class with android.util.Log.
      - 
       type: int
       name: VISIBLE
       description:This view is visible.
 inherited_fields: 
  class: 
    name: android.view.View
     field: 
      - 
       type: public static final Property<View, Float>
       name: ALPHA
       description: A Property wrapper around the alpha functionality handled by the setAlpha(float) and getAlpha() methods.
      - 
       type: protected static final int[]
       name: EMPTY_STATE_SET
       description: Indicates the view has no states set.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is enabled, focused and selected.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_STATE_SET
       description: Indicates the view is enabled and has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_SELECTED_STATE_SET
       description: Indicates the view is enabled and selected.
      - 
       type: protected static final int[]
       name: ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: ENABLED_STATE_SET
       description: Indicates the view is enabled.
      - 
       type: protected static final int[]
       name: ENABLED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is enabled and that its window has focus.
      - 
       type: protected static final int[]
       name: FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is focused and selected.
      - 
       type: protected static final int[]
       name: FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: FOCUSED_STATE_SET
       description: Indicates the view is focused.
      - 
       type: protected static final int[]
       name: FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view has the focus and that its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is pressed, enabled, focused and selected.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled and focused.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_SELECTED_STATE_SET
       description: Indicates the view is pressed, enabled and selected.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_STATE_SET
       description: Indicates the view is pressed and enabled.
      - 
       type: protected static final int[]
       name: PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, enabled and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_SELECTED_STATE_SET
       description: Indicates the view is pressed, focused and selected.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, focused, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_STATE_SET
       description: Indicates the view is pressed and focused.
      - 
       type: protected static final int[]
       name: PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, focused and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_SELECTED_STATE_SET
       description: Indicates the view is pressed and selected.
      - 
       type: protected static final int[]
       name: PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed, selected and its window has the focus.
      - 
       type: protected static final int[]
       name: PRESSED_STATE_SET
       description: Indicates the view is pressed.
      - 
       type: protected static final int[]
       name: PRESSED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is pressed and its window has the focus.
      - 
       type: public static final Property<View, Float>
       name: ROTATION
       description: A Property wrapper around the rotation functionality handled by the setRotation(float) and getRotation() methods.
      - 
       type: public static final Property<View, Float>
       name: ROTATION_X
       description: A Property wrapper around the rotationX functionality handled by the setRotationX(float) and getRotationX() methods.
      - 
       type: public static final Property<View, Float>
       name: ROTATION_Y
       description: A Property wrapper around the rotationY functionality handled by the setRotationY(float) and getRotationY() methods.
      - 
       type: public static final Property<View, Float>
       name: SCALE_X
       description: A Property wrapper around the scaleX functionality handled by the setScaleX(float) and getScaleX() methods.
      - 
       type: public static final Property<View, Float>
       name: SCALE_Y
       description: A Property wrapper around the scaleY functionality handled by the setScaleY(float) and getScaleY() methods.
      - 
       type: protected static final int[]
       name: SELECTED_STATE_SET
       description: Indicates the view is selected.
      - 
       type: protected static final int[]
       name: SELECTED_WINDOW_FOCUSED_STATE_SET
       description: Indicates the view is selected and that its window has the focus.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_X
       description: A Property wrapper around the translationX functionality handled by the setTranslationX(float) and getTranslationX() methods.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_Y
       description: A Property wrapper around the translationY functionality handled by the setTranslationY(float) and getTranslationY() methods.
      - 
       type: public static final Property<View, Float>
       name: TRANSLATION_Z
       description: A Property wrapper around the translationZ functionality handled by the setTranslationZ(float) and getTranslationZ() methods.
      - 
       type: protected static final int[]
       name: WINDOW_FOCUSED_STATE_SET
       description: Indicates the view's window has focus.
      - 
       type: public static final Property<View, Float>
       name: X
       description: A Property wrapper around the x functionality handled by the setX(float) and getX() methods.
      - 
       type: public static final Property<View, Float>
       name: Y
       description: A Property wrapper around the y functionality handled by the setY(float) and getY() methods.
      - 
       type: public static final Property<View, Float>
       name: Z
       description: A Property wrapper around the z functionality handled by the setZ(float) and getZ() methods.
 inherited_methods: 
  name: android.widget.LinearLayout
   class: 
     method: 
      - 
       return-value: boolean
       name: checkLayoutParams(ViewGroup.LayoutParams p)
      - 
       return-value: LinearLayout.LayoutParams
       name: generateDefaultLayoutParams()
       description: Returns a set of layout parameters with a width of ViewGroup.LayoutParams.MATCH_PARENT and a height of ViewGroup.LayoutParams.WRAP_CONTENT when the layout's orientation is VERTICAL.
      - 
       return-value: LinearLayout.LayoutParams
       name: generateLayoutParams(ViewGroup.LayoutParams lp)
       description: Returns a safe set of layout parameters based on the supplied layout params.
      - 
       return-value: LinearLayout.LayoutParams
       name: generateLayoutParams(AttributeSet attrs)
       description: Returns a new set of layout parameters based on the supplied attributes set.
      - 
       return-value: CharSequence
       name: getAccessibilityClassName()
       description: Return the class name of this object to be used for accessibility purposes.
      - 
       return-value: int
       name: getBaseline()
       description: 
      - 
       return-value: int
       name: getBaselineAlignedChildIndex()
      - 
       return-value: Drawable
       name: getDividerDrawable()
      - 
       return-value: int
       name: getDividerPadding()
       description: Get the padding size used to inset dividers in pixels
      - 
       return-value: int
       name: getGravity()
       description: Returns the current gravity.
      - 
       return-value: int
       name: getOrientation()
       description: Returns the current orientation.
      - 
       return-value: int
       name: getShowDividers()
      - 
       return-value: float
       name: getWeightSum()
       description: Returns the desired weights sum.
      - 
       return-value: boolean
       name: isBaselineAligned()
       description: 
      - 
       return-value: boolean
       name: isMeasureWithLargestChildEnabled()
       description: When true, all children with a weight will be considered having the minimum size of the largest child.
      - 
       return-value: void
       name: onDraw(Canvas canvas)
       description: Implement this to do your drawing.
      - 
       return-value: void
       name: onLayout(boolean changed, int l, int t, int r, int b)
       description: Called from layout when this view should assign a size and position to each of its children.
      - 
       return-value: void
       name: onMeasure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: void
       name: onRtlPropertiesChanged(int layoutDirection)
       description: Called when any RTL property (layout direction or text direction or text alignment) has been changed.
      - 
       return-value: void
       name: setBaselineAligned(boolean baselineAligned)
       description: 
      - 
       return-value: void
       name: setBaselineAlignedChildIndex(int i)
      - 
       return-value: void
       name: setDividerDrawable(Drawable divider)
       description: Set a drawable to be used as a divider between items.
      - 
       return-value: void
       name: setDividerPadding(int padding)
       description: Set padding displayed on both ends of dividers.
      - 
       return-value: void
       name: setGravity(int gravity)
       description: Describes how the child views are positioned.
      - 
       return-value: void
       name: setHorizontalGravity(int horizontalGravity)
      - 
       return-value: void
       name: setMeasureWithLargestChildEnabled(boolean enabled)
       description: When set to true, all children with a weight will be considered having the minimum size of the largest child.
      - 
       return-value: void
       name: setOrientation(int orientation)
       description: Should the layout be a column or a row.
      - 
       return-value: void
       name: setShowDividers(int showDividers)
       description: Set how dividers should be shown between items in this layout
      - 
       return-value: void
       name: setVerticalGravity(int verticalGravity)
      - 
       return-value: void
       name: setWeightSum(float weightSum)
       description: Defines the desired weights sum.
      - 
       return-value: boolean
       name: shouldDelayChildPressedState()
       description: Return true if the pressed state should be delayed for children or descendants of this ViewGroup.
  name: android.view.ViewGroup
     method: 
      - 
       return-value: void
       name: addChildrenForAccessibility(ArrayList<View> outChildren)
       description: Adds the children of this View relevant for accessibility to the given list as output.
      - 
       return-value: void
       name: addFocusables(ArrayList<View> views, int direction, int focusableMode)
       description: Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
      - 
       return-value: void
       name: addKeyboardNavigationClusters(Collection<View> views, int direction)
       description: Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.
      - 
       return-value: boolean
       name: addStatesFromChildren()
       description: Returns whether this ViewGroup's drawable states also include its children's drawable states.
      - 
       return-value: void
       name: addTouchables(ArrayList<View> views)
       description: Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
      - 
       return-value: void
       name: addView(View child, ViewGroup.LayoutParams params)
       description: Adds a child view with the specified layout parameters.
      - 
       return-value: void
       name: addView(View child, int index)
       description: Adds a child view.
      - 
       return-value: void
       name: addView(View child, int index, ViewGroup.LayoutParams params)
       description: Adds a child view with the specified layout parameters.
      - 
       return-value: void
       name: addView(View child)
       description: 
      - 
       return-value: void
       name: addView(View child, int width, int height)
       description: Adds a child view with this ViewGroup's default layout parameters and the specified width and height.
      - 
       return-value: boolean
       name: addViewInLayout(View child, int index, ViewGroup.LayoutParams params, boolean preventRequestLayout)
       description: Adds a view during layout.
      - 
       return-value: boolean
       name: addViewInLayout(View child, int index, ViewGroup.LayoutParams params)
       description: Adds a view during layout.
      - 
       return-value: void
       name: attachLayoutAnimationParameters(View child, ViewGroup.LayoutParams params, int index, int count)
       description: Subclasses should override this method to set layout animation parameters on the supplied child.
      - 
       return-value: void
       name: attachViewToParent(View child, int index, ViewGroup.LayoutParams params)
       description: Attaches a view to this view group.
      - 
       return-value: void
       name: bringChildToFront(View child)
       description: Change the z order of the child so it's on top of all other children.
      - 
       return-value: boolean
       name: canAnimate()
       description: Indicates whether the view group has the ability to animate its children after the first layout.
      - 
       return-value: boolean
       name: checkLayoutParams(ViewGroup.LayoutParams p)
      - 
       return-value: void
       name: childDrawableStateChanged(View child)
       description: If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children).
      - 
       return-value: void
       name: childHasTransientStateChanged(View child, boolean childHasTransientState)
       description: Called when a child view has changed whether or not it is tracking transient state.
      - 
       return-value: void
       name: cleanupLayoutState(View child)
       description: Prevents the specified child to be laid out during the next layout pass.
      - 
       return-value: void
       name: clearChildFocus(View child)
       description: Called when a child of this parent is giving up focus
      - 
       return-value: void
       name: clearDisappearingChildren()
       description: Removes any pending animations for views that have been removed.
      - 
       return-value: void
       name: clearFocus()
       description: Called when this view wants to give up focus.
      - 
       return-value: void
       name: debug(int depth)
       description: Prints information about this view in the log output, with the tag VIEW_LOG_TAG.
      - 
       return-value: void
       name: detachAllViewsFromParent()
       description: Detaches all views from the parent.
      - 
       return-value: void
       name: detachViewFromParent(int index)
       description: Detaches a view from its parent.
      - 
       return-value: void
       name: detachViewFromParent(View child)
       description: Detaches a view from its parent.
      - 
       return-value: void
       name: detachViewsFromParent(int start, int count)
       description: Detaches a range of views from their parents.
      - 
       return-value: WindowInsets
       name: dispatchApplyWindowInsets(WindowInsets insets)
       description: Request to apply the given window insets to this view or another view in its subtree.
      - 
       return-value: boolean
       name: dispatchCapturedPointerEvent(MotionEvent event)
       description: Pass a captured pointer event down to the focused view.
      - 
       return-value: void
       name: dispatchConfigurationChanged(Configuration newConfig)
       description: Dispatch a notification about a resource configuration change down the view hierarchy.
      - 
       return-value: void
       name: dispatchDisplayHint(int hint)
       description: Dispatch a hint about whether this view is displayed.
      - 
       return-value: boolean
       name: dispatchDragEvent(DragEvent event)
       description: Detects if this View is enabled and has a drag event listener.
      - 
       return-value: void
       name: dispatchDraw(Canvas canvas)
       description: Called by draw to draw the child views.
      - 
       return-value: void
       name: dispatchDrawableHotspotChanged(float x, float y)
       description: Dispatches drawable hotspot changes to child views that meet at least one of the following criteria:
      - 
       return-value: void
       name: dispatchFreezeSelfOnly(SparseArray<Parcelable> container)
       description: Perform dispatching of a View.saveHierarchyState(android.util.SparseArray) freeze()} to only this view, not to its children.
      - 
       return-value: boolean
       name: dispatchGenericFocusedEvent(MotionEvent event)
       description: Dispatch a generic motion event to the currently focused view.
      - 
       return-value: boolean
       name: dispatchGenericPointerEvent(MotionEvent event)
       description: Dispatch a generic motion event to the view under the first pointer.
      - 
       return-value: boolean
       name: dispatchHoverEvent(MotionEvent event)
       description: Dispatch a hover event.
      - 
       return-value: boolean
       name: dispatchKeyEvent(KeyEvent event)
       description: Dispatch a key event to the next view on the focus path.
      - 
       return-value: boolean
       name: dispatchKeyEventPreIme(KeyEvent event)
       description: Dispatch a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: dispatchKeyShortcutEvent(KeyEvent event)
       description: Dispatches a key shortcut event.
      - 
       return-value: void
       name: dispatchPointerCaptureChanged(boolean hasCapture)
      - 
       return-value: void
       name: dispatchProvideAutofillStructure(ViewStructure structure, int flags)
       description: Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request.
      - 
       return-value: void
       name: dispatchProvideStructure(ViewStructure structure)
       description: Dispatch creation of ViewStructure down the hierarchy.
      - 
       return-value: void
       name: dispatchRestoreInstanceState(SparseArray<Parcelable> container)
       description: Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.
      - 
       return-value: void
       name: dispatchSaveInstanceState(SparseArray<Parcelable> container)
       description: Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.
      - 
       return-value: void
       name: dispatchSetActivated(boolean activated)
       description: Dispatch setActivated to all of this View's children.
      - 
       return-value: void
       name: dispatchSetPressed(boolean pressed)
       description: Dispatch setPressed to all of this View's children.
      - 
       return-value: void
       name: dispatchSetSelected(boolean selected)
       description: Dispatch setSelected to all of this View's children.
      - 
       return-value: void
       name: dispatchSystemUiVisibilityChanged(int visible)
       description: Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.
      - 
       return-value: void
       name: dispatchThawSelfOnly(SparseArray<Parcelable> container)
       description: Perform dispatching of a View.restoreHierarchyState(android.util.SparseArray) to only this view, not to its children.
      - 
       return-value: boolean
       name: dispatchTouchEvent(MotionEvent ev)
       description: Pass the touch screen motion event down to the target view, or this view if it is the target.
      - 
       return-value: boolean
       name: dispatchTrackballEvent(MotionEvent event)
       description: Pass a trackball motion event down to the focused view.
      - 
       return-value: boolean
       name: dispatchUnhandledMove(View focused, int direction)
       description: This method is the last chance for the focused view and its ancestors to respond to an arrow key.
      - 
       return-value: void
       name: dispatchVisibilityChanged(View changedView, int visibility)
       description: Dispatch a view visibility change down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowFocusChanged(boolean hasFocus)
       description: Called when the window containing this view gains or loses window focus.
      - 
       return-value: void
       name: dispatchWindowSystemUiVisiblityChanged(int visible)
       description: Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowVisibilityChanged(int visibility)
       description: Dispatch a window visibility change down the view hierarchy.
      - 
       return-value: boolean
       name: drawChild(Canvas canvas, View child, long drawingTime)
       description: Draw one child of this View Group.
      - 
       return-value: void
       name: drawableStateChanged()
       description: This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.
      - 
       return-value: void
       name: endViewTransition(View view)
       description: This method should always be called following an earlier call to startViewTransition(View).
      - 
       return-value: View
       name: findFocus()
       description: Find the view in the hierarchy rooted at this view that currently has focus.
      - 
       return-value: void
       name: findViewsWithText(ArrayList<View> outViews, CharSequence text, int flags)
       description: Finds the Views that contain given text.
      - 
       return-value: View
       name: focusSearch(View focused, int direction)
       description: Find the nearest view in the specified direction that wants to take focus.
      - 
       return-value: void
       name: focusableViewAvailable(View v)
       description: Tells the parent that a new focusable view has become available.
      - 
       return-value: boolean
       name: gatherTransparentRegion(Region region)
       description: This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView.
      - 
       return-value: ViewGroup.LayoutParams
       name: generateDefaultLayoutParams()
       description: Returns a set of default layout parameters.
      - 
       return-value: ViewGroup.LayoutParams
       name: generateLayoutParams(AttributeSet attrs)
       description: Returns a new set of layout parameters based on the supplied attributes set.
      - 
       return-value: ViewGroup.LayoutParams
       name: generateLayoutParams(ViewGroup.LayoutParams p)
       description: Returns a safe set of layout parameters based on the supplied layout params.
      - 
       return-value: CharSequence
       name: getAccessibilityClassName()
       description: Return the class name of this object to be used for accessibility purposes.
      - 
       return-value: View
       name: getChildAt(int index)
       description: Returns the view at the specified position in the group.
      - 
       return-value: int
       name: getChildCount()
       description: Returns the number of children in the group.
      - 
       return-value: int
       name: getChildDrawingOrder(int childCount, int i)
       description: Returns the index of the child to draw for this iteration.
      - 
       return-value: static int
       name: getChildMeasureSpec(int spec, int padding, int childDimension)
       description: Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.
      - 
       return-value: boolean
       name: getChildStaticTransformation(View child, Transformation t)
       description: Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set.
      - 
       return-value: boolean
       name: getChildVisibleRect(View child, Rect r, Point offset)
       description: Compute the visible part of a rectangular region defined in terms of a child view's coordinates.
      - 
       return-value: boolean
       name: getClipChildren()
       description: Returns whether this group's children are clipped to their bounds before drawing.
      - 
       return-value: boolean
       name: getClipToPadding()
       description: Returns whether this ViewGroup will clip its children to its padding, and resize (but not clip) any EdgeEffect to the padded region, if padding is present.
      - 
       return-value: int
       name: getDescendantFocusability()
       description: Gets the descendant focusability of this view group.
      - 
       return-value: View
       name: getFocusedChild()
       description: Returns the focused child of this view, if any.
      - 
       return-value: LayoutAnimationController
       name: getLayoutAnimation()
       description: Returns the layout animation controller used to animate the group's children.
      - 
       return-value: Animation.AnimationListener
       name: getLayoutAnimationListener()
       description: Returns the animation listener to which layout animation events are sent.
      - 
       return-value: int
       name: getLayoutMode()
       description: Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS.
      - 
       return-value: LayoutTransition
       name: getLayoutTransition()
       description: Gets the LayoutTransition object for this ViewGroup.
      - 
       return-value: int
       name: getNestedScrollAxes()
       description: Return the current axes of nested scrolling for this ViewGroup.
      - 
       return-value: ViewGroupOverlay
       name: getOverlay()
       description: Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist.
      - 
       return-value: int
       name: getPersistentDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: boolean
       name: getTouchscreenBlocksFocus()
       description: Check whether this ViewGroup should ignore focus requests for itself and its children.
      - 
       return-value: boolean
       name: hasFocus()
       description: Returns true if this view has or contains focus
      - 
       return-value: boolean
       name: hasTransientState()
       description: Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.
      - 
       return-value: int
       name: indexOfChild(View child)
       description: Returns the position in the group of the specified child view.
      - 
       return-value: final void
       name: invalidateChild(View child, Rect dirty)
       description: This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead to observe updates to draw state in descendants.
      - 
       return-value: ViewParent
       name: invalidateChildInParent(int[] location, Rect dirty)
       description: This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead to observe updates to draw state in descendants.
      - 
       return-value: boolean
       name: isAlwaysDrawnWithCacheEnabled()
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Child views may no longer have their caching behavior disabled by parents.
      - 
       return-value: boolean
       name: isAnimationCacheEnabled()
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Caching behavior of children may be controlled through View.setLayerType(int, Paint).
      - 
       return-value: boolean
       name: isChildrenDrawingOrderEnabled()
       description: Indicates whether the ViewGroup is drawing its children in the order defined by getChildDrawingOrder(int, int).
      - 
       return-value: boolean
       name: isChildrenDrawnWithCacheEnabled()
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Child views may no longer be forced to cache their rendering state by their parents. Use View.setLayerType(int, Paint) on individual Views instead.
      - 
       return-value: boolean
       name: isMotionEventSplittingEnabled()
       description: Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children.
      - 
       return-value: boolean
       name: isTransitionGroup()
       description: Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.
      - 
       return-value: void
       name: jumpDrawablesToCurrentState()
       description: Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
      - 
       return-value: final void
       name: layout(int l, int t, int r, int b)
       description: Assign a size and position to a view and all of its descendants
      - 
       return-value: void
       name: measureChild(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec)
       description: Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding.
      - 
       return-value: void
       name: measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed)
       description: Ask one of the children of this view to measure itself, taking into account both the MeasureSpec requirements for this view and its padding and margins.
      - 
       return-value: void
       name: measureChildren(int widthMeasureSpec, int heightMeasureSpec)
       description: Ask all of the children of this view to measure themselves, taking into account both the MeasureSpec requirements for this view and its padding.
      - 
       return-value: void
       name: notifySubtreeAccessibilityStateChanged(View child, View source, int changeType)
       description: Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.
      - 
       return-value: final void
       name: offsetDescendantRectToMyCoords(View descendant, Rect rect)
       description: Offset a rectangle that is in a descendant's coordinate space into our coordinate space.
      - 
       return-value: final void
       name: offsetRectIntoDescendantCoords(View descendant, Rect rect)
       description: Offset a rectangle that is in our coordinate space into an ancestor's coordinate space.
      - 
       return-value: void
       name: onAttachedToWindow()
       description: This is called when the view is attached to a window.
      - 
       return-value: int[]
       name: onCreateDrawableState(int extraSpace)
       description: Generate the new Drawable state for this view.
      - 
       return-value: void
       name: onDescendantInvalidated(View child, View target)
       description: The target View has been invalidated, or has had a drawing property changed that requires the hierarchy to re-render.
      - 
       return-value: void
       name: onDetachedFromWindow()
       description: This is called when the view is detached from a window.
      - 
       return-value: boolean
       name: onInterceptHoverEvent(MotionEvent event)
       description: Implement this method to intercept hover events before they are handled by child views.
      - 
       return-value: boolean
       name: onInterceptTouchEvent(MotionEvent ev)
       description: Implement this method to intercept all touch screen motion events.
      - 
       return-value: abstract void
       name: onLayout(boolean changed, int l, int t, int r, int b)
       description: Called from layout when this view should assign a size and position to each of its children.
      - 
       return-value: boolean
       name: onNestedFling(View target, float velocityX, float velocityY, boolean consumed)
       description: Request a fling from a nested scroll.
      - 
       return-value: boolean
       name: onNestedPreFling(View target, float velocityX, float velocityY)
       description: React to a nested fling before the target view consumes it.
      - 
       return-value: boolean
       name: onNestedPrePerformAccessibilityAction(View target, int action, Bundle args)
       description: React to an accessibility action delegated by a target descendant view before the target processes it.
      - 
       return-value: void
       name: onNestedPreScroll(View target, int dx, int dy, int[] consumed)
       description: React to a nested scroll in progress before the target view consumes a portion of the scroll.
      - 
       return-value: void
       name: onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)
       description: React to a nested scroll in progress.
      - 
       return-value: void
       name: onNestedScrollAccepted(View child, View target, int axes)
       description: React to the successful claiming of a nested scroll operation.
      - 
       return-value: boolean
       name: onRequestFocusInDescendants(int direction, Rect previouslyFocusedRect)
       description: Look for a descendant to call View.requestFocus() on.
      - 
       return-value: boolean
       name: onRequestSendAccessibilityEvent(View child, AccessibilityEvent event)
       description: Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.
      - 
       return-value: PointerIcon
       name: onResolvePointerIcon(MotionEvent event, int pointerIndex)
       description: Returns the pointer icon for the motion event, or null if it doesn't specify the icon.
      - 
       return-value: boolean
       name: onStartNestedScroll(View child, View target, int nestedScrollAxes)
       description: React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate.
      - 
       return-value: void
       name: onStopNestedScroll(View child)
       description: React to a nested scroll operation ending.
      - 
       return-value: void
       name: onViewAdded(View child)
       description: Called when a new child is added to this ViewGroup.
      - 
       return-value: void
       name: onViewRemoved(View child)
       description: Called when a child view is removed from this ViewGroup.
      - 
       return-value: void
       name: recomputeViewAttributes(View child)
       description: Tell view hierarchy that the global view attributes need to be re-evaluated.
      - 
       return-value: void
       name: removeAllViews()
       description: Call this method to remove all child views from the ViewGroup.
      - 
       return-value: void
       name: removeAllViewsInLayout()
       description: Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render.
      - 
       return-value: void
       name: removeDetachedView(View child, boolean animate)
       description: Finishes the removal of a detached view.
      - 
       return-value: void
       name: removeView(View view)
       description: 
      - 
       return-value: void
       name: removeViewAt(int index)
       description: Removes the view at the specified position in the group.
      - 
       return-value: void
       name: removeViewInLayout(View view)
       description: Removes a view during layout.
      - 
       return-value: void
       name: removeViews(int start, int count)
       description: Removes the specified range of views from the group.
      - 
       return-value: void
       name: removeViewsInLayout(int start, int count)
       description: Removes a range of views during layout.
      - 
       return-value: void
       name: requestChildFocus(View child, View focused)
       description: Called when a child of this parent wants focus
      - 
       return-value: boolean
       name: requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)
       description: Called when a child of this group wants a particular rectangle to be positioned onto the screen.
      - 
       return-value: void
       name: requestDisallowInterceptTouchEvent(boolean disallowIntercept)
       description: Called when a child does not want this parent and its ancestors to intercept touch events with ViewGroup.onInterceptTouchEvent(MotionEvent).
      - 
       return-value: boolean
       name: requestFocus(int direction, Rect previouslyFocusedRect)
       description: Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability().
      - 
       return-value: boolean
       name: requestSendAccessibilityEvent(View child, AccessibilityEvent event)
       description: Called by a child to request from its parent to send an AccessibilityEvent.
      - 
       return-value: void
       name: requestTransparentRegion(View child)
       description: Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.
      - 
       return-value: boolean
       name: restoreDefaultFocus()
       description: Gives focus to the default-focus view in the view hierarchy that has this view as a root.
      - 
       return-value: void
       name: scheduleLayoutAnimation()
       description: Schedules the layout animation to be played after the next layout pass of this view group.
      - 
       return-value: void
       name: setAddStatesFromChildren(boolean addsStates)
       description: Sets whether this ViewGroup's drawable states also include its children's drawable states.
      - 
       return-value: void
       name: setAlwaysDrawnWithCacheEnabled(boolean always)
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Child views may no longer have their caching behavior disabled by parents.
      - 
       return-value: void
       name: setAnimationCacheEnabled(boolean enabled)
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Caching behavior of children may be controlled through View.setLayerType(int, Paint).
      - 
       return-value: void
       name: setChildrenDrawingCacheEnabled(boolean enabled)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setChildrenDrawingOrderEnabled(boolean enabled)
       description: Tells the ViewGroup whether to draw its children in the order defined by the method getChildDrawingOrder(int, int).
      - 
       return-value: void
       name: setChildrenDrawnWithCacheEnabled(boolean enabled)
       description: This method was deprecated in API level 23. As of Build.VERSION_CODES.M, this property is ignored. Child views may no longer be forced to cache their rendering state by their parents. Use View.setLayerType(int, Paint) on individual Views instead.
      - 
       return-value: void
       name: setClipChildren(boolean clipChildren)
       description: By default, children are clipped to their bounds before drawing.
      - 
       return-value: void
       name: setClipToPadding(boolean clipToPadding)
       description: Sets whether this ViewGroup will clip its children to its padding and resize (but not clip) any EdgeEffect to the padded region, if padding is present.
      - 
       return-value: void
       name: setDescendantFocusability(int focusability)
       description: Set the descendant focusability of this view group.
      - 
       return-value: void
       name: setLayoutAnimation(LayoutAnimationController controller)
       description: Sets the layout animation controller used to animate the group's children after the first layout.
      - 
       return-value: void
       name: setLayoutAnimationListener(Animation.AnimationListener animationListener)
       description: Specifies the animation listener to which layout animation events must be sent.
      - 
       return-value: void
       name: setLayoutMode(int layoutMode)
       description: Sets the basis of alignment during the layout of this ViewGroup.
      - 
       return-value: void
       name: setLayoutTransition(LayoutTransition transition)
       description: Sets the LayoutTransition object for this ViewGroup.
      - 
       return-value: void
       name: setMotionEventSplittingEnabled(boolean split)
       description: Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch.
      - 
       return-value: void
       name: setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener)
       description: Register a callback to be invoked when a child is added to or removed from this view.
      - 
       return-value: void
       name: setPersistentDrawingCache(int drawingCacheToKeep)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, View.setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call View.draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setStaticTransformationsEnabled(boolean enabled)
       description: When this property is set to true, this ViewGroup supports static transformations on children; this causes getChildStaticTransformation(View, android.view.animation.Transformation) to be invoked when a child is drawn.
      - 
       return-value: void
       name: setTouchscreenBlocksFocus(boolean touchscreenBlocksFocus)
       description: Set whether this ViewGroup should ignore focus requests for itself and its children.
      - 
       return-value: void
       name: setTransitionGroup(boolean isTransitionGroup)
       description: Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.
      - 
       return-value: boolean
       name: shouldDelayChildPressedState()
       description: Return true if the pressed state should be delayed for children or descendants of this ViewGroup.
      - 
       return-value: boolean
       name: showContextMenuForChild(View originalView, float x, float y)
       description: Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate.
      - 
       return-value: boolean
       name: showContextMenuForChild(View originalView)
       description: Shows the context menu for the specified view or its ancestors.
      - 
       return-value: ActionMode
       name: startActionModeForChild(View originalView, ActionMode.Callback callback, int type)
       description: Start an action mode of a specific type for the specified view.
      - 
       return-value: ActionMode
       name: startActionModeForChild(View originalView, ActionMode.Callback callback)
       description: Start an action mode for the specified view with the default type ActionMode.TYPE_PRIMARY.
      - 
       return-value: void
       name: startLayoutAnimation()
       description: Runs the layout animation.
      - 
       return-value: void
       name: startViewTransition(View view)
       description: This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent.
      - 
       return-value: void
       name: updateViewLayout(View view, ViewGroup.LayoutParams params)
  name: android.view.View
     method: 
      - 
       return-value: void
       name: addChildrenForAccessibility(ArrayList<View> outChildren)
       description: Adds the children of this View relevant for accessibility to the given list as output.
      - 
       return-value: void
       name: addExtraDataToAccessibilityNodeInfo(AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)
       description: Adds extra data to an AccessibilityNodeInfo based on an explicit request for the additional data.
      - 
       return-value: void
       name: addFocusables(ArrayList<View> views, int direction)
       description: Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
      - 
       return-value: void
       name: addFocusables(ArrayList<View> views, int direction, int focusableMode)
       description: Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
      - 
       return-value: void
       name: addKeyboardNavigationClusters(Collection<View> views, int direction)
       description: Adds any keyboard navigation cluster roots that are descendants of this view (possibly including this view if it is a cluster root itself) to views.
      - 
       return-value: void
       name: addOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)
       description: Add a listener for attach state changes.
      - 
       return-value: void
       name: addOnLayoutChangeListener(View.OnLayoutChangeListener listener)
       description: Add a listener that will be called when the bounds of the view change due to layout processing.
      - 
       return-value: void
       name: addOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)
       description: Adds a listener which will receive unhandled KeyEvents.
      - 
       return-value: void
       name: addTouchables(ArrayList<View> views)
       description: Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
      - 
       return-value: ViewPropertyAnimator
       name: animate()
       description: This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.
      - 
       return-value: void
       name: announceForAccessibility(CharSequence text)
       description: Convenience method for sending a AccessibilityEvent.TYPE_ANNOUNCEMENT AccessibilityEvent to make an announcement which is related to some sort of a context change for which none of the events representing UI transitions is a good fit.
      - 
       return-value: void
       name: autofill(AutofillValue value)
       description: Automatically fills the content of this view with the value.
      - 
       return-value: void
       name: autofill(SparseArray<AutofillValue> values)
       description: Automatically fills the content of the virtual children within this view.
      - 
       return-value: boolean
       name: awakenScrollBars(int startDelay, boolean invalidate)
       description: 
      - 
       return-value: boolean
       name: awakenScrollBars(int startDelay)
       description: 
      - 
       return-value: boolean
       name: awakenScrollBars()
       description: 
      - 
       return-value: void
       name: bringToFront()
       description: Change the view's z order in the tree, so it's on top of other sibling views.
      - 
       return-value: void
       name: buildDrawingCache(boolean autoScale)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: buildDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: buildLayer()
       description: Forces this view's layer to be created and this view to be rendered into its layer.
      - 
       return-value: boolean
       name: callOnClick()
       description: Directly call any attached OnClickListener.
      - 
       return-value: boolean
       name: canResolveLayoutDirection()
       description: Check if layout direction resolution can be done.
      - 
       return-value: boolean
       name: canResolveTextAlignment()
       description: Check if text alignment resolution can be done.
      - 
       return-value: boolean
       name: canResolveTextDirection()
       description: Check if text direction resolution can be done.
      - 
       return-value: boolean
       name: canScrollHorizontally(int direction)
       description: Check if this view can be scrolled horizontally in a certain direction.
      - 
       return-value: boolean
       name: canScrollVertically(int direction)
       description: Check if this view can be scrolled vertically in a certain direction.
      - 
       return-value: final void
       name: cancelDragAndDrop()
       description: Cancels an ongoing drag and drop operation.
      - 
       return-value: void
       name: cancelLongPress()
       description: Cancels a pending long press.
      - 
       return-value: final void
       name: cancelPendingInputEvents()
       description: Cancel any deferred high-level input events that were previously posted to the event queue.
      - 
       return-value: boolean
       name: checkInputConnectionProxy(View view)
       description: Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager.
      - 
       return-value: void
       name: clearAnimation()
       description: Cancels any animations for this view.
      - 
       return-value: void
       name: clearFocus()
       description: Called when this view wants to give up focus.
      - 
       return-value: static int
       name: combineMeasuredStates(int curState, int newState)
       description: Merge two states as returned by getMeasuredState().
      - 
       return-value: int
       name: computeHorizontalScrollExtent()
       description: 
      - 
       return-value: int
       name: computeHorizontalScrollOffset()
       description: 
      - 
       return-value: int
       name: computeHorizontalScrollRange()
       description: 
      - 
       return-value: void
       name: computeScroll()
       description: Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary.
      - 
       return-value: WindowInsets
       name: computeSystemWindowInsets(WindowInsets in, Rect outLocalInsets)
       description: Compute insets that should be consumed by this view and the ones that should propagate to those under it.
      - 
       return-value: int
       name: computeVerticalScrollExtent()
       description: 
      - 
       return-value: int
       name: computeVerticalScrollOffset()
       description: 
      - 
       return-value: int
       name: computeVerticalScrollRange()
       description: 
      - 
       return-value: AccessibilityNodeInfo
       name: createAccessibilityNodeInfo()
       description: Returns an AccessibilityNodeInfo representing this view from the point of view of an AccessibilityService.
      - 
       return-value: void
       name: createContextMenu(ContextMenu menu)
       description: Show the context menu for this view.
      - 
       return-value: void
       name: destroyDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: WindowInsets
       name: dispatchApplyWindowInsets(WindowInsets insets)
       description: Request to apply the given window insets to this view or another view in its subtree.
      - 
       return-value: boolean
       name: dispatchCapturedPointerEvent(MotionEvent event)
       description: Pass a captured pointer event down to the focused view.
      - 
       return-value: void
       name: dispatchConfigurationChanged(Configuration newConfig)
       description: Dispatch a notification about a resource configuration change down the view hierarchy.
      - 
       return-value: void
       name: dispatchDisplayHint(int hint)
       description: Dispatch a hint about whether this view is displayed.
      - 
       return-value: boolean
       name: dispatchDragEvent(DragEvent event)
       description: Detects if this View is enabled and has a drag event listener.
      - 
       return-value: void
       name: dispatchDraw(Canvas canvas)
       description: Called by draw to draw the child views.
      - 
       return-value: void
       name: dispatchDrawableHotspotChanged(float x, float y)
       description: Dispatches drawableHotspotChanged to all of this View's children.
      - 
       return-value: void
       name: dispatchFinishTemporaryDetach()
       description: Dispatch onFinishTemporaryDetach() to this View and its direct children if this is a container View.
      - 
       return-value: boolean
       name: dispatchGenericFocusedEvent(MotionEvent event)
       description: Dispatch a generic motion event to the currently focused view.
      - 
       return-value: boolean
       name: dispatchGenericMotionEvent(MotionEvent event)
       description: Dispatch a generic motion event.
      - 
       return-value: boolean
       name: dispatchGenericPointerEvent(MotionEvent event)
       description: Dispatch a generic motion event to the view under the first pointer.
      - 
       return-value: boolean
       name: dispatchHoverEvent(MotionEvent event)
       description: Dispatch a hover event.
      - 
       return-value: boolean
       name: dispatchKeyEvent(KeyEvent event)
       description: Dispatch a key event to the next view on the focus path.
      - 
       return-value: boolean
       name: dispatchKeyEventPreIme(KeyEvent event)
       description: Dispatch a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: dispatchKeyShortcutEvent(KeyEvent event)
       description: Dispatches a key shortcut event.
      - 
       return-value: boolean
       name: dispatchNestedFling(float velocityX, float velocityY, boolean consumed)
       description: Dispatch a fling to a nested scrolling parent.
      - 
       return-value: boolean
       name: dispatchNestedPreFling(float velocityX, float velocityY)
       description: Dispatch a fling to a nested scrolling parent before it is processed by this view.
      - 
       return-value: boolean
       name: dispatchNestedPrePerformAccessibilityAction(int action, Bundle arguments)
       description: Report an accessibility action to this view's parents for delegated processing.
      - 
       return-value: boolean
       name: dispatchNestedPreScroll(int dx, int dy, int[] consumed, int[] offsetInWindow)
       description: Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
      - 
       return-value: boolean
       name: dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow)
       description: Dispatch one step of a nested scroll in progress.
      - 
       return-value: void
       name: dispatchPointerCaptureChanged(boolean hasCapture)
      - 
       return-value: boolean
       name: dispatchPopulateAccessibilityEvent(AccessibilityEvent event)
       description: Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.
      - 
       return-value: void
       name: dispatchProvideAutofillStructure(ViewStructure structure, int flags)
       description: Dispatches creation of a ViewStructures for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request.
      - 
       return-value: void
       name: dispatchProvideStructure(ViewStructure structure)
       description: Dispatch creation of ViewStructure down the hierarchy.
      - 
       return-value: void
       name: dispatchRestoreInstanceState(SparseArray<Parcelable> container)
       description: Called by restoreHierarchyState(android.util.SparseArray) to retrieve the state for this view and its children.
      - 
       return-value: void
       name: dispatchSaveInstanceState(SparseArray<Parcelable> container)
       description: Called by saveHierarchyState(android.util.SparseArray) to store the state for this view and its children.
      - 
       return-value: void
       name: dispatchSetActivated(boolean activated)
       description: Dispatch setActivated to all of this View's children.
      - 
       return-value: void
       name: dispatchSetPressed(boolean pressed)
       description: Dispatch setPressed to all of this View's children.
      - 
       return-value: void
       name: dispatchSetSelected(boolean selected)
       description: Dispatch setSelected to all of this View's children.
      - 
       return-value: void
       name: dispatchStartTemporaryDetach()
       description: Dispatch onStartTemporaryDetach() to this View and its direct children if this is a container View.
      - 
       return-value: void
       name: dispatchSystemUiVisibilityChanged(int visibility)
       description: Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy.
      - 
       return-value: boolean
       name: dispatchTouchEvent(MotionEvent event)
       description: Pass the touch screen motion event down to the target view, or this view if it is the target.
      - 
       return-value: boolean
       name: dispatchTrackballEvent(MotionEvent event)
       description: Pass a trackball motion event down to the focused view.
      - 
       return-value: boolean
       name: dispatchUnhandledMove(View focused, int direction)
       description: This method is the last chance for the focused view and its ancestors to respond to an arrow key.
      - 
       return-value: void
       name: dispatchVisibilityChanged(View changedView, int visibility)
       description: Dispatch a view visibility change down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowFocusChanged(boolean hasFocus)
       description: Called when the window containing this view gains or loses window focus.
      - 
       return-value: void
       name: dispatchWindowSystemUiVisiblityChanged(int visible)
       description: Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy.
      - 
       return-value: void
       name: dispatchWindowVisibilityChanged(int visibility)
       description: Dispatch a window visibility change down the view hierarchy.
      - 
       return-value: void
       name: draw(Canvas canvas)
       description: Manually render this view (and all of its children) to the given Canvas.
      - 
       return-value: void
       name: drawableHotspotChanged(float x, float y)
       description: This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view.
      - 
       return-value: void
       name: drawableStateChanged()
       description: This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown.
      - 
       return-value: View
       name: findFocus()
       description: Find the view in the hierarchy rooted at this view that currently has focus.
      - 
       return-value: final <T extends View> T
       name: findViewById(int id)
       description: Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or null if the ID is invalid (< 0) or there is no matching view in the hierarchy.
      - 
       return-value: final <T extends View> T
       name: findViewWithTag(Object tag)
       description: Look for a child view with the given tag.
      - 
       return-value: void
       name: findViewsWithText(ArrayList<View> outViews, CharSequence searched, int flags)
       description: Finds the Views that contain given text.
      - 
       return-value: boolean
       name: fitSystemWindows(Rect insets)
       description: This method was deprecated in API level 20. As of API 20 use dispatchApplyWindowInsets(WindowInsets) to apply insets to views. Views should override onApplyWindowInsets(WindowInsets) or use setOnApplyWindowInsetsListener(android.view.View.OnApplyWindowInsetsListener) to implement handling their own insets.
      - 
       return-value: View
       name: focusSearch(int direction)
       description: Find the nearest view in the specified direction that can take focus.
      - 
       return-value: void
       name: forceHasOverlappingRendering(boolean hasOverlappingRendering)
       description: Sets the behavior for overlapping rendering for this view (see hasOverlappingRendering() for more details on this behavior).
      - 
       return-value: void
       name: forceLayout()
       description: Forces this view to be laid out during the next layout pass.
      - 
       return-value: static int
       name: generateViewId()
       description: Generate a value suitable for use in setId(int).
      - 
       return-value: CharSequence
       name: getAccessibilityClassName()
       description: Return the class name of this object to be used for accessibility purposes.
      - 
       return-value: int
       name: getAccessibilityLiveRegion()
       description: Gets the live region mode for this View.
      - 
       return-value: AccessibilityNodeProvider
       name: getAccessibilityNodeProvider()
       description: Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content.
      - 
       return-value: CharSequence
       name: getAccessibilityPaneTitle()
       description: Get the title of the pane for purposes of accessibility.
      - 
       return-value: int
       name: getAccessibilityTraversalAfter()
       description: Gets the id of a view after which this one is visited in accessibility traversal.
      - 
       return-value: int
       name: getAccessibilityTraversalBefore()
       description: Gets the id of a view before which this one is visited in accessibility traversal.
      - 
       return-value: float
       name: getAlpha()
       description: The opacity of the view.
      - 
       return-value: Animation
       name: getAnimation()
       description: Get the animation currently associated with this view.
      - 
       return-value: IBinder
       name: getApplicationWindowToken()
       description: Retrieve a unique token identifying the top-level "real" window of the window that this view is attached to.
      - 
       return-value: String[]
       name: getAutofillHints()
       description: Gets the hints that help an AutofillService determine how to autofill the view with the user's data.
      - 
       return-value: final AutofillId
       name: getAutofillId()
       description: Gets the unique, logical identifier of this view in the activity, for autofill purposes.
      - 
       return-value: int
       name: getAutofillType()
       description: Describes the autofill type of this view, so an AutofillService can create the proper AutofillValue when autofilling the view.
      - 
       return-value: AutofillValue
       name: getAutofillValue()
       description: Gets the View's current autofill value.
      - 
       return-value: Drawable
       name: getBackground()
       description: Gets the background drawable
      - 
       return-value: ColorStateList
       name: getBackgroundTintList()
       description: Return the tint applied to the background drawable, if specified.
      - 
       return-value: PorterDuff.Mode
       name: getBackgroundTintMode()
       description: Return the blending mode used to apply the tint to the background drawable, if specified.
      - 
       return-value: int
       name: getBaseline()
       description: 
      - 
       return-value: final int
       name: getBottom()
       description: Bottom position of this view relative to its parent.
      - 
       return-value: float
       name: getBottomFadingEdgeStrength()
       description: Returns the strength, or intensity, of the bottom faded edge.
      - 
       return-value: int
       name: getBottomPaddingOffset()
       description: Amount by which to extend the bottom fading region.
      - 
       return-value: float
       name: getCameraDistance()
       description: Gets the distance along the Z axis from the camera to this view.
      - 
       return-value: boolean
       name: getClipBounds(Rect outRect)
       description: Populates an output rectangle with the clip bounds of the view, returning true if successful or false if the view's clip bounds are null.
      - 
       return-value: Rect
       name: getClipBounds()
       description: Returns a copy of the current clipBounds.
      - 
       return-value: final boolean
       name: getClipToOutline()
       description: Returns whether the Outline should be used to clip the contents of the View.
      - 
       return-value: CharSequence
       name: getContentDescription()
       description: Returns the View's content description.
      - 
       return-value: final Context
       name: getContext()
       description: Returns the context the view is running in, through which it can access the current theme, resources, etc.
      - 
       return-value: ContextMenu.ContextMenuInfo
       name: getContextMenuInfo()
       description: Views should implement this if they have extra information to associate with the context menu.
      - 
       return-value: final boolean
       name: getDefaultFocusHighlightEnabled()
       description: /** Returns whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background.
      - 
       return-value: static int
       name: getDefaultSize(int size, int measureSpec)
       description: Utility to return a default size.
      - 
       return-value: Display
       name: getDisplay()
       description: Gets the logical display to which the view's window has been attached.
      - 
       return-value: final int[]
       name: getDrawableState()
       description: Return an array of resource IDs of the drawable states representing the current state of the view.
      - 
       return-value: Bitmap
       name: getDrawingCache()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: Bitmap
       name: getDrawingCache(boolean autoScale)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: int
       name: getDrawingCacheBackgroundColor()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: int
       name: getDrawingCacheQuality()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: getDrawingRect(Rect outRect)
       description: Return the visible drawing bounds of your view.
      - 
       return-value: long
       name: getDrawingTime()
       description: 
      - 
       return-value: float
       name: getElevation()
       description: The base elevation of this view relative to its parent, in pixels.
      - 
       return-value: boolean
       name: getFilterTouchesWhenObscured()
       description: Gets whether the framework should discard touches when the view's window is obscured by another visible window.
      - 
       return-value: boolean
       name: getFitsSystemWindows()
       description: Check for state of setFitsSystemWindows(boolean).
      - 
       return-value: int
       name: getFocusable()
       description: Returns the focusable setting for this view.
      - 
       return-value: ArrayList<View>
       name: getFocusables(int direction)
       description: Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself.
      - 
       return-value: void
       name: getFocusedRect(Rect r)
       description: When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method.
      - 
       return-value: Drawable
       name: getForeground()
       description: Returns the drawable used as the foreground of this View.
      - 
       return-value: int
       name: getForegroundGravity()
       description: Describes how the foreground is positioned.
      - 
       return-value: ColorStateList
       name: getForegroundTintList()
       description: Return the tint applied to the foreground drawable, if specified.
      - 
       return-value: PorterDuff.Mode
       name: getForegroundTintMode()
       description: Return the blending mode used to apply the tint to the foreground drawable, if specified.
      - 
       return-value: final boolean
       name: getGlobalVisibleRect(Rect r)
      - 
       return-value: boolean
       name: getGlobalVisibleRect(Rect r, Point globalOffset)
       description: If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates.
      - 
       return-value: Handler
       name: getHandler()
      - 
       return-value: final boolean
       name: getHasOverlappingRendering()
       description: Returns the value for overlapping rendering that is used internally.
      - 
       return-value: final int
       name: getHeight()
       description: Return the height of your view.
      - 
       return-value: void
       name: getHitRect(Rect outRect)
       description: Hit rectangle in parent's coordinates
      - 
       return-value: int
       name: getHorizontalFadingEdgeLength()
       description: Returns the size of the horizontal faded edges used to indicate that more content in this view is visible.
      - 
       return-value: int
       name: getHorizontalScrollbarHeight()
       description: Returns the height of the horizontal scrollbar.
      - 
       return-value: int
       name: getId()
       description: Returns this view's identifier.
      - 
       return-value: int
       name: getImportantForAccessibility()
       description: Gets the mode for determining whether this View is important for accessibility.
      - 
       return-value: int
       name: getImportantForAutofill()
       description: Gets the mode for determining whether this view is important for autofill.
      - 
       return-value: boolean
       name: getKeepScreenOn()
       description: Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON.
      - 
       return-value: KeyEvent.DispatcherState
       name: getKeyDispatcherState()
       description: Return the global KeyEvent.DispatcherState for this view's window.
      - 
       return-value: int
       name: getLabelFor()
       description: Gets the id of a view for which this view serves as a label for accessibility purposes.
      - 
       return-value: int
       name: getLayerType()
       description: Indicates what type of layer is currently associated with this view.
      - 
       return-value: int
       name: getLayoutDirection()
       description: Returns the resolved layout direction for this view.
      - 
       return-value: ViewGroup.LayoutParams
       name: getLayoutParams()
       description: Get the LayoutParams associated with this view.
      - 
       return-value: final int
       name: getLeft()
       description: Left position of this view relative to its parent.
      - 
       return-value: float
       name: getLeftFadingEdgeStrength()
       description: Returns the strength, or intensity, of the left faded edge.
      - 
       return-value: int
       name: getLeftPaddingOffset()
       description: Amount by which to extend the left fading region.
      - 
       return-value: final boolean
       name: getLocalVisibleRect(Rect r)
      - 
       return-value: void
       name: getLocationInWindow(int[] outLocation)
       description: 
      - 
       return-value: void
       name: getLocationOnScreen(int[] outLocation)
       description: 
      - 
       return-value: Matrix
       name: getMatrix()
       description: The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.
      - 
       return-value: final int
       name: getMeasuredHeight()
       description: Like getMeasuredHeightAndState(), but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK).
      - 
       return-value: final int
       name: getMeasuredHeightAndState()
       description: Return the full height measurement information for this view as computed by the most recent call to measure(int, int).
      - 
       return-value: final int
       name: getMeasuredState()
       description: Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer.
      - 
       return-value: final int
       name: getMeasuredWidth()
       description: Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK).
      - 
       return-value: final int
       name: getMeasuredWidthAndState()
       description: Return the full width measurement information for this view as computed by the most recent call to measure(int, int).
      - 
       return-value: int
       name: getMinimumHeight()
       description: Returns the minimum height of the view.
      - 
       return-value: int
       name: getMinimumWidth()
       description: Returns the minimum width of the view.
      - 
       return-value: int
       name: getNextClusterForwardId()
       description: Gets the id of the root of the next keyboard navigation cluster.
      - 
       return-value: int
       name: getNextFocusDownId()
       description: Gets the id of the view to use when the next focus is FOCUS_DOWN.
      - 
       return-value: int
       name: getNextFocusForwardId()
       description: Gets the id of the view to use when the next focus is FOCUS_FORWARD.
      - 
       return-value: int
       name: getNextFocusLeftId()
       description: Gets the id of the view to use when the next focus is FOCUS_LEFT.
      - 
       return-value: int
       name: getNextFocusRightId()
       description: Gets the id of the view to use when the next focus is FOCUS_RIGHT.
      - 
       return-value: int
       name: getNextFocusUpId()
       description: Gets the id of the view to use when the next focus is FOCUS_UP.
      - 
       return-value: View.OnFocusChangeListener
       name: getOnFocusChangeListener()
       description: Returns the focus-change callback registered for this view.
      - 
       return-value: int
       name: getOutlineAmbientShadowColor()
      - 
       return-value: ViewOutlineProvider
       name: getOutlineProvider()
       description: Returns the current ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
      - 
       return-value: int
       name: getOutlineSpotShadowColor()
      - 
       return-value: int
       name: getOverScrollMode()
       description: Returns the over-scroll mode for this view.
      - 
       return-value: ViewOverlay
       name: getOverlay()
       description: Returns the overlay for this view, creating it if it does not yet exist.
      - 
       return-value: int
       name: getPaddingBottom()
       description: Returns the bottom padding of this view.
      - 
       return-value: int
       name: getPaddingEnd()
       description: Returns the end padding of this view depending on its resolved layout direction.
      - 
       return-value: int
       name: getPaddingLeft()
       description: Returns the left padding of this view.
      - 
       return-value: int
       name: getPaddingRight()
       description: Returns the right padding of this view.
      - 
       return-value: int
       name: getPaddingStart()
       description: Returns the start padding of this view depending on its resolved layout direction.
      - 
       return-value: int
       name: getPaddingTop()
       description: Returns the top padding of this view.
      - 
       return-value: final ViewParent
       name: getParent()
       description: Gets the parent of this view.
      - 
       return-value: ViewParent
       name: getParentForAccessibility()
       description: Gets the parent for accessibility purposes.
      - 
       return-value: float
       name: getPivotX()
       description: The x location of the point around which the view is rotated and scaled.
      - 
       return-value: float
       name: getPivotY()
       description: The y location of the point around which the view is rotated and scaled.
      - 
       return-value: PointerIcon
       name: getPointerIcon()
       description: Gets the pointer icon for the current view.
      - 
       return-value: Resources
       name: getResources()
       description: Returns the resources associated with this view.
      - 
       return-value: final boolean
       name: getRevealOnFocusHint()
       description: Returns this view's preference for reveal behavior when it gains focus.
      - 
       return-value: final int
       name: getRight()
       description: Right position of this view relative to its parent.
      - 
       return-value: float
       name: getRightFadingEdgeStrength()
       description: Returns the strength, or intensity, of the right faded edge.
      - 
       return-value: int
       name: getRightPaddingOffset()
       description: Amount by which to extend the right fading region.
      - 
       return-value: View
       name: getRootView()
       description: 
      - 
       return-value: WindowInsets
       name: getRootWindowInsets()
       description: Provide original WindowInsets that are dispatched to the view hierarchy.
      - 
       return-value: float
       name: getRotation()
       description: The degrees that the view is rotated around the pivot point.
      - 
       return-value: float
       name: getRotationX()
       description: The degrees that the view is rotated around the horizontal axis through the pivot point.
      - 
       return-value: float
       name: getRotationY()
       description: The degrees that the view is rotated around the vertical axis through the pivot point.
      - 
       return-value: float
       name: getScaleX()
       description: The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: float
       name: getScaleY()
       description: The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height.
      - 
       return-value: int
       name: getScrollBarDefaultDelayBeforeFade()
       description: Returns the delay before scrollbars fade.
      - 
       return-value: int
       name: getScrollBarFadeDuration()
       description: Returns the scrollbar fade duration.
      - 
       return-value: int
       name: getScrollBarSize()
       description: Returns the scrollbar size.
      - 
       return-value: int
       name: getScrollBarStyle()
       description: 
      - 
       return-value: int
       name: getScrollIndicators()
       description: Returns a bitmask representing the enabled scroll indicators.
      - 
       return-value: final int
       name: getScrollX()
       description: Return the scrolled left position of this view.
      - 
       return-value: final int
       name: getScrollY()
       description: Return the scrolled top position of this view.
      - 
       return-value: int
       name: getSolidColor()
       description: Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges.
      - 
       return-value: StateListAnimator
       name: getStateListAnimator()
       description: Returns the current StateListAnimator if exists.
      - 
       return-value: int
       name: getSuggestedMinimumHeight()
       description: Returns the suggested minimum height that the view should use.
      - 
       return-value: int
       name: getSuggestedMinimumWidth()
       description: Returns the suggested minimum width that the view should use.
      - 
       return-value: int
       name: getSystemUiVisibility()
       description: Returns the last setSystemUiVisibility(int) that this view has requested.
      - 
       return-value: Object
       name: getTag()
       description: Returns this view's tag.
      - 
       return-value: Object
       name: getTag(int key)
       description: Returns the tag associated with this view and the specified key.
      - 
       return-value: int
       name: getTextAlignment()
       description: Return the resolved text alignment.
      - 
       return-value: int
       name: getTextDirection()
       description: Return the resolved text direction.
      - 
       return-value: CharSequence
       name: getTooltipText()
       description: Returns the view's tooltip text.
      - 
       return-value: final int
       name: getTop()
       description: Top position of this view relative to its parent.
      - 
       return-value: float
       name: getTopFadingEdgeStrength()
       description: Returns the strength, or intensity, of the top faded edge.
      - 
       return-value: int
       name: getTopPaddingOffset()
       description: Amount by which to extend the top fading region.
      - 
       return-value: TouchDelegate
       name: getTouchDelegate()
       description: Gets the TouchDelegate for this View.
      - 
       return-value: ArrayList<View>
       name: getTouchables()
       description: Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself.
      - 
       return-value: String
       name: getTransitionName()
       description: Returns the name of the View to be used to identify Views in Transitions.
      - 
       return-value: float
       name: getTranslationX()
       description: The horizontal location of this view relative to its left position.
      - 
       return-value: float
       name: getTranslationY()
       description: The vertical location of this view relative to its top position.
      - 
       return-value: float
       name: getTranslationZ()
       description: The depth location of this view relative to its elevation.
      - 
       return-value: int
       name: getVerticalFadingEdgeLength()
       description: Returns the size of the vertical faded edges used to indicate that more content in this view is visible.
      - 
       return-value: int
       name: getVerticalScrollbarPosition()
      - 
       return-value: int
       name: getVerticalScrollbarWidth()
       description: Returns the width of the vertical scrollbar.
      - 
       return-value: ViewTreeObserver
       name: getViewTreeObserver()
       description: Returns the ViewTreeObserver for this view's hierarchy.
      - 
       return-value: int
       name: getVisibility()
       description: Returns the visibility status for this view.
      - 
       return-value: final int
       name: getWidth()
       description: Return the width of your view.
      - 
       return-value: int
       name: getWindowAttachCount()
      - 
       return-value: WindowId
       name: getWindowId()
       description: Retrieve the WindowId for the window this view is currently attached to.
      - 
       return-value: int
       name: getWindowSystemUiVisibility()
       description: Returns the current system UI visibility that is currently set for the entire window.
      - 
       return-value: IBinder
       name: getWindowToken()
       description: Retrieve a unique token identifying the window this view is attached to.
      - 
       return-value: int
       name: getWindowVisibility()
       description: Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE).
      - 
       return-value: void
       name: getWindowVisibleDisplayFrame(Rect outRect)
       description: Retrieve the overall visible display size in which the window this view is attached to has been positioned in.
      - 
       return-value: float
       name: getX()
       description: The visual x position of this view, in pixels.
      - 
       return-value: float
       name: getY()
       description: The visual y position of this view, in pixels.
      - 
       return-value: float
       name: getZ()
       description: The visual z position of this view, in pixels.
      - 
       return-value: boolean
       name: hasExplicitFocusable()
       description: Returns true if this view is focusable or if it contains a reachable View for which hasExplicitFocusable() returns true.
      - 
       return-value: boolean
       name: hasFocus()
       description: Returns true if this view has focus itself, or is the ancestor of the view that has focus.
      - 
       return-value: boolean
       name: hasFocusable()
       description: Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true.
      - 
       return-value: boolean
       name: hasNestedScrollingParent()
       description: Returns true if this view has a nested scrolling parent.
      - 
       return-value: boolean
       name: hasOnClickListeners()
       description: Return whether this view has an attached OnClickListener.
      - 
       return-value: boolean
       name: hasOverlappingRendering()
       description: Returns whether this View has content which overlaps.
      - 
       return-value: boolean
       name: hasPointerCapture()
       description: Checks pointer capture status.
      - 
       return-value: boolean
       name: hasTransientState()
       description: Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.
      - 
       return-value: boolean
       name: hasWindowFocus()
       description: Returns true if this view is in a window that currently has window focus.
      - 
       return-value: static View
       name: inflate(Context context, int resource, ViewGroup root)
       description: Inflate a view from an XML resource.
      - 
       return-value: void
       name: invalidate()
       description: Invalidate the whole view.
      - 
       return-value: void
       name: invalidate(Rect dirty)
       description: This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().
      - 
       return-value: void
       name: invalidate(int l, int t, int r, int b)
       description: This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this, clients are encouraged to just call invalidate().
      - 
       return-value: void
       name: invalidateDrawable(Drawable drawable)
       description: Invalidates the specified Drawable.
      - 
       return-value: void
       name: invalidateOutline()
       description: Called to rebuild this View's Outline from its outline provider
      - 
       return-value: boolean
       name: isAccessibilityFocused()
       description: Returns whether this View is accessibility focused.
      - 
       return-value: boolean
       name: isAccessibilityHeading()
       description: Gets whether this view is a heading for accessibility purposes.
      - 
       return-value: boolean
       name: isActivated()
       description: Indicates the activation state of this view.
      - 
       return-value: boolean
       name: isAttachedToWindow()
       description: Returns true if this view is currently attached to a window.
      - 
       return-value: boolean
       name: isClickable()
       description: Indicates whether this view reacts to click events or not.
      - 
       return-value: boolean
       name: isContextClickable()
       description: Indicates whether this view reacts to context clicks or not.
      - 
       return-value: boolean
       name: isDirty()
       description: True if this view has changed since the last time being drawn.
      - 
       return-value: boolean
       name: isDrawingCacheEnabled()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: boolean
       name: isDuplicateParentStateEnabled()
       description: 
      - 
       return-value: boolean
       name: isEnabled()
       description: Returns the enabled status for this view.
      - 
       return-value: final boolean
       name: isFocusable()
       description: Returns whether this View is currently able to take focus.
      - 
       return-value: final boolean
       name: isFocusableInTouchMode()
       description: When a view is focusable, it may not want to take focus when in touch mode.
      - 
       return-value: boolean
       name: isFocused()
       description: Returns true if this view has focus
      - 
       return-value: final boolean
       name: isFocusedByDefault()
       description: Returns whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
      - 
       return-value: boolean
       name: isHapticFeedbackEnabled()
      - 
       return-value: boolean
       name: isHardwareAccelerated()
       description: 
      - 
       return-value: boolean
       name: isHorizontalFadingEdgeEnabled()
       description: 
      - 
       return-value: boolean
       name: isHorizontalScrollBarEnabled()
       description: 
      - 
       return-value: boolean
       name: isHovered()
       description: Returns true if the view is currently hovered.
      - 
       return-value: boolean
       name: isImportantForAccessibility()
       description: Computes whether this view should be exposed for accessibility.
      - 
       return-value: final boolean
       name: isImportantForAutofill()
       description: Hints the Android System whether the AssistStructure.ViewNode associated with this view is considered important for autofill purposes.
      - 
       return-value: boolean
       name: isInEditMode()
       description: Indicates whether this View is currently in edit mode.
      - 
       return-value: boolean
       name: isInLayout()
       description: Returns whether the view hierarchy is currently undergoing a layout pass.
      - 
       return-value: boolean
       name: isInTouchMode()
       description: Returns whether the device is currently in touch mode.
      - 
       return-value: final boolean
       name: isKeyboardNavigationCluster()
       description: Returns whether this View is a root of a keyboard navigation cluster.
      - 
       return-value: boolean
       name: isLaidOut()
       description: Returns true if this view has been through at least one layout since it was last attached to or detached from a window.
      - 
       return-value: boolean
       name: isLayoutDirectionResolved()
      - 
       return-value: boolean
       name: isLayoutRequested()
       description: 
      - 
       return-value: boolean
       name: isLongClickable()
       description: Indicates whether this view reacts to long click events or not.
      - 
       return-value: boolean
       name: isNestedScrollingEnabled()
       description: Returns true if nested scrolling is enabled for this view.
      - 
       return-value: boolean
       name: isOpaque()
       description: Indicates whether this View is opaque.
      - 
       return-value: boolean
       name: isPaddingOffsetRequired()
       description: If the View draws content inside its padding and enables fading edges, it needs to support padding offsets.
      - 
       return-value: boolean
       name: isPaddingRelative()
       description: Return if the padding has been set through relative values setPaddingRelative(int, int, int, int) or through
      - 
       return-value: boolean
       name: isPivotSet()
       description: Returns whether or not a pivot has been set by a call to setPivotX(float) or setPivotY(float).
      - 
       return-value: boolean
       name: isPressed()
       description: Indicates whether the view is currently in pressed state.
      - 
       return-value: boolean
       name: isSaveEnabled()
       description: Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called).
      - 
       return-value: boolean
       name: isSaveFromParentEnabled()
       description: Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
      - 
       return-value: boolean
       name: isScreenReaderFocusable()
       description: Returns whether the view should be treated as a focusable unit by screen reader accessibility tools.
      - 
       return-value: boolean
       name: isScrollContainer()
       description: Indicates whether this view is one of the set of scrollable containers in its window.
      - 
       return-value: boolean
       name: isScrollbarFadingEnabled()
       description: Returns true if scrollbars will fade when this view is not scrolling
      - 
       return-value: boolean
       name: isSelected()
       description: Indicates the selection state of this view.
      - 
       return-value: boolean
       name: isShown()
       description: Returns the visibility of this view and all of its ancestors
      - 
       return-value: boolean
       name: isSoundEffectsEnabled()
      - 
       return-value: final boolean
       name: isTemporarilyDetached()
       description: Tells whether the View is in the state between onStartTemporaryDetach() and onFinishTemporaryDetach().
      - 
       return-value: boolean
       name: isTextAlignmentResolved()
      - 
       return-value: boolean
       name: isTextDirectionResolved()
      - 
       return-value: boolean
       name: isVerticalFadingEdgeEnabled()
       description: 
      - 
       return-value: boolean
       name: isVerticalScrollBarEnabled()
       description: 
      - 
       return-value: boolean
       name: isVisibleToUserForAutofill(int virtualId)
       description: Computes whether this virtual autofill view is visible to the user.
      - 
       return-value: void
       name: jumpDrawablesToCurrentState()
       description: Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view.
      - 
       return-value: View
       name: keyboardNavigationClusterSearch(View currentCluster, int direction)
       description: Find the nearest keyboard navigation cluster in the specified direction.
      - 
       return-value: void
       name: layout(int l, int t, int r, int b)
       description: Assign a size and position to a view and all of its descendants
      - 
       return-value: final void
       name: measure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: static int[]
       name: mergeDrawableStates(int[] baseState, int[] additionalState)
       description: Merge your own state values in additionalState into the base state values baseState that were returned by onCreateDrawableState(int).
      - 
       return-value: void
       name: offsetLeftAndRight(int offset)
       description: Offset this view's horizontal location by the specified amount of pixels.
      - 
       return-value: void
       name: offsetTopAndBottom(int offset)
       description: Offset this view's vertical location by the specified number of pixels.
      - 
       return-value: void
       name: onAnimationEnd()
       description: Invoked by a parent ViewGroup to notify the end of the animation currently associated with this view.
      - 
       return-value: void
       name: onAnimationStart()
       description: Invoked by a parent ViewGroup to notify the start of the animation currently associated with this view.
      - 
       return-value: WindowInsets
       name: onApplyWindowInsets(WindowInsets insets)
       description: Called when the view should apply WindowInsets according to its internal policy.
      - 
       return-value: void
       name: onAttachedToWindow()
       description: This is called when the view is attached to a window.
      - 
       return-value: void
       name: onCancelPendingInputEvents()
       description: Called as the result of a call to cancelPendingInputEvents() on this view or a parent view.
      - 
       return-value: boolean
       name: onCapturedPointerEvent(MotionEvent event)
       description: Implement this method to handle captured pointer events
      - 
       return-value: boolean
       name: onCheckIsTextEditor()
       description: Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it.
      - 
       return-value: void
       name: onConfigurationChanged(Configuration newConfig)
       description: Called when the current configuration of the resources being used by the application have changed.
      - 
       return-value: void
       name: onCreateContextMenu(ContextMenu menu)
       description: Views should implement this if the view itself is going to add items to the context menu.
      - 
       return-value: int[]
       name: onCreateDrawableState(int extraSpace)
       description: Generate the new Drawable state for this view.
      - 
       return-value: InputConnection
       name: onCreateInputConnection(EditorInfo outAttrs)
       description: Create a new InputConnection for an InputMethod to interact with the view.
      - 
       return-value: void
       name: onDetachedFromWindow()
       description: This is called when the view is detached from a window.
      - 
       return-value: void
       name: onDisplayHint(int hint)
       description: Gives this view a hint about whether is displayed or not.
      - 
       return-value: boolean
       name: onDragEvent(DragEvent event)
       description: Handles drag events sent by the system following a call to startDragAndDrop().
      - 
       return-value: void
       name: onDraw(Canvas canvas)
       description: Implement this to do your drawing.
      - 
       return-value: void
       name: onDrawForeground(Canvas canvas)
       description: Draw any foreground content for this view.
      - 
       return-value: final void
       name: onDrawScrollBars(Canvas canvas)
       description: 
      - 
       return-value: boolean
       name: onFilterTouchEventForSecurity(MotionEvent event)
       description: Filter the touch event to apply security policies.
      - 
       return-value: void
       name: onFinishInflate()
       description: Finalize inflating a view from XML.
      - 
       return-value: void
       name: onFinishTemporaryDetach()
       description: Called after onStartTemporaryDetach() when the container is done changing the view.
      - 
       return-value: void
       name: onFocusChanged(boolean gainFocus, int direction, Rect previouslyFocusedRect)
       description: Called by the view system when the focus state of this view changes.
      - 
       return-value: boolean
       name: onGenericMotionEvent(MotionEvent event)
       description: Implement this method to handle generic motion events.
      - 
       return-value: void
       name: onHoverChanged(boolean hovered)
       description: Implement this method to handle hover state changes.
      - 
       return-value: boolean
       name: onHoverEvent(MotionEvent event)
       description: Implement this method to handle hover events.
      - 
       return-value: void
       name: onInitializeAccessibilityEvent(AccessibilityEvent event)
       description: Initializes an AccessibilityEvent with information about this View which is the event source.
      - 
       return-value: void
       name: onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info)
       description: Initializes an AccessibilityNodeInfo with information about this view.
      - 
       return-value: boolean
       name: onKeyDown(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KeyEvent.KEYCODE_DPAD_CENTER or KeyEvent.KEYCODE_ENTER is released, if the view is enabled and clickable.
      - 
       return-value: boolean
       name: onKeyLongPress(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event).
      - 
       return-value: boolean
       name: onKeyMultiple(int keyCode, int repeatCount, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event).
      - 
       return-value: boolean
       name: onKeyPreIme(int keyCode, KeyEvent event)
       description: Handle a key event before it is processed by any input method associated with the view hierarchy.
      - 
       return-value: boolean
       name: onKeyShortcut(int keyCode, KeyEvent event)
       description: Called on the focused view when a key shortcut event is not handled.
      - 
       return-value: boolean
       name: onKeyUp(int keyCode, KeyEvent event)
       description: Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KeyEvent.KEYCODE_DPAD_CENTER, KeyEvent.KEYCODE_ENTER or KeyEvent.KEYCODE_SPACE is released.
      - 
       return-value: void
       name: onLayout(boolean changed, int left, int top, int right, int bottom)
       description: Called from layout when this view should assign a size and position to each of its children.
      - 
       return-value: void
       name: onMeasure(int widthMeasureSpec, int heightMeasureSpec)
       description: 
      - 
       return-value: void
       name: onOverScrolled(int scrollX, int scrollY, boolean clampedX, boolean clampedY)
       description: Called by overScrollBy(int, int, int, int, int, int, int, int, boolean) to respond to the results of an over-scroll operation.
      - 
       return-value: void
       name: onPointerCaptureChange(boolean hasCapture)
       description: Called when the window has just acquired or lost pointer capture.
      - 
       return-value: void
       name: onPopulateAccessibilityEvent(AccessibilityEvent event)
       description: Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.
      - 
       return-value: void
       name: onProvideAutofillStructure(ViewStructure structure, int flags)
       description: Populates a ViewStructure to fullfil an autofill request.
      - 
       return-value: void
       name: onProvideAutofillVirtualStructure(ViewStructure structure, int flags)
       description: Populates a ViewStructure containing virtual children to fullfil an autofill request.
      - 
       return-value: void
       name: onProvideStructure(ViewStructure structure)
       description: Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData.
      - 
       return-value: void
       name: onProvideVirtualStructure(ViewStructure structure)
       description: Called when assist structure is being retrieved from a view as part of Activity.onProvideAssistData to generate additional virtual structure under this view.
      - 
       return-value: PointerIcon
       name: onResolvePointerIcon(MotionEvent event, int pointerIndex)
       description: Returns the pointer icon for the motion event, or null if it doesn't specify the icon.
      - 
       return-value: void
       name: onRestoreInstanceState(Parcelable state)
       description: Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState().
      - 
       return-value: void
       name: onRtlPropertiesChanged(int layoutDirection)
       description: Called when any RTL property (layout direction or text direction or text alignment) has been changed.
      - 
       return-value: Parcelable
       name: onSaveInstanceState()
       description: Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state.
      - 
       return-value: void
       name: onScreenStateChanged(int screenState)
       description: This method is called whenever the state of the screen this view is attached to changes.
      - 
       return-value: void
       name: onScrollChanged(int l, int t, int oldl, int oldt)
       description: This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents).
      - 
       return-value: boolean
       name: onSetAlpha(int alpha)
       description: Invoked if there is a Transform that involves alpha.
      - 
       return-value: void
       name: onSizeChanged(int w, int h, int oldw, int oldh)
       description: This is called during layout when the size of this view has changed.
      - 
       return-value: void
       name: onStartTemporaryDetach()
       description: This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent.
      - 
       return-value: boolean
       name: onTouchEvent(MotionEvent event)
       description: Implement this method to handle touch screen motion events.
      - 
       return-value: boolean
       name: onTrackballEvent(MotionEvent event)
       description: Implement this method to handle trackball motion events.
      - 
       return-value: void
       name: onVisibilityAggregated(boolean isVisible)
       description: Called when the user-visibility of this View is potentially affected by a change to this view itself, an ancestor view or the window this view is attached to.
      - 
       return-value: void
       name: onVisibilityChanged(View changedView, int visibility)
       description: Called when the visibility of the view or an ancestor of the view has changed.
      - 
       return-value: void
       name: onWindowFocusChanged(boolean hasWindowFocus)
       description: Called when the window containing this view gains or loses focus.
      - 
       return-value: void
       name: onWindowSystemUiVisibilityChanged(int visible)
       description: Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility().
      - 
       return-value: void
       name: onWindowVisibilityChanged(int visibility)
       description: Called when the window containing has change its visibility (between GONE, INVISIBLE, and VISIBLE).
      - 
       return-value: boolean
       name: overScrollBy(int deltaX, int deltaY, int scrollX, int scrollY, int scrollRangeX, int scrollRangeY, int maxOverScrollX, int maxOverScrollY, boolean isTouchEvent)
       description: Scroll the view with standard behavior for scrolling beyond the normal content boundaries.
      - 
       return-value: boolean
       name: performAccessibilityAction(int action, Bundle arguments)
       description: Performs the specified accessibility action on the view.
      - 
       return-value: boolean
       name: performClick()
       description: Call this view's OnClickListener, if it is defined.
      - 
       return-value: boolean
       name: performContextClick(float x, float y)
       description: Call this view's OnContextClickListener, if it is defined.
      - 
       return-value: boolean
       name: performContextClick()
       description: Call this view's OnContextClickListener, if it is defined.
      - 
       return-value: boolean
       name: performHapticFeedback(int feedbackConstant)
       description: BZZZTT!!1!
      - 
       return-value: boolean
       name: performHapticFeedback(int feedbackConstant, int flags)
       description: BZZZTT!!1!
      - 
       return-value: boolean
       name: performLongClick(float x, float y)
       description: Calls this view's OnLongClickListener, if it is defined.
      - 
       return-value: boolean
       name: performLongClick()
       description: Calls this view's OnLongClickListener, if it is defined.
      - 
       return-value: void
       name: playSoundEffect(int soundConstant)
       description: Play a sound effect for this view.
      - 
       return-value: boolean
       name: post(Runnable action)
       description: 
      - 
       return-value: boolean
       name: postDelayed(Runnable action, long delayMillis)
       description: 
      - 
       return-value: void
       name: postInvalidate()
       description: 
      - 
       return-value: void
       name: postInvalidate(int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateDelayed(long delayMilliseconds, int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateDelayed(long delayMilliseconds)
       description: 
      - 
       return-value: void
       name: postInvalidateOnAnimation(int left, int top, int right, int bottom)
       description: 
      - 
       return-value: void
       name: postInvalidateOnAnimation()
       description: 
      - 
       return-value: void
       name: postOnAnimation(Runnable action)
       description: 
      - 
       return-value: void
       name: postOnAnimationDelayed(Runnable action, long delayMillis)
       description: 
      - 
       return-value: void
       name: refreshDrawableState()
       description: Call this to force a view to update its drawable state.
      - 
       return-value: void
       name: releasePointerCapture()
       description: Releases the pointer capture.
      - 
       return-value: boolean
       name: removeCallbacks(Runnable action)
       description: 
      - 
       return-value: void
       name: removeOnAttachStateChangeListener(View.OnAttachStateChangeListener listener)
       description: Remove a listener for attach state changes.
      - 
       return-value: void
       name: removeOnLayoutChangeListener(View.OnLayoutChangeListener listener)
       description: Remove a listener for layout changes.
      - 
       return-value: void
       name: removeOnUnhandledKeyEventListener(View.OnUnhandledKeyEventListener listener)
       description: Removes a listener which will receive unhandled KeyEvents.
      - 
       return-value: void
       name: requestApplyInsets()
       description: Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed.
      - 
       return-value: void
       name: requestFitSystemWindows()
       description: This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions.
      - 
       return-value: final boolean
       name: requestFocus(int direction)
       description: Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.
      - 
       return-value: final boolean
       name: requestFocus()
       description: Call this to try to give focus to a specific view or to one of its descendants.
      - 
       return-value: boolean
       name: requestFocus(int direction, Rect previouslyFocusedRect)
       description: Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
      - 
       return-value: final boolean
       name: requestFocusFromTouch()
       description: Call this to try to give focus to a specific view or to one of its descendants.
      - 
       return-value: void
       name: requestLayout()
       description: Call this when something has changed which has invalidated the layout of this view.
      - 
       return-value: void
       name: requestPointerCapture()
       description: Requests pointer capture mode.
      - 
       return-value: boolean
       name: requestRectangleOnScreen(Rect rectangle)
       description: Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
      - 
       return-value: boolean
       name: requestRectangleOnScreen(Rect rectangle, boolean immediate)
       description: Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough.
      - 
       return-value: final void
       name: requestUnbufferedDispatch(MotionEvent event)
       description: Request unbuffered dispatch of the given stream of MotionEvents to this View.
      - 
       return-value: final <T extends View> T
       name: requireViewById(int id)
       description: Finds the first descendant view with the given ID, the view itself if the ID matches getId(), or throws an IllegalArgumentException if the ID is invalid or there is no matching view in the hierarchy.
      - 
       return-value: void
       name: resetPivot()
       description: Clears any pivot previously set by a call to setPivotX(float) or setPivotY(float).
      - 
       return-value: static int
       name: resolveSize(int size, int measureSpec)
       description: Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result.
      - 
       return-value: static int
       name: resolveSizeAndState(int size, int measureSpec, int childMeasuredState)
       description: Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec.
      - 
       return-value: boolean
       name: restoreDefaultFocus()
       description: Gives focus to the default-focus view in the view hierarchy that has this view as a root.
      - 
       return-value: void
       name: restoreHierarchyState(SparseArray<Parcelable> container)
       description: Restore this view hierarchy's frozen state from the given container.
      - 
       return-value: void
       name: saveHierarchyState(SparseArray<Parcelable> container)
       description: Store this view hierarchy's frozen state into the given container.
      - 
       return-value: void
       name: scheduleDrawable(Drawable who, Runnable what, long when)
       description: Schedules an action on a drawable to occur at a specified time.
      - 
       return-value: void
       name: scrollBy(int x, int y)
       description: Move the scrolled position of your view.
      - 
       return-value: void
       name: scrollTo(int x, int y)
       description: Set the scrolled position of your view.
      - 
       return-value: void
       name: sendAccessibilityEvent(int eventType)
       description: Sends an accessibility event of the given type.
      - 
       return-value: void
       name: sendAccessibilityEventUnchecked(AccessibilityEvent event)
       description: This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled.
      - 
       return-value: void
       name: setAccessibilityDelegate(View.AccessibilityDelegate delegate)
       description: Sets a delegate for implementing accessibility support via composition (as opposed to inheritance).
      - 
       return-value: void
       name: setAccessibilityHeading(boolean isHeading)
       description: Set if view is a heading for a section of content for accessibility purposes.
      - 
       return-value: void
       name: setAccessibilityLiveRegion(int mode)
       description: Sets the live region mode for this view.
      - 
       return-value: void
       name: setAccessibilityPaneTitle(CharSequence accessibilityPaneTitle)
       description: Visually distinct portion of a window with window-like semantics are considered panes for accessibility purposes.
      - 
       return-value: void
       name: setAccessibilityTraversalAfter(int afterId)
       description: Sets the id of a view after which this one is visited in accessibility traversal.
      - 
       return-value: void
       name: setAccessibilityTraversalBefore(int beforeId)
       description: Sets the id of a view before which this one is visited in accessibility traversal.
      - 
       return-value: void
       name: setActivated(boolean activated)
       description: Changes the activated state of this view.
      - 
       return-value: void
       name: setAlpha(float alpha)
       description: Sets the opacity of the view to a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque.
      - 
       return-value: void
       name: setAnimation(Animation animation)
       description: Sets the next animation to play for this view.
      - 
       return-value: void
       name: setAutofillHints(String... autofillHints)
       description: Sets the hints that help an AutofillService determine how to autofill the view with the user's data.
      - 
       return-value: void
       name: setAutofillId(AutofillId id)
       description: Sets the unique, logical identifier of this view in the activity, for autofill purposes.
      - 
       return-value: void
       name: setBackground(Drawable background)
       description: Set the background to a given Drawable, or remove the background.
      - 
       return-value: void
       name: setBackgroundColor(int color)
       description: Sets the background color for this view.
      - 
       return-value: void
       name: setBackgroundDrawable(Drawable background)
       description: This method was deprecated in API level 16. use setBackground(Drawable) instead
      - 
       return-value: void
       name: setBackgroundResource(int resid)
       description: Set the background to a given resource.
      - 
       return-value: void
       name: setBackgroundTintList(ColorStateList tint)
       description: Applies a tint to the background drawable.
      - 
       return-value: void
       name: setBackgroundTintMode(PorterDuff.Mode tintMode)
       description: Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable.
      - 
       return-value: final void
       name: setBottom(int bottom)
       description: Sets the bottom position of this view relative to its parent.
      - 
       return-value: void
       name: setCameraDistance(float distance)
       description: 
      - 
       return-value: void
       name: setClickable(boolean clickable)
       description: Enables or disables click events for this view.
      - 
       return-value: void
       name: setClipBounds(Rect clipBounds)
       description: Sets a rectangular area on this view to which the view will be clipped when it is drawn.
      - 
       return-value: void
       name: setClipToOutline(boolean clipToOutline)
       description: Sets whether the View's Outline should be used to clip the contents of the View.
      - 
       return-value: void
       name: setContentDescription(CharSequence contentDescription)
       description: Sets the View's content description.
      - 
       return-value: void
       name: setContextClickable(boolean contextClickable)
       description: Enables or disables context clicking for this view.
      - 
       return-value: void
       name: setDefaultFocusHighlightEnabled(boolean defaultFocusHighlightEnabled)
       description: Sets whether this View should use a default focus highlight when it gets focused but doesn't have R.attr.state_focused defined in its background.
      - 
       return-value: void
       name: setDrawingCacheBackgroundColor(int color)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDrawingCacheEnabled(boolean enabled)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDrawingCacheQuality(int quality)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setDuplicateParentStateEnabled(boolean enabled)
       description: 
      - 
       return-value: void
       name: setElevation(float elevation)
       description: Sets the base elevation of this view, in pixels.
      - 
       return-value: void
       name: setEnabled(boolean enabled)
       description: Set the enabled state of this view.
      - 
       return-value: void
       name: setFadingEdgeLength(int length)
       description: Set the size of the faded edge used to indicate that more content in this view is available.
      - 
       return-value: void
       name: setFilterTouchesWhenObscured(boolean enabled)
       description: Sets whether the framework should discard touches when the view's window is obscured by another visible window.
      - 
       return-value: void
       name: setFitsSystemWindows(boolean fitSystemWindows)
       description: Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed.
      - 
       return-value: void
       name: setFocusable(boolean focusable)
       description: Set whether this view can receive the focus.
      - 
       return-value: void
       name: setFocusable(int focusable)
       description: Sets whether this view can receive focus.
      - 
       return-value: void
       name: setFocusableInTouchMode(boolean focusableInTouchMode)
       description: Set whether this view can receive focus while in touch mode.
      - 
       return-value: void
       name: setFocusedByDefault(boolean isFocusedByDefault)
       description: Sets whether this View should receive focus when the focus is restored for the view hierarchy containing this view.
      - 
       return-value: void
       name: setForeground(Drawable foreground)
       description: Supply a Drawable that is to be rendered on top of all of the content in the view.
      - 
       return-value: void
       name: setForegroundGravity(int gravity)
       description: Describes how the foreground is positioned.
      - 
       return-value: void
       name: setForegroundTintList(ColorStateList tint)
       description: Applies a tint to the foreground drawable.
      - 
       return-value: void
       name: setForegroundTintMode(PorterDuff.Mode tintMode)
       description: Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the background drawable.
      - 
       return-value: void
       name: setHapticFeedbackEnabled(boolean hapticFeedbackEnabled)
       description: Set whether this view should have haptic feedback for events such as long presses.
      - 
       return-value: void
       name: setHasTransientState(boolean hasTransientState)
       description: Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.
      - 
       return-value: void
       name: setHorizontalFadingEdgeEnabled(boolean horizontalFadingEdgeEnabled)
       description: 
      - 
       return-value: void
       name: setHorizontalScrollBarEnabled(boolean horizontalScrollBarEnabled)
       description: 
      - 
       return-value: void
       name: setHovered(boolean hovered)
       description: Sets whether the view is currently hovered.
      - 
       return-value: void
       name: setId(int id)
       description: Sets the identifier for this view.
      - 
       return-value: void
       name: setImportantForAccessibility(int mode)
       description: Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.
      - 
       return-value: void
       name: setImportantForAutofill(int mode)
       description: Sets the mode for determining whether this view is considered important for autofill.
      - 
       return-value: void
       name: setKeepScreenOn(boolean keepScreenOn)
       description: Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON.
      - 
       return-value: void
       name: setKeyboardNavigationCluster(boolean isCluster)
       description: Set whether this view is a root of a keyboard navigation cluster.
      - 
       return-value: void
       name: setLabelFor(int id)
       description: Sets the id of a view for which this view serves as a label for accessibility purposes.
      - 
       return-value: void
       name: setLayerPaint(Paint paint)
       description: Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE).
      - 
       return-value: void
       name: setLayerType(int layerType, Paint paint)
       description: 
      - 
       return-value: void
       name: setLayoutDirection(int layoutDirection)
       description: Set the layout direction for this view.
      - 
       return-value: void
       name: setLayoutParams(ViewGroup.LayoutParams params)
       description: Set the layout parameters associated with this view.
      - 
       return-value: final void
       name: setLeft(int left)
       description: Sets the left position of this view relative to its parent.
      - 
       return-value: void
       name: setLongClickable(boolean longClickable)
       description: Enables or disables long click events for this view.
      - 
       return-value: final void
       name: setMeasuredDimension(int measuredWidth, int measuredHeight)
       description: 
      - 
       return-value: void
       name: setMinimumHeight(int minHeight)
       description: Sets the minimum height of the view.
      - 
       return-value: void
       name: setMinimumWidth(int minWidth)
       description: Sets the minimum width of the view.
      - 
       return-value: void
       name: setNestedScrollingEnabled(boolean enabled)
       description: Enable or disable nested scrolling for this view.
      - 
       return-value: void
       name: setNextClusterForwardId(int nextClusterForwardId)
       description: Sets the id of the view to use as the root of the next keyboard navigation cluster.
      - 
       return-value: void
       name: setNextFocusDownId(int nextFocusDownId)
       description: Sets the id of the view to use when the next focus is FOCUS_DOWN.
      - 
       return-value: void
       name: setNextFocusForwardId(int nextFocusForwardId)
       description: Sets the id of the view to use when the next focus is FOCUS_FORWARD.
      - 
       return-value: void
       name: setNextFocusLeftId(int nextFocusLeftId)
       description: Sets the id of the view to use when the next focus is FOCUS_LEFT.
      - 
       return-value: void
       name: setNextFocusRightId(int nextFocusRightId)
       description: Sets the id of the view to use when the next focus is FOCUS_RIGHT.
      - 
       return-value: void
       name: setNextFocusUpId(int nextFocusUpId)
       description: Sets the id of the view to use when the next focus is FOCUS_UP.
      - 
       return-value: void
       name: setOnApplyWindowInsetsListener(View.OnApplyWindowInsetsListener listener)
       description: Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view.
      - 
       return-value: void
       name: setOnCapturedPointerListener(View.OnCapturedPointerListener l)
       description: Set a listener to receive callbacks when the pointer capture state of a view changes.
      - 
       return-value: void
       name: setOnClickListener(View.OnClickListener l)
       description: Register a callback to be invoked when this view is clicked.
      - 
       return-value: void
       name: setOnContextClickListener(View.OnContextClickListener l)
       description: Register a callback to be invoked when this view is context clicked.
      - 
       return-value: void
       name: setOnCreateContextMenuListener(View.OnCreateContextMenuListener l)
       description: Register a callback to be invoked when the context menu for this view is being built.
      - 
       return-value: void
       name: setOnDragListener(View.OnDragListener l)
       description: Register a drag event listener callback object for this View.
      - 
       return-value: void
       name: setOnFocusChangeListener(View.OnFocusChangeListener l)
       description: Register a callback to be invoked when focus of this view changed.
      - 
       return-value: void
       name: setOnGenericMotionListener(View.OnGenericMotionListener l)
       description: Register a callback to be invoked when a generic motion event is sent to this view.
      - 
       return-value: void
       name: setOnHoverListener(View.OnHoverListener l)
       description: Register a callback to be invoked when a hover event is sent to this view.
      - 
       return-value: void
       name: setOnKeyListener(View.OnKeyListener l)
       description: Register a callback to be invoked when a hardware key is pressed in this view.
      - 
       return-value: void
       name: setOnLongClickListener(View.OnLongClickListener l)
       description: Register a callback to be invoked when this view is clicked and held.
      - 
       return-value: void
       name: setOnScrollChangeListener(View.OnScrollChangeListener l)
       description: Register a callback to be invoked when the scroll X or Y positions of this view change.
      - 
       return-value: void
       name: setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener l)
       description: Set a listener to receive callbacks when the visibility of the system bar changes.
      - 
       return-value: void
       name: setOnTouchListener(View.OnTouchListener l)
       description: Register a callback to be invoked when a touch event is sent to this view.
      - 
       return-value: void
       name: setOutlineAmbientShadowColor(int color)
       description: Sets the color of the ambient shadow that is drawn when the view has a positive Z or elevation value.
      - 
       return-value: void
       name: setOutlineProvider(ViewOutlineProvider provider)
       description: Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping.
      - 
       return-value: void
       name: setOutlineSpotShadowColor(int color)
       description: Sets the color of the spot shadow that is drawn when the view has a positive Z or elevation value.
      - 
       return-value: void
       name: setOverScrollMode(int overScrollMode)
       description: Set the over-scroll mode for this view.
      - 
       return-value: void
       name: setPadding(int left, int top, int right, int bottom)
       description: Sets the padding.
      - 
       return-value: void
       name: setPaddingRelative(int start, int top, int end, int bottom)
       description: Sets the relative padding.
      - 
       return-value: void
       name: setPivotX(float pivotX)
       description: Sets the x location of the point around which the view is rotated and scaled.
      - 
       return-value: void
       name: setPivotY(float pivotY)
       description: Sets the y location of the point around which the view is rotated and scaled.
      - 
       return-value: void
       name: setPointerIcon(PointerIcon pointerIcon)
       description: Set the pointer icon for the current view.
      - 
       return-value: void
       name: setPressed(boolean pressed)
       description: Sets the pressed state for this view.
      - 
       return-value: final void
       name: setRevealOnFocusHint(boolean revealOnFocus)
       description: Sets this view's preference for reveal behavior when it gains focus.
      - 
       return-value: final void
       name: setRight(int right)
       description: Sets the right position of this view relative to its parent.
      - 
       return-value: void
       name: setRotation(float rotation)
       description: Sets the degrees that the view is rotated around the pivot point.
      - 
       return-value: void
       name: setRotationX(float rotationX)
       description: Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
      - 
       return-value: void
       name: setRotationY(float rotationY)
       description: Sets the degrees that the view is rotated around the vertical axis through the pivot point.
      - 
       return-value: void
       name: setSaveEnabled(boolean enabled)
       description: Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called).
      - 
       return-value: void
       name: setSaveFromParentEnabled(boolean enabled)
       description: Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
      - 
       return-value: void
       name: setScaleX(float scaleX)
       description: Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: void
       name: setScaleY(float scaleY)
       description: Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width.
      - 
       return-value: void
       name: setScreenReaderFocusable(boolean screenReaderFocusable)
       description: When screen readers (one type of accessibility tool) decide what should be read to the user, they typically look for input focusable (isFocusable()) parents of non-focusable text items, and read those focusable parents and their non-focusable children as a unit.
      - 
       return-value: void
       name: setScrollBarDefaultDelayBeforeFade(int scrollBarDefaultDelayBeforeFade)
       description: Define the delay before scrollbars fade.
      - 
       return-value: void
       name: setScrollBarFadeDuration(int scrollBarFadeDuration)
       description: Define the scrollbar fade duration.
      - 
       return-value: void
       name: setScrollBarSize(int scrollBarSize)
       description: Define the scrollbar size.
      - 
       return-value: void
       name: setScrollBarStyle(int style)
       description: 
      - 
       return-value: void
       name: setScrollContainer(boolean isScrollContainer)
       description: Change whether this view is one of the set of scrollable containers in its window.
      - 
       return-value: void
       name: setScrollIndicators(int indicators, int mask)
       description: Sets the state of the scroll indicators specified by the mask.
      - 
       return-value: void
       name: setScrollIndicators(int indicators)
       description: Sets the state of all scroll indicators.
      - 
       return-value: void
       name: setScrollX(int value)
       description: Set the horizontal scrolled position of your view.
      - 
       return-value: void
       name: setScrollY(int value)
       description: Set the vertical scrolled position of your view.
      - 
       return-value: void
       name: setScrollbarFadingEnabled(boolean fadeScrollbars)
       description: Define whether scrollbars will fade when the view is not scrolling.
      - 
       return-value: void
       name: setSelected(boolean selected)
       description: Changes the selection state of this view.
      - 
       return-value: void
       name: setSoundEffectsEnabled(boolean soundEffectsEnabled)
       description: Set whether this view should have sound effects enabled for events such as clicking and touching.
      - 
       return-value: void
       name: setStateListAnimator(StateListAnimator stateListAnimator)
       description: Attaches the provided StateListAnimator to this View.
      - 
       return-value: void
       name: setSystemUiVisibility(int visibility)
       description: Request that the visibility of the status bar or other screen/window decorations be changed.
      - 
       return-value: void
       name: setTag(int key, Object tag)
       description: Sets a tag associated with this view and a key.
      - 
       return-value: void
       name: setTag(Object tag)
       description: Sets the tag associated with this view.
      - 
       return-value: void
       name: setTextAlignment(int textAlignment)
       description: Set the text alignment.
      - 
       return-value: void
       name: setTextDirection(int textDirection)
       description: Set the text direction.
      - 
       return-value: void
       name: setTooltipText(CharSequence tooltipText)
       description: Sets the tooltip text which will be displayed in a small popup next to the view.
      - 
       return-value: final void
       name: setTop(int top)
       description: Sets the top position of this view relative to its parent.
      - 
       return-value: void
       name: setTouchDelegate(TouchDelegate delegate)
       description: Sets the TouchDelegate for this View.
      - 
       return-value: final void
       name: setTransitionName(String transitionName)
       description: Sets the name of the View to be used to identify Views in Transitions.
      - 
       return-value: void
       name: setTranslationX(float translationX)
       description: Sets the horizontal location of this view relative to its left position.
      - 
       return-value: void
       name: setTranslationY(float translationY)
       description: Sets the vertical location of this view relative to its top position.
      - 
       return-value: void
       name: setTranslationZ(float translationZ)
       description: Sets the depth location of this view relative to its elevation.
      - 
       return-value: void
       name: setVerticalFadingEdgeEnabled(boolean verticalFadingEdgeEnabled)
       description: 
      - 
       return-value: void
       name: setVerticalScrollBarEnabled(boolean verticalScrollBarEnabled)
       description: 
      - 
       return-value: void
       name: setVerticalScrollbarPosition(int position)
       description: Set the position of the vertical scroll bar.
      - 
       return-value: void
       name: setVisibility(int visibility)
       description: Set the visibility state of this view.
      - 
       return-value: void
       name: setWillNotCacheDrawing(boolean willNotCacheDrawing)
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: void
       name: setWillNotDraw(boolean willNotDraw)
       description: If this view doesn't do any drawing on its own, set this flag to allow further optimizations.
      - 
       return-value: void
       name: setX(float x)
       description: Sets the visual x position of this view, in pixels.
      - 
       return-value: void
       name: setY(float y)
       description: Sets the visual y position of this view, in pixels.
      - 
       return-value: void
       name: setZ(float z)
       description: Sets the visual z position of this view, in pixels.
      - 
       return-value: boolean
       name: showContextMenu()
       description: Shows the context menu for this view.
      - 
       return-value: boolean
       name: showContextMenu(float x, float y)
       description: Shows the context menu for this view anchored to the specified view-relative coordinate.
      - 
       return-value: ActionMode
       name: startActionMode(ActionMode.Callback callback, int type)
       description: Start an action mode with the given type.
      - 
       return-value: ActionMode
       name: startActionMode(ActionMode.Callback callback)
       description: Start an action mode with the default type ActionMode.TYPE_PRIMARY.
      - 
       return-value: void
       name: startAnimation(Animation animation)
       description: Start the specified animation now.
      - 
       return-value: final boolean
       name: startDrag(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)
       description: This method was deprecated in API level 24. Use startDragAndDrop() for newer platform versions.
      - 
       return-value: final boolean
       name: startDragAndDrop(ClipData data, View.DragShadowBuilder shadowBuilder, Object myLocalState, int flags)
       description: Starts a drag and drop operation.
      - 
       return-value: boolean
       name: startNestedScroll(int axes)
       description: Begin a nestable scroll operation along the given axes.
      - 
       return-value: void
       name: stopNestedScroll()
       description: Stop a nested scroll in progress.
      - 
       return-value: String
       name: toString()
       description: Returns a string representation of the object.
      - 
       return-value: void
       name: unscheduleDrawable(Drawable who, Runnable what)
       description: Cancels a scheduled action on a drawable.
      - 
       return-value: void
       name: unscheduleDrawable(Drawable who)
       description: Unschedule any events associated with the given Drawable.
      - 
       return-value: final void
       name: updateDragShadow(View.DragShadowBuilder shadowBuilder)
       description: Updates the drag shadow for the ongoing drag and drop operation.
      - 
       return-value: boolean
       name: verifyDrawable(Drawable who)
       description: If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying.
      - 
       return-value: boolean
       name: willNotCacheDrawing()
       description: This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration, intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful, such as for alpha animations, setLayerType(int, Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps, real-time shadows, and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
      - 
       return-value: boolean
       name: willNotDraw()
       description: Returns whether or not this View draws on its own.
  name: java.lang.Object
     method: 
      - 
       return-value: Object
       name: clone()
       description: Creates and returns a copy of this object.
      - 
       return-value: boolean
       name: equals(Object obj)
       description: Indicates whether some other object is "equal to" this one.
      - 
       return-value: void
       name: finalize()
       description: Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
      - 
       return-value: final Class<?>
       name: getClass()
       description: Returns the runtime class of this Object.
      - 
       return-value: int
       name: hashCode()
       description: Returns a hash code value for the object.
      - 
       return-value: final void
       name: notify()
       description: Wakes up a single thread that is waiting on this object's monitor.
      - 
       return-value: final void
       name: notifyAll()
       description: Wakes up all threads that are waiting on this object's monitor.
      - 
       return-value: String
       name: toString()
       description: Returns a string representation of the object.
      - 
       return-value: final void
       name: wait(long millis, int nanos)
       description: Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object, or some other thread interrupts the current thread, or a certain amount of real time has elapsed.
      - 
       return-value: final void
       name: wait(long millis)
       description: Causes the current thread to wait until either another thread invokes the notify() method or the notifyAll() method for this object, or a specified amount of time has elapsed.
      - 
       return-value: final void
       name: wait()
       description: Causes the current thread to wait until another thread invokes the notify() method or the notifyAll() method for this object.
  name: android.view.ViewParent
     method: 
      - 
       return-value: abstract void
       name: bringChildToFront(View child)
       description: Change the z order of the child so it's on top of all other children.
      - 
       return-value: abstract boolean
       name: canResolveLayoutDirection()
       description: Tells if this view parent can resolve the layout direction.
      - 
       return-value: abstract boolean
       name: canResolveTextAlignment()
       description: Tells if this view parent can resolve the text alignment.
      - 
       return-value: abstract boolean
       name: canResolveTextDirection()
       description: Tells if this view parent can resolve the text direction.
      - 
       return-value: abstract void
       name: childDrawableStateChanged(View child)
       description: This method is called on the parent when a child's drawable state has changed.
      - 
       return-value: abstract void
       name: childHasTransientStateChanged(View child, boolean hasTransientState)
       description: Called when a child view now has or no longer is tracking transient state.
      - 
       return-value: abstract void
       name: clearChildFocus(View child)
       description: Called when a child of this parent is giving up focus
      - 
       return-value: abstract void
       name: createContextMenu(ContextMenu menu)
       description: Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent).
      - 
       return-value: abstract View
       name: focusSearch(View v, int direction)
       description: Find the nearest view in the specified direction that wants to take focus
      - 
       return-value: abstract void
       name: focusableViewAvailable(View v)
       description: Tells the parent that a new focusable view has become available.
      - 
       return-value: abstract boolean
       name: getChildVisibleRect(View child, Rect r, Point offset)
       description: Compute the visible part of a rectangular region defined in terms of a child view's coordinates.
      - 
       return-value: abstract int
       name: getLayoutDirection()
       description: Return this view parent layout direction.
      - 
       return-value: abstract ViewParent
       name: getParent()
       description: Returns the parent if it exists, or null.
      - 
       return-value: abstract ViewParent
       name: getParentForAccessibility()
       description: Gets the parent of a given View for accessibility.
      - 
       return-value: abstract int
       name: getTextAlignment()
       description: Return this view parent text alignment.
      - 
       return-value: abstract int
       name: getTextDirection()
       description: Return this view parent text direction.
      - 
       return-value: abstract void
       name: invalidateChild(View child, Rect r)
       description: This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead.
      - 
       return-value: abstract ViewParent
       name: invalidateChildInParent(int[] location, Rect r)
       description: This method was deprecated in API level 26. Use onDescendantInvalidated(View, View) instead.
      - 
       return-value: abstract boolean
       name: isLayoutDirectionResolved()
       description: Tells if this view parent layout direction is resolved.
      - 
       return-value: abstract boolean
       name: isLayoutRequested()
       description: Indicates whether layout was requested on this view parent.
      - 
       return-value: abstract boolean
       name: isTextAlignmentResolved()
       description: Tells if this view parent text alignment is resolved.
      - 
       return-value: abstract boolean
       name: isTextDirectionResolved()
       description: Tells if this view parent text direction is resolved.
      - 
       return-value: abstract View
       name: keyboardNavigationClusterSearch(View currentCluster, int direction)
       description: Find the nearest keyboard navigation cluster in the specified direction.
      - 
       return-value: abstract void
       name: notifySubtreeAccessibilityStateChanged(View child, View source, int changeType)
       description: Notifies a view parent that the accessibility state of one of its descendants has changed and that the structure of the subtree is different.
      - 
       return-value: default void
       name: onDescendantInvalidated(View child, View target)
       description: The target View has been invalidated, or has had a drawing property changed that requires the hierarchy to re-render.
      - 
       return-value: abstract boolean
       name: onNestedFling(View target, float velocityX, float velocityY, boolean consumed)
       description: Request a fling from a nested scroll.
      - 
       return-value: abstract boolean
       name: onNestedPreFling(View target, float velocityX, float velocityY)
       description: React to a nested fling before the target view consumes it.
      - 
       return-value: abstract boolean
       name: onNestedPrePerformAccessibilityAction(View target, int action, Bundle arguments)
       description: React to an accessibility action delegated by a target descendant view before the target processes it.
      - 
       return-value: abstract void
       name: onNestedPreScroll(View target, int dx, int dy, int[] consumed)
       description: React to a nested scroll in progress before the target view consumes a portion of the scroll.
      - 
       return-value: abstract void
       name: onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed)
       description: React to a nested scroll in progress.
      - 
       return-value: abstract void
       name: onNestedScrollAccepted(View child, View target, int nestedScrollAxes)
       description: React to the successful claiming of a nested scroll operation.
      - 
       return-value: abstract boolean
       name: onStartNestedScroll(View child, View target, int nestedScrollAxes)
       description: React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate.
      - 
       return-value: abstract void
       name: onStopNestedScroll(View target)
       description: React to a nested scroll operation ending.
      - 
       return-value: abstract void
       name: recomputeViewAttributes(View child)
       description: Tell view hierarchy that the global view attributes need to be re-evaluated.
      - 
       return-value: abstract void
       name: requestChildFocus(View child, View focused)
       description: Called when a child of this parent wants focus
      - 
       return-value: abstract boolean
       name: requestChildRectangleOnScreen(View child, Rect rectangle, boolean immediate)
       description: Called when a child of this group wants a particular rectangle to be positioned onto the screen.
      - 
       return-value: abstract void
       name: requestDisallowInterceptTouchEvent(boolean disallowIntercept)
       description: Called when a child does not want this parent and its ancestors to intercept touch events with ViewGroup.onInterceptTouchEvent(MotionEvent).
      - 
       return-value: abstract void
       name: requestFitSystemWindows()
       description: Ask that a new dispatch of View.fitSystemWindows(Rect) be performed.
      - 
       return-value: abstract void
       name: requestLayout()
       description: Called when something has changed which has invalidated the layout of a child of this view parent.
      - 
       return-value: abstract boolean
       name: requestSendAccessibilityEvent(View child, AccessibilityEvent event)
       description: Called by a child to request from its parent to send an AccessibilityEvent.
      - 
       return-value: abstract void
       name: requestTransparentRegion(View child)
       description: Called when a child wants the view hierarchy to gather and report transparent regions to the window compositor.
      - 
       return-value: abstract boolean
       name: showContextMenuForChild(View originalView)
       description: Shows the context menu for the specified view or its ancestors.
      - 
       return-value: abstract boolean
       name: showContextMenuForChild(View originalView, float x, float y)
       description: Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate.
      - 
       return-value: abstract ActionMode
       name: startActionModeForChild(View originalView, ActionMode.Callback callback, int type)
       description: Start an action mode of a specific type for the specified view.
      - 
       return-value: abstract ActionMode
       name: startActionModeForChild(View originalView, ActionMode.Callback callback)
       description: Start an action mode for the specified view with the default type ActionMode.TYPE_PRIMARY.
  name: android.view.ViewManager
     method: 
      - 
       return-value: abstract void
       name: addView(View view, ViewGroup.LayoutParams params)
       description: Assign the passed LayoutParams to the passed View and add the view to the window.
      - 
       return-value: abstract void
       name: removeView(View view)
      - 
       return-value: abstract void
       name: updateViewLayout(View view, ViewGroup.LayoutParams params)
  name: android.graphics.drawable.Drawable.Callback
     method: 
      - 
       return-value: abstract void
       name: invalidateDrawable(Drawable who)
       description: Called when the drawable needs to be redrawn.
      - 
       return-value: abstract void
       name: scheduleDrawable(Drawable who, Runnable what, long when)
       description: A Drawable can call this to schedule the next frame of its animation.
      - 
       return-value: abstract void
       name: unscheduleDrawable(Drawable who, Runnable what)
       description: A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long).
  name: android.view.KeyEvent.Callback
     method: 
      - 
       return-value: abstract boolean
       name: onKeyDown(int keyCode, KeyEvent event)
       description: Called when a key down event has occurred.
      - 
       return-value: abstract boolean
       name: onKeyLongPress(int keyCode, KeyEvent event)
       description: Called when a long press has occurred.
      - 
       return-value: abstract boolean
       name: onKeyMultiple(int keyCode, int count, KeyEvent event)
       description: Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession.
      - 
       return-value: abstract boolean
       name: onKeyUp(int keyCode, KeyEvent event)
       description: Called when a key up event has occurred.
  name: android.view.accessibility.AccessibilityEventSource
     method: 
      - 
       return-value: abstract void
       name: sendAccessibilityEvent(int eventType)
       description: Handles the request for sending an AccessibilityEvent given the event type.
      - 
       return-value: abstract void
       name: sendAccessibilityEventUnchecked(AccessibilityEvent event)
       description: Handles the request for sending an AccessibilityEvent.
 public_constructors: 
  method: 
   - 
    name: TableLayout(Context context)
    description: 
   - 
    name: TableLayout(Context context, AttributeSet attrs)
    description: 
 public_methods: 
  method: 
   - 
    return-value: void
    name: addView(View child, int index)
    description: Adds a child view.
   - 
    return-value: void
    name: addView(View child, ViewGroup.LayoutParams params)
    description: Adds a child view with the specified layout parameters.
   - 
    return-value: void
    name: addView(View child)
    description: 
   - 
    return-value: void
    name: addView(View child, int index, ViewGroup.LayoutParams params)
    description: Adds a child view with the specified layout parameters.
   - 
    return-value: TableLayout.LayoutParams
    name: generateLayoutParams(AttributeSet attrs)
    description: Returns a new set of layout parameters based on the supplied attributes set.
   - 
    return-value: CharSequence
    name: getAccessibilityClassName()
    description: Return the class name of this object to be used for accessibility purposes.
   - 
    return-value: boolean
    name: isColumnCollapsed(int columnIndex)
    description: 
   - 
    return-value: boolean
    name: isColumnShrinkable(int columnIndex)
    description: 
   - 
    return-value: boolean
    name: isColumnStretchable(int columnIndex)
    description: 
   - 
    return-value: boolean
    name: isShrinkAllColumns()
    description: 
   - 
    return-value: boolean
    name: isStretchAllColumns()
    description: 
   - 
    return-value: void
    name: requestLayout()
    description: Call this when something has changed which has invalidated the layout of this view.
   - 
    return-value: void
    name: setColumnCollapsed(int columnIndex, boolean isCollapsed)
    description: 
   - 
    return-value: void
    name: setColumnShrinkable(int columnIndex, boolean isShrinkable)
    description: 
   - 
    return-value: void
    name: setColumnStretchable(int columnIndex, boolean isStretchable)
    description: 
   - 
    return-value: void
    name: setOnHierarchyChangeListener(ViewGroup.OnHierarchyChangeListener listener)
    description: Register a callback to be invoked when a child is added to or removed from this view.
   - 
    return-value: void
    name: setShrinkAllColumns(boolean shrinkAllColumns)
    description: 
   - 
    return-value: void
    name: setStretchAllColumns(boolean stretchAllColumns)
    description: 
 api-section: 
  api: 
   - 
    name: TableLayout
    api_level: API level 1
    api_signature: public TableLayout (Context context)
    description: 
     parameters: 
      parameter: 
       - 
        name: context
        description: Context: the application environment
   - 
    name: TableLayout
    api_level: API level 1
    api_signature: public TableLayout (Context context, 
                AttributeSet attrs)
    description: 
     parameters: 
      parameter: 
       - 
        name: context
        description: Context: the application environment
       - 
        name: attrs
        description: AttributeSet: a collection of attributes
   - 
    name: addView
    api_level: API level 1
    api_signature: public void addView (View child, 
                int index)
    description: Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child.
     parameters: 
      parameter: 
       - 
        name: child
        description: View: the child view to add
       - 
        name: index
        description: int: the position at which to add the child
   - 
    name: addView
    api_level: API level 1
    api_signature: public void addView (View child, 
                ViewGroup.LayoutParams params)
    description: Adds a child view with the specified layout parameters.
     parameters: 
      parameter: 
       - 
        name: child
        description: View: the child view to add
       - 
        name: params
        description: ViewGroup.LayoutParams: the layout parameters to set on the child
   - 
    name: addView
    api_level: API level 1
    api_signature: public void addView (View child)
    description: 
     parameters: 
      parameter: 
       - 
        name: child
        description: View: the child view to add
   - 
    name: addView
    api_level: API level 1
    api_signature: public void addView (View child, 
                int index, 
                ViewGroup.LayoutParams params)
    description: Adds a child view with the specified layout parameters.
     parameters: 
      parameter: 
       - 
        name: child
        description: View: the child view to add
       - 
        name: index
        description: int: the position at which to add the child or -1 to add last
       - 
        name: params
        description: ViewGroup.LayoutParams: the layout parameters to set on the child
   - 
    name: generateLayoutParams
    api_level: API level 1
    api_signature: public TableLayout.LayoutParams generateLayoutParams (AttributeSet attrs)
    description: Returns a new set of layout parameters based on the supplied attributes set.
     parameters: 
      parameter: 
       - 
        name: attrs
        description: AttributeSet: the attributes to build the layout parameters from
       - 
        name: TableLayout.LayoutParams
        description: an instance of ViewGroup.LayoutParams or one of its descendants
   - 
    name: getAccessibilityClassName
    api_level: API level 23
    api_signature: public CharSequence getAccessibilityClassName ()
    description: Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in AccessibilityNodeInfo.setClassName.
     parameters: 
      parameter: 
       - 
        name: CharSequence
        description: 
   - 
    name: isColumnCollapsed
    api_level: API level 1
    api_signature: public boolean isColumnCollapsed (int columnIndex)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: boolean
        description: true if the column is collapsed, false otherwise
   - 
    name: isColumnShrinkable
    api_level: API level 1
    api_signature: public boolean isColumnShrinkable (int columnIndex)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: boolean
        description: true if the column is shrinkable, false otherwise. Default is false.
   - 
    name: isColumnStretchable
    api_level: API level 1
    api_signature: public boolean isColumnStretchable (int columnIndex)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: boolean
        description: true if the column is stretchable, false otherwise
   - 
    name: isShrinkAllColumns
    api_level: API level 1
    api_signature: public boolean isShrinkAllColumns ()
    description: 
     parameters: 
      parameter: 
       - 
        name: boolean
        description: true if all columns are shrinkable, false otherwise
   - 
    name: isStretchAllColumns
    api_level: API level 1
    api_signature: public boolean isStretchAllColumns ()
    description: 
     parameters: 
      parameter: 
       - 
        name: boolean
        description: true if all columns are stretchable, false otherwise
   - 
    name: requestLayout
    api_level: API level 1
    api_signature: public void requestLayout ()
    description: Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (isInLayout(). If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs.
   - 
    name: setColumnCollapsed
    api_level: API level 1
    api_signature: public void setColumnCollapsed (int columnIndex, 
                boolean isCollapsed)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: isCollapsed
        description: boolean: true if the column must be collapsed, false otherwise
   - 
    name: setColumnShrinkable
    api_level: API level 1
    api_signature: public void setColumnShrinkable (int columnIndex, 
                boolean isShrinkable)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: isShrinkable
        description: boolean: true if the column must be shrinkable, false otherwise. Default is false.
   - 
    name: setColumnStretchable
    api_level: API level 1
    api_signature: public void setColumnStretchable (int columnIndex, 
                boolean isStretchable)
    description: 
     parameters: 
      parameter: 
       - 
        name: columnIndex
        description: int: the index of the column
       - 
        name: isStretchable
        description: boolean: true if the column must be stretchable, false otherwise. Default is false.
   - 
    name: setOnHierarchyChangeListener
    api_level: API level 1
    api_signature: public void setOnHierarchyChangeListener (ViewGroup.OnHierarchyChangeListener listener)
    description: Register a callback to be invoked when a child is added to or removed from this view.
     parameters: 
      parameter: 
       - 
        name: listener
        description: ViewGroup.OnHierarchyChangeListener: the callback to invoke on hierarchy change
   - 
    name: setShrinkAllColumns
    api_level: API level 1
    api_signature: public void setShrinkAllColumns (boolean shrinkAllColumns)
    description: 
     parameters: 
      parameter: 
       - 
        name: shrinkAllColumns
        description: boolean: true to mark all columns shrinkable
   - 
    name: setStretchAllColumns
    api_level: API level 1
    api_signature: public void setStretchAllColumns (boolean stretchAllColumns)
    description: 
     parameters: 
      parameter: 
       - 
        name: stretchAllColumns
        description: boolean: true to mark all columns stretchable
   - 
    name: checkLayoutParams
    api_level: API level 1
    api_signature: protected boolean checkLayoutParams (ViewGroup.LayoutParams p)
    description: 
     parameters: 
      parameter: 
       - 
        name: p
        description: ViewGroup.LayoutParams
       - 
        name: boolean
        description: 
   - 
    name: generateDefaultLayoutParams
    api_level: API level 1
    api_signature: protected LinearLayout.LayoutParams generateDefaultLayoutParams ()
    description: Returns a set of layout parameters with a width of ViewGroup.LayoutParams.MATCH_PARENT, and a height of ViewGroup.LayoutParams.WRAP_CONTENT.
     parameters: 
      parameter: 
       - 
        name: LinearLayout.LayoutParams
        description: a set of default layout parameters or null
   - 
    name: generateLayoutParams
    api_level: API level 1
    api_signature: protected LinearLayout.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)
    description: Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of checkLayoutParams(android.view.ViewGroup.LayoutParams), this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.
     parameters: 
      parameter: 
       - 
        name: p
        description: ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup.
       - 
        name: LinearLayout.LayoutParams
        description: an instance of ViewGroup.LayoutParams or one of its descendants
   - 
    name: onLayout
    api_level: API level 1
    api_signature: protected void onLayout (boolean changed, 
                int l, 
                int t, 
                int r, 
                int b)
    description: Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.
     parameters: 
      parameter: 
       - 
        name: changed
        description: boolean: This is a new size or position for this view
       - 
        name: l
        description: int: Left position, relative to parent
       - 
        name: t
        description: int: Top position, relative to parent
       - 
        name: r
        description: int: Right position, relative to parent
       - 
        name: b
        description: int: Bottom position, relative to parent
   - 
    name: onMeasure
    api_level: API level 1
    api_signature: protected void onMeasure (int widthMeasureSpec, 
                int heightMeasureSpec)
    description: 
     parameters: 
      parameter: 
       - 
        name: widthMeasureSpec
        description: int: horizontal space requirements as imposed by the parent. The requirements are encoded with View.MeasureSpec.
       - 
        name: heightMeasureSpec
        description: int: vertical space requirements as imposed by the parent. The requirements are encoded with View.MeasureSpec.