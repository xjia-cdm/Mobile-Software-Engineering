<api>
 <title>UIStackView</title>
 <description>A streamlined interface for laying out a collection of views in either a column or a row.</description>
 <overview>
 <description>Stack views let you leverage the power of Auto Layout, creating user interfaces that can dynamically adapt to the device’s orientation, screen size, and any changes in the available space. The stack view manages the layout of all the views in its arrangedSubviews property. These views are arranged along the stack view’s axis, based on their order in the arrangedSubviews array. The exact layout varies depending on the stack view’s axis, distribution, alignment, spacing, and other properties.</description>
 <sub_overview>
 <name>Stack View and Auto Layout</name>
 <description>The stack view uses Auto Layout to position and size its arranged views. The stack view aligns the first and last arranged view with its edges along the stack’s axis. In a horizontal stack, this means the first arranged view’s leading edge is pinned to the stack’s leading edge, and the last arranged view’s trailing edge is pinned to the stack’s trailing edge. In vertical stacks, the top and bottom edges are pinned, to the stack’s top and bottom edges respectively. If you set the stack view’s isLayoutMarginsRelativeArrangement property to true, the stack view pins its content to the relevant margin instead of its edge. For all distributions except the UIStackView.Distribution.fillEqually distribution, the stack view uses each arranged view’s intrinsicContentSize property when calculating its size along the stack’s axis. UIStackView.Distribution.fillEqually resizes all the arranged views so they are the same size, filling the stack view along its axis. If possible, the stack view stretches all the arranged views to match the view with the longest intrinsic size along the stack’s axis. For all alignments except the UIStackView.Alignment.fill alignment, the stack view uses each arranged view’s intrinsicContentSize property when calculating its size perpendicular to the stack’s axis. UIStackView.Alignment.fill resizes all the arranged views so that they fill the stack view perpendicularly to its axis. If possible, the stack view stretches all the arranged views to match the view with the largest intrinsic size perpendicular to the stack’s axis. Figure 2 Stack view</description>
 </sub_overview>
 <sub_overview>
 <name>Managing the Stack View’s Appearance</name>
 <description>The UIStackView is a nonrendering subclass of UIView; that is, it does not provide any user interface of its own. Instead, it just manages the position and size of its arranged views. As a result, some properties (like backgroundColor) have no effect on the stack view. Similarly, you cannot override layerClass, draw(_:), or draw(_:in:). There are a number of properties that define how the stack view lays out its content. The axis property determines the stack’s orientation, either vertically or horizontally. The distribution property determines the layout of the arranged views along the stack’s axis. The alignment property determines the layout of the arranged views perpendicular to the stack’s axis. The spacing property determines the minimum spacing between arranged views. The isBaselineRelativeArrangement property determines whether the vertical spacing between views is measured from the baselines. The isLayoutMarginsRelativeArrangement property determines whether the stack view lays out its arranged views relative to its layout margins. Typically, you use a single stack view to lay out a small number of items. You can build more complex view hierarchies by nesting stack views inside other stack views. For example, Figure 7 shows a vertical stack view containing two horizontal stack views. Each of the horizontal stack view contains a label and a text field. Figure 7 Nested stack views You can also fine tune an arranged view’s appearance by adding additional constraints to the arranged view. For example, you can use constraints to set a minimum or maximum height or width for the view. Or you can define an aspect ratio for the view. The stack view uses these constraints when laying out its content. For example, in the image view has an aspect ratio constraint that enforces a constant aspect ratio as the image is resized. Note Be careful to avoid introducing conflicts when adding constraints to views inside a stack view. As a general rule of thumb, if a view’s size defaults back to its intrinsic content size for a given dimension, you can safely add a constraint for that dimension.</description>
 </sub_overview>
 <sub_overview>
 <name>Maintaining Consistency Between the Arranged Views and Subviews</name>
 <description>The stack view ensures that its arrangedSubviews property is always a subset of its subviews property. Specifically, the stack view enforces the following rules: When the stack view adds a view to its arrangedSubviews array, it also adds that view as a subview, if it isn’t already. When a subview is removed from the stack view, the stack view also removes it from the arrangedSubviews array. Removing a view from the arrangedSubviews array does not remove it as a subview. The stack view no longer manages the view’s size and position, but the view is still part of the view hierarchy, and is rendered on screen if it is visible. Although the arrangedSubviews array always contains a subset of the subviews array, the order of these arrays remain independent. The order of the arrangedSubviews array defines the order in which views appear in the stack. For horizontal stacks, the views are laid out in reading order, with the lower index views appearing before the higher index views. In English, for example, the views are laid out in order from left to right. For vertical stacks, the views are laid out from top to bottom, with the lower index views above the higher index views. The order of the subviews array defines the Z-order of the subviews. If the views overlap, subviews with a lower index appear behind subviews with a higher index.</description>
 </sub_overview>
 <sub_overview>
 <name>Dynamically Changing the Stack View’s Content</name>
 <description>The stack view automatically updates its layout whenever views are added, removed or inserted into the arrangedSubviews array, or whenever one of the arranged subviews’s isHidden property changes. // Appears to remove the first arranged view from the stack.
// The view is still inside the stack, it&amp;apos;s just no longer visible, and no longer contributes to the layout.
let firstView = stackView.arrangedSubviews[0]
firstView.isHidden = true
 The stack view also automatically responds to changes to any of its properties. For example, you can dynamically change the stack’s orientation, by updating the stack view’s axis property. // Toggle between a vertical and horizontal stack
if stackView.axis == .Horizontal {
    stackView.axis = .Vertical
}
else {
    stackView.axis = .Horizontal
}
 You can animate both changes to the arranged subview’s isHidden property and changes to the stack view’s properties by placing these changes inside an animation block. // Animates removing the first item in the stack.
UIView.animateWithDuration(0.25) { () -&amp;gt; Void in
    let firstView = stackView.arrangedSubviews[0]
    firstView.isHidden = true
}
 Finally, you can define size-class specific values for many of the stack view’s properties directly in Interface Builder. The system automatically animates these changes whenever the stack view’s size class changes.</description>
 </sub_overview>
 </overview>
 <topics>
 <topic>
 <title>Initializing a Stack View</title>
 <method>
 <name>init(arrangedSubviews: [UIView])</name>
 <description>Returns a new stack view object that manages the provided views.</description>
 </method>
 <method>
 <name>init(frame: CGRect)</name>
 </method>
 <method>
 <name>init(coder: NSCoder)</name>
 </method>
 </topic>
 <topic>
 <title>Managing Arranged Subviews</title>
 <method>
 <name>func addArrangedSubview(UIView)</name>
 <description>Adds a view to the end of the arrangedSubviews array.</description>
 </method>
 <method>
 <name>var arrangedSubviews: [UIView]</name>
 <description>The list of views arranged by the stack view.</description>
 </method>
 <method>
 <name>func insertArrangedSubview(UIView, at: Int)</name>
 <description>Adds the provided view to the array of arranged subviews at the specified index.</description>
 </method>
 <method>
 <name>func removeArrangedSubview(UIView)</name>
 <description>Removes the provided view from the stack’s array of arranged subviews.</description>
 </method>
 </topic>
 <topic>
 <title>Configuring The Layout</title>
 <method>
 <name>var alignment: UIStackView.Alignment</name>
 <description>The alignment of the arranged subviews perpendicular to the stack view’s axis.</description>
 </method>
 <method>
 <name>var axis: NSLayoutConstraint.Axis</name>
 <description>The axis along which the arranged views are laid out.</description>
 </method>
 <method>
 <name>var isBaselineRelativeArrangement: Bool</name>
 <description>A Boolean value that determines whether the vertical spacing between views is measured from their baselines.</description>
 </method>
 <method>
 <name>var distribution: UIStackView.Distribution</name>
 <description>The distribution of the arranged views along the stack view’s axis.</description>
 </method>
 <method>
 <name>var isLayoutMarginsRelativeArrangement: Bool</name>
 <description>A Boolean value that determines whether the stack view lays out its arranged views relative to its layout margins.</description>
 </method>
 <method>
 <name>var spacing: CGFloat</name>
 <description>The distance in points between the adjacent edges of the stack view’s arranged views.</description>
 </method>
 </topic>
 <topic>
 <title>Adding Space Between Items</title>
 <method>
 <name>func customSpacing(after: UIView) -&amp;gt; CGFloat</name>
 <description>Returns the custom spacing after the specified view.</description>
 </method>
 <method>
 <name>func setCustomSpacing(CGFloat, after: UIView)</name>
 <description>Applies custom spacing after the specified view.</description>
 </method>
 <method>
 <name>class let spacingUseDefault: CGFloat</name>
 <description>The default spacing for subviews within a stack view.</description>
 </method>
 <method>
 <name>class let spacingUseSystem: CGFloat</name>
 <description>The system-defined spacing to the neighboring view.</description>
 </method>
 </topic>
 <topic>
 <title>Constants</title>
 <method>
 <name>enum UIStackView.Distribution</name>
 <description>The layout that defines the size and position of the arranged views along the stack view’s axis.</description>
 </method>
 <method>
 <name>enum UIStackView.Alignment</name>
 <description>The layout of arranged views perpendicular to the stack view’s axis.</description>
 </method>
 </topic>
 </topics>
 <relationships>
 <inherits_from>
 <name>UIView</name>
 </inherits_from>
 <conforms_to>
 <name>CVarArg</name>
 <name>Equatable</name>
 <name>Hashable</name>
 <name>UIAccessibilityIdentification</name>
 <name>UIPasteConfigurationSupporting</name>
 <name>UIUserActivityRestoring</name>
 </conforms_to>
 </relationships>
 <see-also>
 <control>
 <name>API Collection Collection Views</name>
 <description>Display nested views using a configurable and highly customizable layout.</description>
 </control>
 <control>
 <name>API Collection Table Views</name>
 <description>Display data in a single column of customizable rows.</description>
 </control>
 <control>
 <name>class UIScrollView</name>
 <description>A view that allows the scrolling and zooming of its contained views.</description>
 </control>
 </see-also>
 </api>