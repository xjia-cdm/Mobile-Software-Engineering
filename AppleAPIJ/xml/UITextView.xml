<api>
 <title>UITextView</title>
 <description>A scrollable, multiline text region.</description>
 <overview>
 <description>UITextView supports the display of text using custom style information and also supports text editing. You typically use a text view to display multiple lines of text, such as when displaying the body of a large text document.</description>
 <sub_overview>
 <name>Managing the Keyboard</name>
 <description>When the user taps in an editable text view, that text view becomes the first responder and automatically asks the system to display the associated keyboard. Because the appearance of the keyboard has the potential to obscure portions of your user interface, it is up to you to make sure that does not happen by repositioning any views that might be obscured. Some system views, like table views, help you by scrolling the first responder into view automatically. If the first responder is at the bottom of the scrolling region, however, you may still need to resize or reposition the scroll view itself to ensure the first responder is visible. It is your application’s responsibility to dismiss the keyboard at the time of your choosing. You might dismiss the keyboard in response to a specific user action, such as the user tapping a particular button in your user interface. To dismiss the keyboard, send the resignFirstResponder() message to the text view that is currently the first responder. Doing so causes the text view object to end the current editing session (with the delegate object’s consent) and hide the keyboard. The appearance of the keyboard itself can be customized using the properties provided by the UITextInputTraits protocol. Text view objects implement this protocol and support the properties it defines. You can use these properties to specify the type of keyboard (ASCII, Numbers, URL, Email, and others) to display. You can also configure the basic text entry behavior of the keyboard, such as whether it supports automatic capitalization and correction of the text.</description>
 </sub_overview>
 <sub_overview>
 <name>Keyboard Notifications</name>
 <description>When the system shows or hides the keyboard, it posts several keyboard notifications. These notifications contain information about the keyboard, including its size, which you can use for calculations that involve repositioning or resizing views. Registering for these notifications is the only way to get some types of information about the keyboard. The system delivers the following notifications for keyboard-related events: keyboardWillShowNotification keyboardDidShowNotification keyboardWillHideNotification keyboardDidHideNotification For more information about these notifications, see their descriptions in UIWindow.</description>
 </sub_overview>
 <sub_overview>
 <name>State Preservation</name>
 <description>In iOS 6 and later, if you assign a value to this view’s restorationIdentifier property, it preserves the following information: The selected range of text, as reported by the selectedRange property. The editing state of the text view, as reported by the isEditable property. During the next launch cycle, the view attempts to restore these properties to their saved values. If the selection range cannot be applied to the text in the restored view, no text is selected. For more information about how state preservation and restoration works, see App Programming Guide for iOS. For more information about appearance and behavior configuration, see Text Views.</description>
 </sub_overview>
 </overview>
 <topics>
 <topic>
 <title>Initializing the Text View</title>
 <method>
 <name>init(frame: CGRect, textContainer: NSTextContainer?)</name>
 <description>Creates a new text view with the specified text container.</description>
 </method>
 <method>
 <name>init?(coder: NSCoder)</name>
 </method>
 </topic>
 <topic>
 <title>Responding to Text View Changes</title>
 <method>
 <name>var delegate: UITextViewDelegate?</name>
 <description>The receiver’s delegate.</description>
 </method>
 <method>
 <name>protocol UITextViewDelegate</name>
 <description>The UITextViewDelegate protocol defines a set of optional methods you can use to receive editing-related messages for UITextView objects. All of the methods in this protocol are optional. You can use them in situations where you might want to adjust the text being edited (such as in the case of a spell checker program) or modify the intended insertion point.</description>
 </method>
 </topic>
 <topic>
 <title>Configuring the Text Attributes</title>
 <method>
 <name>var text: String!</name>
 <description>The text displayed by the text view.</description>
 </method>
 <method>
 <name>var attributedText: NSAttributedString!</name>
 <description>The styled text displayed by the text view.</description>
 </method>
 <method>
 <name>var font: UIFont?</name>
 <description>The font of the text.</description>
 </method>
 <method>
 <name>var textColor: UIColor?</name>
 <description>The color of the text.</description>
 </method>
 <method>
 <name>var isEditable: Bool</name>
 <description>A Boolean value indicating whether the receiver is editable.</description>
 </method>
 <method>
 <name>var allowsEditingTextAttributes: Bool</name>
 <description>A Boolean value indicating whether the text view allows the user to edit style information.</description>
 </method>
 <method>
 <name>var dataDetectorTypes: UIDataDetectorTypes</name>
 <description>The types of data converted to tappable URLs in the text view.</description>
 </method>
 <method>
 <name>var textAlignment: NSTextAlignment</name>
 <description>The technique to use for aligning the text.</description>
 </method>
 <method>
 <name>var typingAttributes: [NSAttributedString.Key : Any]</name>
 <description>The attributes to apply to new text being entered by the user.</description>
 </method>
 <method>
 <name>var linkTextAttributes: [NSAttributedString.Key : Any]!</name>
 <description>The attributes to apply to links.</description>
 </method>
 <method>
 <name>var textContainerInset: UIEdgeInsets</name>
 <description>The inset of the text container&amp;apos;s layout area within the text view&amp;apos;s content area.</description>
 </method>
 </topic>
 <topic>
 <title>Working with the Selection</title>
 <method>
 <name>var selectedRange: NSRange</name>
 <description>The current selection range of the receiver.</description>
 </method>
 <method>
 <name>func scrollRangeToVisible(NSRange)</name>
 <description>Scrolls the receiver until the text in the specified range is visible.</description>
 </method>
 <method>
 <name>var clearsOnInsertion: Bool</name>
 <description>A Boolean value indicating whether inserting text replaces the previous contents.</description>
 </method>
 <method>
 <name>var isSelectable: Bool</name>
 <description>A Boolean value indicating whether the receiver is selectable.</description>
 </method>
 </topic>
 <topic>
 <title>Replacing the System Input Views</title>
 <method>
 <name>var inputView: UIView?</name>
 <description>The custom input view to display when the text view becomes the first responder.</description>
 </method>
 <method>
 <name>var inputAccessoryView: UIView?</name>
 <description>The custom accessory view to display when the text view becomes the first responder</description>
 </method>
 </topic>
 <topic>
 <title>Accessing Text Kit Objects</title>
 <method>
 <name>var layoutManager: NSLayoutManager</name>
 <description>The layout manager that lays out text for the receiver’s text container.</description>
 </method>
 <method>
 <name>var textContainer: NSTextContainer</name>
 <description>The text container object defining the area in which text is displayed in this text view.</description>
 </method>
 <method>
 <name>var textStorage: NSTextStorage</name>
 <description>The text storage object holding the text displayed in this text view.</description>
 </method>
 </topic>
 <topic>
 <title>Notifications</title>
 <method>
 <name>class let textDidBeginEditingNotification: NSNotification.Name</name>
 <description>Notifies observers that an editing session began in a text view. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.</description>
 </method>
 <method>
 <name>class let textDidChangeNotification: NSNotification.Name</name>
 <description>Notifies observers that the text in a text view changed. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.</description>
 </method>
 <method>
 <name>class let textDidEndEditingNotification: NSNotification.Name</name>
 <description>Notifies observers that the editing session ended for a text view. The affected view is stored in the object parameter of the notification. The userInfo dictionary is not used.</description>
 </method>
 </topic>
 <topic>
 <title>Constants</title>
 <method>
 <name>struct UIDataDetectorTypes</name>
 <description>Defines the types of information that can be detected in text-based content.</description>
 </method>
 </topic>
 </topics>
 <relationships>
 <inherits_from>
 <name>UIScrollView</name>
 </inherits_from>
 <conforms_to>
 <name>CVarArg</name>
 <name>Equatable</name>
 <name>Hashable</name>
 <name>UIAccessibilityIdentification</name>
 <name>UIContentSizeCategoryAdjusting</name>
 <name>UIPasteConfigurationSupporting</name>
 <name>UITextDraggable</name>
 <name>UITextDroppable</name>
 <name>UITextInput</name>
 <name>UITextPasteConfigurationSupporting</name>
 <name>UIUserActivityRestoring</name>
 </conforms_to>
 </relationships>
 <see-also>
 <control>
 <name>class UILabel</name>
 <description>A view that displays one or more lines of read-only text, often used in conjunction with controls to describe their intended purpose.</description>
 </control>
 <control>
 <name>class UITextField</name>
 <description>An object that displays an editable text area in your interface.</description>
 </control>
 <control>
 <name>API Collection Drag and Drop Customization</name>
 <description>Extend the standard drag and drop support for text views to include custom types of content.</description>
 </control>
 </see-also>
 </api>