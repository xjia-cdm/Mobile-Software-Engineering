<api>
 <title>UIPickerView</title>
 <description>A view that uses a spinning-wheel or slot-machine metaphor to show one or more sets of values.</description>
 <overview>
 <description>A picker view displays one or more wheels that the user manipulates to select items. Each wheel—known as a component—has a series of indexed rows representing the selectable items. Each row displays a string or view so that the user can identify the item on that row. Users select items by rotating the wheels to the desired values, which align with a selection indicator.</description>
 </overview>
 <topics>
 <topic>
 <title>Providing the Picker Data</title>
 <method>
 <name>var dataSource: UIPickerViewDataSource?</name>
 <description>The data source for the picker view.</description>
 </method>
 <method>
 <name>protocol UIPickerViewDataSource</name>
 <description>The UIPickerViewDataSource protocol must be adopted by an object that mediates between a UIPickerView object and your application’s data model for that picker view. The data source provides the picker view with the number of components, and the number of rows in each component, for displaying the picker view data. Both methods in this protocol are required.</description>
 </method>
 </topic>
 <topic>
 <title>Customizing the Picker Behavior</title>
 <method>
 <name>var delegate: UIPickerViewDelegate?</name>
 <description>The delegate for the picker view.</description>
 </method>
 <method>
 <name>protocol UIPickerViewDelegate</name>
 <description>The delegate of a UIPickerView object must adopt this protocol and implement at least some of its methods to provide the picker view with the data it needs to construct itself.</description>
 </method>
 </topic>
 <topic>
 <title>Getting the Dimensions of the View Picker</title>
 <method>
 <name>var numberOfComponents: Int</name>
 <description>Gets the number of components for the picker view.</description>
 </method>
 <method>
 <name>func numberOfRows(inComponent: Int) -&amp;gt; Int</name>
 <description>Returns the number of rows for a component.</description>
 </method>
 <method>
 <name>func rowSize(forComponent: Int) -&amp;gt; CGSize</name>
 <description>Returns the size of a row for a component.</description>
 </method>
 </topic>
 <topic>
 <title>Reloading the View Picker</title>
 <method>
 <name>func reloadAllComponents()</name>
 <description>Reloads all components of the picker view.</description>
 </method>
 <method>
 <name>func reloadComponent(Int)</name>
 <description>Reloads a particular component of the picker view.</description>
 </method>
 </topic>
 <topic>
 <title>Selecting Rows in the View Picker</title>
 <method>
 <name>func selectRow(Int, inComponent: Int, animated: Bool)</name>
 <description>Selects a row in a specified component of the picker view.</description>
 </method>
 <method>
 <name>func selectedRow(inComponent: Int) -&amp;gt; Int</name>
 <description>Returns the index of the selected row in a given component.</description>
 </method>
 </topic>
 <topic>
 <title>Returning the View for a Row and Component</title>
 <method>
 <name>func view(forRow: Int, forComponent: Int) -&amp;gt; UIView?</name>
 <description>Returns the view used by the picker view for a given row and component.</description>
 </method>
 </topic>
 <topic>
 <title>Managing the Appearance of the Picker View</title>
 <method>
 <name>var showsSelectionIndicator: Bool</name>
 <description>A Boolean value that determines whether the selection indicator is displayed.</description>
 </method>
 </topic>
 </topics>
 <relationships>
 <inherits_from>
 <name>UIView</name>
 </inherits_from>
 <conforms_to>
 <name>CVarArg</name>
 <name>Equatable</name>
 <name>Hashable</name>
 <name>NSCoding</name>
 <name>UIAccessibilityIdentification</name>
 <name>UIPasteConfigurationSupporting</name>
 <name>UIUserActivityRestoring</name>
 </conforms_to>
 </relationships>
 <see-also>
 <control>
 <name>class UIActivityIndicatorView</name>
 <description>A view that shows that a task is in progress.</description>
 </control>
 <control>
 <name>class UIImageView</name>
 <description>An object that displays a single image or a sequence of animated images in your interface.</description>
 </control>
 <control>
 <name>class UIProgressView</name>
 <description>A view that depicts the progress of a task over time.</description>
 </control>
 <control>
 <name>class UIWebView</name>
 <description>A view that embeds web content in your app.</description>
 </control>
 </see-also>
 </api>